
disp_mang.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  000024b6  0000254a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000a4  008000a4  0000258e  2**0
                  ALLOC
  3 .stab         00001cbc  00000000  00000000  00002590  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a7e  00000000  00000000  0000424c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004cca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007aae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000885c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000089bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008c49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009417  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3a       	cpi	r26, 0xA7	; 167
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f6 07 	call	0xfec	; 0xfec <main>
      8a:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e8       	ldi	r26, 0x8E	; 142
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 05 12 	jmp	0x240a	; 0x240a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 05 12 	jmp	0x240a	; 0x240a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8e e8       	ldi	r24, 0x8E	; 142
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 05 12 	jmp	0x240a	; 0x240a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 05 12 	jmp	0x240a	; 0x240a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 05 12 	jmp	0x240a	; 0x240a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <masterInit>:
	PORTB_BASE_ADDRESS,
	PORTC_BASE_ADDRESS,
PORTD_BASE_ADDRESS};


void masterInit(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
 /*Set MOSI, SCK and SS Output*/
 DDR_REG(1)=(1<<MOSI)|(1<<SCK)|(1<<SS);
     b4e:	80 91 a1 00 	lds	r24, 0x00A1
     b52:	88 2f       	mov	r24, r24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	fc 01       	movw	r30, r24
     b5a:	80 eb       	ldi	r24, 0xB0	; 176
     b5c:	80 83       	st	Z, r24
 DDR_REG(1)= DDR_REG(1)& ~(1<<MISO);
     b5e:	80 91 a1 00 	lds	r24, 0x00A1
     b62:	88 2f       	mov	r24, r24
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	01 97       	sbiw	r24, 0x01	; 1
     b68:	dc 01       	movw	r26, r24
     b6a:	80 91 a1 00 	lds	r24, 0x00A1
     b6e:	88 2f       	mov	r24, r24
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	fc 01       	movw	r30, r24
     b76:	80 81       	ld	r24, Z
     b78:	8f 7b       	andi	r24, 0xBF	; 191
     b7a:	8c 93       	st	X, r24
 /*Enable SPI Master set clock rate fck/128 data is 
 sample at falling edge*/
 SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0)|(1<<CPHA);
     b7c:	ed e2       	ldi	r30, 0x2D	; 45
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	87 e5       	ldi	r24, 0x57	; 87
     b82:	80 83       	st	Z, r24
 
}
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <slaveInit>:

void slaveInit(void){
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
	 
 DDR_REG(1)= DDR_REG(1)& (~(1<<SS));  
     b92:	80 91 a1 00 	lds	r24, 0x00A1
     b96:	88 2f       	mov	r24, r24
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	dc 01       	movw	r26, r24
     b9e:	80 91 a1 00 	lds	r24, 0x00A1
     ba2:	88 2f       	mov	r24, r24
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	fc 01       	movw	r30, r24
     baa:	80 81       	ld	r24, Z
     bac:	8f 7e       	andi	r24, 0xEF	; 239
     bae:	8c 93       	st	X, r24
 DDR_REG(1)= DDR_REG(1)& (~(1<<MOSI));
     bb0:	80 91 a1 00 	lds	r24, 0x00A1
     bb4:	88 2f       	mov	r24, r24
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	01 97       	sbiw	r24, 0x01	; 1
     bba:	dc 01       	movw	r26, r24
     bbc:	80 91 a1 00 	lds	r24, 0x00A1
     bc0:	88 2f       	mov	r24, r24
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	fc 01       	movw	r30, r24
     bc8:	80 81       	ld	r24, Z
     bca:	8f 77       	andi	r24, 0x7F	; 127
     bcc:	8c 93       	st	X, r24
 DDR_REG(1)= DDR_REG(1)| (1<<MISO);
     bce:	80 91 a1 00 	lds	r24, 0x00A1
     bd2:	88 2f       	mov	r24, r24
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	01 97       	sbiw	r24, 0x01	; 1
     bd8:	dc 01       	movw	r26, r24
     bda:	80 91 a1 00 	lds	r24, 0x00A1
     bde:	88 2f       	mov	r24, r24
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	fc 01       	movw	r30, r24
     be6:	80 81       	ld	r24, Z
     be8:	80 64       	ori	r24, 0x40	; 64
     bea:	8c 93       	st	X, r24
 DDR_REG(1)= DDR_REG(1)& (~(1<<SCK));
     bec:	80 91 a1 00 	lds	r24, 0x00A1
     bf0:	88 2f       	mov	r24, r24
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	01 97       	sbiw	r24, 0x01	; 1
     bf6:	dc 01       	movw	r26, r24
     bf8:	80 91 a1 00 	lds	r24, 0x00A1
     bfc:	88 2f       	mov	r24, r24
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	01 97       	sbiw	r24, 0x01	; 1
     c02:	fc 01       	movw	r30, r24
     c04:	80 81       	ld	r24, Z
     c06:	8f 7d       	andi	r24, 0xDF	; 223
     c08:	8c 93       	st	X, r24
 SPCR=(1<<SPE);
     c0a:	ed e2       	ldi	r30, 0x2D	; 45
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 e4       	ldi	r24, 0x40	; 64
     c10:	80 83       	st	Z, r24

}
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <masterTransmit>:

void masterTransmit(char spiData){
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	0f 92       	push	r0
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	89 83       	std	Y+1, r24	; 0x01
 /*Start the transmission*/
 SPDR=spiData;
     c24:	ef e2       	ldi	r30, 0x2F	; 47
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	80 83       	st	Z, r24
 /*Wait for completion*/
 while(!(SPSR&(1<<SPIF)));
     c2c:	ee e2       	ldi	r30, 0x2E	; 46
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	88 23       	and	r24, r24
     c34:	dc f7       	brge	.-10     	; 0xc2c <masterTransmit+0x14>
 
 
}
     c36:	0f 90       	pop	r0
     c38:	cf 91       	pop	r28
     c3a:	df 91       	pop	r29
     c3c:	08 95       	ret

00000c3e <masterReceive>:

char masterReceive(void){
     c3e:	df 93       	push	r29
     c40:	cf 93       	push	r28
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
 /*Wait for the SPI buffer's full*/
 while(!(SPSR&(1<<SPIF)));
     c46:	ee e2       	ldi	r30, 0x2E	; 46
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	88 23       	and	r24, r24
     c4e:	dc f7       	brge	.-10     	; 0xc46 <masterReceive+0x8>
 /*return SPI Buffer*/
 return SPDR;
     c50:	ef e2       	ldi	r30, 0x2F	; 47
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
}
     c56:	cf 91       	pop	r28
     c58:	df 91       	pop	r29
     c5a:	08 95       	ret

00000c5c <tc72Init>:
#include <util/delay.h>




void tc72Init(void){
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	2e 97       	sbiw	r28, 0x0e	; 14
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	cd bf       	out	0x3d, r28	; 61
	 masterInit();
     c70:	0e 94 a3 05 	call	0xb46	; 0xb46 <masterInit>
	 PORT_REG|=(1<<ENABLE_PIN);
     c74:	a8 e3       	ldi	r26, 0x38	; 56
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e8 e3       	ldi	r30, 0x38	; 56
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	80 61       	ori	r24, 0x10	; 16
     c80:	8c 93       	st	X, r24
	 /*Select Control Register*/
	 masterTransmit(TC72_CONTROL_WRITE_REG);
     c82:	80 e8       	ldi	r24, 0x80	; 128
     c84:	0e 94 0c 06 	call	0xc18	; 0xc18 <masterTransmit>
	 /*Select Continuous temperature Conversion*/
	 masterTransmit(TC72_MODE_CONTINUOUS);
     c88:	84 e0       	ldi	r24, 0x04	; 4
     c8a:	0e 94 0c 06 	call	0xc18	; 0xc18 <masterTransmit>
	 PORT_REG &=~(1<<ENABLE_PIN);
     c8e:	a8 e3       	ldi	r26, 0x38	; 56
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e8 e3       	ldi	r30, 0x38	; 56
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	8f 7e       	andi	r24, 0xEF	; 239
     c9a:	8c 93       	st	X, r24
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	a6 e1       	ldi	r26, 0x16	; 22
     ca2:	b3 e4       	ldi	r27, 0x43	; 67
     ca4:	8b 87       	std	Y+11, r24	; 0x0b
     ca6:	9c 87       	std	Y+12, r25	; 0x0c
     ca8:	ad 87       	std	Y+13, r26	; 0x0d
     caa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cac:	6b 85       	ldd	r22, Y+11	; 0x0b
     cae:	7c 85       	ldd	r23, Y+12	; 0x0c
     cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	4a e7       	ldi	r20, 0x7A	; 122
     cba:	54 e4       	ldi	r21, 0x44	; 68
     cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cc0:	dc 01       	movw	r26, r24
     cc2:	cb 01       	movw	r24, r22
     cc4:	8f 83       	std	Y+7, r24	; 0x07
     cc6:	98 87       	std	Y+8, r25	; 0x08
     cc8:	a9 87       	std	Y+9, r26	; 0x09
     cca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ccc:	6f 81       	ldd	r22, Y+7	; 0x07
     cce:	78 85       	ldd	r23, Y+8	; 0x08
     cd0:	89 85       	ldd	r24, Y+9	; 0x09
     cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	40 e8       	ldi	r20, 0x80	; 128
     cda:	5f e3       	ldi	r21, 0x3F	; 63
     cdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ce0:	88 23       	and	r24, r24
     ce2:	2c f4       	brge	.+10     	; 0xcee <tc72Init+0x92>
		__ticks = 1;
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	9e 83       	std	Y+6, r25	; 0x06
     cea:	8d 83       	std	Y+5, r24	; 0x05
     cec:	3f c0       	rjmp	.+126    	; 0xd6c <tc72Init+0x110>
	else if (__tmp > 65535)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	3f ef       	ldi	r19, 0xFF	; 255
     cfa:	4f e7       	ldi	r20, 0x7F	; 127
     cfc:	57 e4       	ldi	r21, 0x47	; 71
     cfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d02:	18 16       	cp	r1, r24
     d04:	4c f5       	brge	.+82     	; 0xd58 <tc72Init+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d06:	6b 85       	ldd	r22, Y+11	; 0x0b
     d08:	7c 85       	ldd	r23, Y+12	; 0x0c
     d0a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d0c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	40 e2       	ldi	r20, 0x20	; 32
     d14:	51 e4       	ldi	r21, 0x41	; 65
     d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d1a:	dc 01       	movw	r26, r24
     d1c:	cb 01       	movw	r24, r22
     d1e:	bc 01       	movw	r22, r24
     d20:	cd 01       	movw	r24, r26
     d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d26:	dc 01       	movw	r26, r24
     d28:	cb 01       	movw	r24, r22
     d2a:	9e 83       	std	Y+6, r25	; 0x06
     d2c:	8d 83       	std	Y+5, r24	; 0x05
     d2e:	0f c0       	rjmp	.+30     	; 0xd4e <tc72Init+0xf2>
     d30:	84 e6       	ldi	r24, 0x64	; 100
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	9c 83       	std	Y+4, r25	; 0x04
     d36:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	9c 81       	ldd	r25, Y+4	; 0x04
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	f1 f7       	brne	.-4      	; 0xd3c <tc72Init+0xe0>
     d40:	9c 83       	std	Y+4, r25	; 0x04
     d42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d44:	8d 81       	ldd	r24, Y+5	; 0x05
     d46:	9e 81       	ldd	r25, Y+6	; 0x06
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	9e 83       	std	Y+6, r25	; 0x06
     d4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d4e:	8d 81       	ldd	r24, Y+5	; 0x05
     d50:	9e 81       	ldd	r25, Y+6	; 0x06
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	69 f7       	brne	.-38     	; 0xd30 <tc72Init+0xd4>
     d56:	14 c0       	rjmp	.+40     	; 0xd80 <tc72Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d58:	6f 81       	ldd	r22, Y+7	; 0x07
     d5a:	78 85       	ldd	r23, Y+8	; 0x08
     d5c:	89 85       	ldd	r24, Y+9	; 0x09
     d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d64:	dc 01       	movw	r26, r24
     d66:	cb 01       	movw	r24, r22
     d68:	9e 83       	std	Y+6, r25	; 0x06
     d6a:	8d 83       	std	Y+5, r24	; 0x05
     d6c:	8d 81       	ldd	r24, Y+5	; 0x05
     d6e:	9e 81       	ldd	r25, Y+6	; 0x06
     d70:	9a 83       	std	Y+2, r25	; 0x02
     d72:	89 83       	std	Y+1, r24	; 0x01
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	9a 81       	ldd	r25, Y+2	; 0x02
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	f1 f7       	brne	.-4      	; 0xd78 <tc72Init+0x11c>
     d7c:	9a 83       	std	Y+2, r25	; 0x02
     d7e:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(150);
 
}
     d80:	2e 96       	adiw	r28, 0x0e	; 14
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <tc72_Read>:


void tc72_Read(char * msb ,char * lsb){
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	a0 97       	sbiw	r28, 0x20	; 32
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	9e 8f       	std	Y+30, r25	; 0x1e
     da8:	8d 8f       	std	Y+29, r24	; 0x1d
     daa:	78 a3       	std	Y+32, r23	; 0x20
     dac:	6f 8f       	std	Y+31, r22	; 0x1f
	PORT_REG|=(1<<ENABLE_PIN);
     dae:	a8 e3       	ldi	r26, 0x38	; 56
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e8 e3       	ldi	r30, 0x38	; 56
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	80 61       	ori	r24, 0x10	; 16
     dba:	8c 93       	st	X, r24
  /*Read the MSB*/
  masterTransmit(TC72_MSB_REG);
     dbc:	82 e0       	ldi	r24, 0x02	; 2
     dbe:	0e 94 0c 06 	call	0xc18	; 0xc18 <masterTransmit>
  /*Issue one more clock frame to force data out*/
  masterTransmit(TC72_CONTROL_READ_REG);
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	0e 94 0c 06 	call	0xc18	; 0xc18 <masterTransmit>
  PORT_REG &=~(1<<ENABLE_PIN);
     dc8:	a8 e3       	ldi	r26, 0x38	; 56
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e8 e3       	ldi	r30, 0x38	; 56
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	8f 7e       	andi	r24, 0xEF	; 239
     dd4:	8c 93       	st	X, r24
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	a0 e8       	ldi	r26, 0x80	; 128
     ddc:	bf e3       	ldi	r27, 0x3F	; 63
     dde:	89 8f       	std	Y+25, r24	; 0x19
     de0:	9a 8f       	std	Y+26, r25	; 0x1a
     de2:	ab 8f       	std	Y+27, r26	; 0x1b
     de4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de6:	69 8d       	ldd	r22, Y+25	; 0x19
     de8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dea:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dec:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	4a e7       	ldi	r20, 0x7A	; 122
     df4:	54 e4       	ldi	r21, 0x44	; 68
     df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfa:	dc 01       	movw	r26, r24
     dfc:	cb 01       	movw	r24, r22
     dfe:	8d 8b       	std	Y+21, r24	; 0x15
     e00:	9e 8b       	std	Y+22, r25	; 0x16
     e02:	af 8b       	std	Y+23, r26	; 0x17
     e04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e06:	6d 89       	ldd	r22, Y+21	; 0x15
     e08:	7e 89       	ldd	r23, Y+22	; 0x16
     e0a:	8f 89       	ldd	r24, Y+23	; 0x17
     e0c:	98 8d       	ldd	r25, Y+24	; 0x18
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	40 e8       	ldi	r20, 0x80	; 128
     e14:	5f e3       	ldi	r21, 0x3F	; 63
     e16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e1a:	88 23       	and	r24, r24
     e1c:	2c f4       	brge	.+10     	; 0xe28 <tc72_Read+0x96>
		__ticks = 1;
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	9c 8b       	std	Y+20, r25	; 0x14
     e24:	8b 8b       	std	Y+19, r24	; 0x13
     e26:	3f c0       	rjmp	.+126    	; 0xea6 <tc72_Read+0x114>
	else if (__tmp > 65535)
     e28:	6d 89       	ldd	r22, Y+21	; 0x15
     e2a:	7e 89       	ldd	r23, Y+22	; 0x16
     e2c:	8f 89       	ldd	r24, Y+23	; 0x17
     e2e:	98 8d       	ldd	r25, Y+24	; 0x18
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	3f ef       	ldi	r19, 0xFF	; 255
     e34:	4f e7       	ldi	r20, 0x7F	; 127
     e36:	57 e4       	ldi	r21, 0x47	; 71
     e38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e3c:	18 16       	cp	r1, r24
     e3e:	4c f5       	brge	.+82     	; 0xe92 <tc72_Read+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e40:	69 8d       	ldd	r22, Y+25	; 0x19
     e42:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e44:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e46:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	40 e2       	ldi	r20, 0x20	; 32
     e4e:	51 e4       	ldi	r21, 0x41	; 65
     e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	bc 01       	movw	r22, r24
     e5a:	cd 01       	movw	r24, r26
     e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	9c 8b       	std	Y+20, r25	; 0x14
     e66:	8b 8b       	std	Y+19, r24	; 0x13
     e68:	0f c0       	rjmp	.+30     	; 0xe88 <tc72_Read+0xf6>
     e6a:	84 e6       	ldi	r24, 0x64	; 100
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	9a 8b       	std	Y+18, r25	; 0x12
     e70:	89 8b       	std	Y+17, r24	; 0x11
     e72:	89 89       	ldd	r24, Y+17	; 0x11
     e74:	9a 89       	ldd	r25, Y+18	; 0x12
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <tc72_Read+0xe4>
     e7a:	9a 8b       	std	Y+18, r25	; 0x12
     e7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7e:	8b 89       	ldd	r24, Y+19	; 0x13
     e80:	9c 89       	ldd	r25, Y+20	; 0x14
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	9c 8b       	std	Y+20, r25	; 0x14
     e86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e88:	8b 89       	ldd	r24, Y+19	; 0x13
     e8a:	9c 89       	ldd	r25, Y+20	; 0x14
     e8c:	00 97       	sbiw	r24, 0x00	; 0
     e8e:	69 f7       	brne	.-38     	; 0xe6a <tc72_Read+0xd8>
     e90:	14 c0       	rjmp	.+40     	; 0xeba <tc72_Read+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e92:	6d 89       	ldd	r22, Y+21	; 0x15
     e94:	7e 89       	ldd	r23, Y+22	; 0x16
     e96:	8f 89       	ldd	r24, Y+23	; 0x17
     e98:	98 8d       	ldd	r25, Y+24	; 0x18
     e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	9c 8b       	std	Y+20, r25	; 0x14
     ea4:	8b 8b       	std	Y+19, r24	; 0x13
     ea6:	8b 89       	ldd	r24, Y+19	; 0x13
     ea8:	9c 89       	ldd	r25, Y+20	; 0x14
     eaa:	98 8b       	std	Y+16, r25	; 0x10
     eac:	8f 87       	std	Y+15, r24	; 0x0f
     eae:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb0:	98 89       	ldd	r25, Y+16	; 0x10
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	f1 f7       	brne	.-4      	; 0xeb2 <tc72_Read+0x120>
     eb6:	98 8b       	std	Y+16, r25	; 0x10
     eb8:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);
  *msb=masterReceive();
     eba:	0e 94 1f 06 	call	0xc3e	; 0xc3e <masterReceive>
     ebe:	ed 8d       	ldd	r30, Y+29	; 0x1d
     ec0:	fe 8d       	ldd	r31, Y+30	; 0x1e
     ec2:	80 83       	st	Z, r24
  PORT_REG |=(1<<ENABLE_PIN);
     ec4:	a8 e3       	ldi	r26, 0x38	; 56
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e8 e3       	ldi	r30, 0x38	; 56
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 61       	ori	r24, 0x10	; 16
     ed0:	8c 93       	st	X, r24
  /*Read The LSB*/
  masterTransmit(TC72_LSB_REG);
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	0e 94 0c 06 	call	0xc18	; 0xc18 <masterTransmit>
  /*Issue one more clock frame to force data out*/
  masterTransmit(TC72_CONTROL_READ_REG);
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	0e 94 0c 06 	call	0xc18	; 0xc18 <masterTransmit>
  PORT_REG &=~(1<<ENABLE_PIN); 
     ede:	a8 e3       	ldi	r26, 0x38	; 56
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e8 e3       	ldi	r30, 0x38	; 56
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	8f 7e       	andi	r24, 0xEF	; 239
     eea:	8c 93       	st	X, r24
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	a0 e8       	ldi	r26, 0x80	; 128
     ef2:	bf e3       	ldi	r27, 0x3F	; 63
     ef4:	8b 87       	std	Y+11, r24	; 0x0b
     ef6:	9c 87       	std	Y+12, r25	; 0x0c
     ef8:	ad 87       	std	Y+13, r26	; 0x0d
     efa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     efc:	6b 85       	ldd	r22, Y+11	; 0x0b
     efe:	7c 85       	ldd	r23, Y+12	; 0x0c
     f00:	8d 85       	ldd	r24, Y+13	; 0x0d
     f02:	9e 85       	ldd	r25, Y+14	; 0x0e
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	4a e7       	ldi	r20, 0x7A	; 122
     f0a:	54 e4       	ldi	r21, 0x44	; 68
     f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	8f 83       	std	Y+7, r24	; 0x07
     f16:	98 87       	std	Y+8, r25	; 0x08
     f18:	a9 87       	std	Y+9, r26	; 0x09
     f1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f1c:	6f 81       	ldd	r22, Y+7	; 0x07
     f1e:	78 85       	ldd	r23, Y+8	; 0x08
     f20:	89 85       	ldd	r24, Y+9	; 0x09
     f22:	9a 85       	ldd	r25, Y+10	; 0x0a
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e8       	ldi	r20, 0x80	; 128
     f2a:	5f e3       	ldi	r21, 0x3F	; 63
     f2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f30:	88 23       	and	r24, r24
     f32:	2c f4       	brge	.+10     	; 0xf3e <tc72_Read+0x1ac>
		__ticks = 1;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	9e 83       	std	Y+6, r25	; 0x06
     f3a:	8d 83       	std	Y+5, r24	; 0x05
     f3c:	3f c0       	rjmp	.+126    	; 0xfbc <tc72_Read+0x22a>
	else if (__tmp > 65535)
     f3e:	6f 81       	ldd	r22, Y+7	; 0x07
     f40:	78 85       	ldd	r23, Y+8	; 0x08
     f42:	89 85       	ldd	r24, Y+9	; 0x09
     f44:	9a 85       	ldd	r25, Y+10	; 0x0a
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	3f ef       	ldi	r19, 0xFF	; 255
     f4a:	4f e7       	ldi	r20, 0x7F	; 127
     f4c:	57 e4       	ldi	r21, 0x47	; 71
     f4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f52:	18 16       	cp	r1, r24
     f54:	4c f5       	brge	.+82     	; 0xfa8 <tc72_Read+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f56:	6b 85       	ldd	r22, Y+11	; 0x0b
     f58:	7c 85       	ldd	r23, Y+12	; 0x0c
     f5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e2       	ldi	r20, 0x20	; 32
     f64:	51 e4       	ldi	r21, 0x41	; 65
     f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	bc 01       	movw	r22, r24
     f70:	cd 01       	movw	r24, r26
     f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	9e 83       	std	Y+6, r25	; 0x06
     f7c:	8d 83       	std	Y+5, r24	; 0x05
     f7e:	0f c0       	rjmp	.+30     	; 0xf9e <tc72_Read+0x20c>
     f80:	84 e6       	ldi	r24, 0x64	; 100
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	9c 83       	std	Y+4, r25	; 0x04
     f86:	8b 83       	std	Y+3, r24	; 0x03
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	9c 81       	ldd	r25, Y+4	; 0x04
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	f1 f7       	brne	.-4      	; 0xf8c <tc72_Read+0x1fa>
     f90:	9c 83       	std	Y+4, r25	; 0x04
     f92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f94:	8d 81       	ldd	r24, Y+5	; 0x05
     f96:	9e 81       	ldd	r25, Y+6	; 0x06
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	9e 83       	std	Y+6, r25	; 0x06
     f9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f9e:	8d 81       	ldd	r24, Y+5	; 0x05
     fa0:	9e 81       	ldd	r25, Y+6	; 0x06
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	69 f7       	brne	.-38     	; 0xf80 <tc72_Read+0x1ee>
     fa6:	14 c0       	rjmp	.+40     	; 0xfd0 <tc72_Read+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa8:	6f 81       	ldd	r22, Y+7	; 0x07
     faa:	78 85       	ldd	r23, Y+8	; 0x08
     fac:	89 85       	ldd	r24, Y+9	; 0x09
     fae:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	9e 83       	std	Y+6, r25	; 0x06
     fba:	8d 83       	std	Y+5, r24	; 0x05
     fbc:	8d 81       	ldd	r24, Y+5	; 0x05
     fbe:	9e 81       	ldd	r25, Y+6	; 0x06
     fc0:	9a 83       	std	Y+2, r25	; 0x02
     fc2:	89 83       	std	Y+1, r24	; 0x01
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	9a 81       	ldd	r25, Y+2	; 0x02
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <tc72_Read+0x236>
     fcc:	9a 83       	std	Y+2, r25	; 0x02
     fce:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
  *lsb=masterReceive();
     fd0:	0e 94 1f 06 	call	0xc3e	; 0xc3e <masterReceive>
     fd4:	ef 8d       	ldd	r30, Y+31	; 0x1f
     fd6:	f8 a1       	ldd	r31, Y+32	; 0x20
     fd8:	80 83       	st	Z, r24
}
     fda:	a0 96       	adiw	r28, 0x20	; 32
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <main>:
#include "keypad.h"
char a[10]="WELCOME";
char c;
int input=0;
void IDLE_Screen(void);
int main(){
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <main+0x6>
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62

	LCD_init(); /* initialize LCD */
     ff6:	0e 94 dd 08 	call	0x11ba	; 0x11ba <LCD_init>
	LCD_displayString("WELCOME");
     ffa:	80 e6       	ldi	r24, 0x60	; 96
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 2c 11 	call	0x2258	; 0x2258 <LCD_displayString>
	for(int i=0;i<3;i++){
    1002:	1a 82       	std	Y+2, r1	; 0x02
    1004:	19 82       	std	Y+1, r1	; 0x01
    1006:	0b c0       	rjmp	.+22     	; 0x101e <main+0x32>
		LCD_sendCommand(0x1C);
    1008:	8c e1       	ldi	r24, 0x1C	; 28
    100a:	0e 94 fe 08 	call	0x11fc	; 0x11fc <LCD_sendCommand>
		LCD_sendCommand(0x18);
    100e:	88 e1       	ldi	r24, 0x18	; 24
    1010:	0e 94 fe 08 	call	0x11fc	; 0x11fc <LCD_sendCommand>
void IDLE_Screen(void);
int main(){

	LCD_init(); /* initialize LCD */
	LCD_displayString("WELCOME");
	for(int i=0;i<3;i++){
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	9a 81       	ldd	r25, Y+2	; 0x02
    1018:	01 96       	adiw	r24, 0x01	; 1
    101a:	9a 83       	std	Y+2, r25	; 0x02
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	9a 81       	ldd	r25, Y+2	; 0x02
    1022:	83 30       	cpi	r24, 0x03	; 3
    1024:	91 05       	cpc	r25, r1
    1026:	84 f3       	brlt	.-32     	; 0x1008 <main+0x1c>
		LCD_sendCommand(0x1C);
		LCD_sendCommand(0x18);
	}
	LCD_clearScreen();
    1028:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <LCD_clearScreen>
	IDLE_Screen();
    102c:	0e 94 35 08 	call	0x106a	; 0x106a <IDLE_Screen>
	input = KeyPad_getPressedKey();
    1030:	0e 94 51 08 	call	0x10a2	; 0x10a2 <KeyPad_getPressedKey>
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	90 93 a5 00 	sts	0x00A5, r25
    103c:	80 93 a4 00 	sts	0x00A4, r24
//	_delay_ms(50);
	if(input=='#'){
    1040:	80 91 a4 00 	lds	r24, 0x00A4
    1044:	90 91 a5 00 	lds	r25, 0x00A5
    1048:	83 32       	cpi	r24, 0x23	; 35
    104a:	91 05       	cpc	r25, r1
    104c:	39 f4       	brne	.+14     	; 0x105c <main+0x70>
		LCD_displayStringRowColumn(1,6,"OPERATION");
    104e:	28 e6       	ldi	r18, 0x68	; 104
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	66 e0       	ldi	r22, 0x06	; 6
    1056:	a9 01       	movw	r20, r18
    1058:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayStringRowColumn>
	}




	return 0;
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	90 e0       	ldi	r25, 0x00	; 0
}
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <IDLE_Screen>:

void IDLE_Screen(void){
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
	LCD_displayStringRowColumn(0,0,"SET:25");
    1072:	22 e7       	ldi	r18, 0x72	; 114
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	a9 01       	movw	r20, r18
    107c:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(0,10,"CRT:00");
    1080:	29 e7       	ldi	r18, 0x79	; 121
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	6a e0       	ldi	r22, 0x0A	; 10
    1088:	a9 01       	movw	r20, r18
    108a:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"STATE:STANDBY");
    108e:	20 e8       	ldi	r18, 0x80	; 128
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	a9 01       	movw	r20, r18
    1098:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayStringRowColumn>
}
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <KeyPad_getPressedKey+0x6>
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    10ac:	1a 82       	std	Y+2, r1	; 0x02
    10ae:	4d c0       	rjmp	.+154    	; 0x114a <KeyPad_getPressedKey+0xa8>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    10b0:	ea e3       	ldi	r30, 0x3A	; 58
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	80 e1       	ldi	r24, 0x10	; 16
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <KeyPad_getPressedKey+0x22>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	2a 95       	dec	r18
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <KeyPad_getPressedKey+0x1e>
    10c8:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    10ca:	eb e3       	ldi	r30, 0x3B	; 59
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	80 e1       	ldi	r24, 0x10	; 16
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <KeyPad_getPressedKey+0x3e>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <KeyPad_getPressedKey+0x3a>
    10e4:	80 95       	com	r24
    10e6:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
    10e8:	19 82       	std	Y+1, r1	; 0x01
    10ea:	29 c0       	rjmp	.+82     	; 0x113e <KeyPad_getPressedKey+0x9c>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    10ec:	e9 e3       	ldi	r30, 0x39	; 57
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	88 2f       	mov	r24, r24
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	a9 01       	movw	r20, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <KeyPad_getPressedKey+0x62>
    1100:	55 95       	asr	r21
    1102:	47 95       	ror	r20
    1104:	8a 95       	dec	r24
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <KeyPad_getPressedKey+0x5e>
    1108:	ca 01       	movw	r24, r20
    110a:	81 70       	andi	r24, 0x01	; 1
    110c:	90 70       	andi	r25, 0x00	; 0
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	99 f4       	brne	.+38     	; 0x1138 <KeyPad_getPressedKey+0x96>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	c9 01       	movw	r24, r18
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	82 0f       	add	r24, r18
    1120:	93 1f       	adc	r25, r19
    1122:	98 2f       	mov	r25, r24
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	89 0f       	add	r24, r25
    1128:	8f 5f       	subi	r24, 0xFF	; 255
    112a:	0e 94 aa 08 	call	0x1154	; 0x1154 <KeyPad_4x3_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	8f 5f       	subi	r24, 0xFF	; 255
    113c:	89 83       	std	Y+1, r24	; 0x01
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	84 30       	cpi	r24, 0x04	; 4
    1142:	a0 f2       	brcs	.-88     	; 0x10ec <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	8f 5f       	subi	r24, 0xFF	; 255
    1148:	8a 83       	std	Y+2, r24	; 0x02
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	83 30       	cpi	r24, 0x03	; 3
    114e:	08 f4       	brcc	.+2      	; 0x1152 <KeyPad_getPressedKey+0xb0>
    1150:	af cf       	rjmp	.-162    	; 0x10b0 <KeyPad_getPressedKey+0xe>
    1152:	ac cf       	rjmp	.-168    	; 0x10ac <KeyPad_getPressedKey+0xa>

00001154 <KeyPad_4x3_adjustKeyNumber>:
}

#if (N_col == 3) 

static uint8 KeyPad_4x3_adjustKeyNumber(uint8 button_number)
{
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	00 d0       	rcall	.+0      	; 0x115a <KeyPad_4x3_adjustKeyNumber+0x6>
    115a:	00 d0       	rcall	.+0      	; 0x115c <KeyPad_4x3_adjustKeyNumber+0x8>
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	3c 83       	std	Y+4, r19	; 0x04
    116a:	2b 83       	std	Y+3, r18	; 0x03
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	8a 30       	cpi	r24, 0x0A	; 10
    1172:	91 05       	cpc	r25, r1
    1174:	81 f0       	breq	.+32     	; 0x1196 <KeyPad_4x3_adjustKeyNumber+0x42>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	2a 30       	cpi	r18, 0x0A	; 10
    117c:	31 05       	cpc	r19, r1
    117e:	9c f0       	brlt	.+38     	; 0x11a6 <KeyPad_4x3_adjustKeyNumber+0x52>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	8b 30       	cpi	r24, 0x0B	; 11
    1186:	91 05       	cpc	r25, r1
    1188:	49 f0       	breq	.+18     	; 0x119c <KeyPad_4x3_adjustKeyNumber+0x48>
    118a:	2b 81       	ldd	r18, Y+3	; 0x03
    118c:	3c 81       	ldd	r19, Y+4	; 0x04
    118e:	2c 30       	cpi	r18, 0x0C	; 12
    1190:	31 05       	cpc	r19, r1
    1192:	31 f0       	breq	.+12     	; 0x11a0 <KeyPad_4x3_adjustKeyNumber+0x4c>
    1194:	08 c0       	rjmp	.+16     	; 0x11a6 <KeyPad_4x3_adjustKeyNumber+0x52>
	{
		case 10: return '*'; // ASCII Code of *
    1196:	3a e2       	ldi	r19, 0x2A	; 42
    1198:	3a 83       	std	Y+2, r19	; 0x02
    119a:	07 c0       	rjmp	.+14     	; 0x11aa <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		case 11: return 0;
    119c:	1a 82       	std	Y+2, r1	; 0x02
    119e:	05 c0       	rjmp	.+10     	; 0x11aa <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;		
		case 12: return '#'; // ASCII Code of #
    11a0:	83 e2       	ldi	r24, 0x23	; 35
    11a2:	8a 83       	std	Y+2, r24	; 0x02
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		default: return button_number;								 						
    11a6:	99 81       	ldd	r25, Y+1	; 0x01
    11a8:	9a 83       	std	Y+2, r25	; 0x02
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    11c2:	a1 e3       	ldi	r26, 0x31	; 49
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e1 e3       	ldi	r30, 0x31	; 49
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	80 67       	ori	r24, 0x70	; 112
    11ce:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
    11d0:	a1 e3       	ldi	r26, 0x31	; 49
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e1 e3       	ldi	r30, 0x31	; 49
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	8f 60       	ori	r24, 0x0F	; 15
    11dc:	8c 93       	st	X, r24
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    11de:	82 e0       	ldi	r24, 0x02	; 2
    11e0:	0e 94 fe 08 	call	0x11fc	; 0x11fc <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    11e4:	88 e2       	ldi	r24, 0x28	; 40
    11e6:	0e 94 fe 08 	call	0x11fc	; 0x11fc <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    11ea:	8c e0       	ldi	r24, 0x0C	; 12
    11ec:	0e 94 fe 08 	call	0x11fc	; 0x11fc <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	0e 94 fe 08 	call	0x11fc	; 0x11fc <LCD_sendCommand>
}
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    11fc:	0f 93       	push	r16
    11fe:	1f 93       	push	r17
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	c3 56       	subi	r28, 0x63	; 99
    120a:	d0 40       	sbci	r29, 0x00	; 0
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	fe 01       	movw	r30, r28
    1218:	ed 59       	subi	r30, 0x9D	; 157
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    121e:	a2 e3       	ldi	r26, 0x32	; 50
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e2 e3       	ldi	r30, 0x32	; 50
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	8f 7e       	andi	r24, 0xEF	; 239
    122a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    122c:	a2 e3       	ldi	r26, 0x32	; 50
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e2 e3       	ldi	r30, 0x32	; 50
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8f 7d       	andi	r24, 0xDF	; 223
    1238:	8c 93       	st	X, r24
    123a:	fe 01       	movw	r30, r28
    123c:	e1 5a       	subi	r30, 0xA1	; 161
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	a0 e8       	ldi	r26, 0x80	; 128
    1246:	bf e3       	ldi	r27, 0x3F	; 63
    1248:	80 83       	st	Z, r24
    124a:	91 83       	std	Z+1, r25	; 0x01
    124c:	a2 83       	std	Z+2, r26	; 0x02
    124e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1250:	8e 01       	movw	r16, r28
    1252:	05 5a       	subi	r16, 0xA5	; 165
    1254:	1f 4f       	sbci	r17, 0xFF	; 255
    1256:	fe 01       	movw	r30, r28
    1258:	e1 5a       	subi	r30, 0xA1	; 161
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	60 81       	ld	r22, Z
    125e:	71 81       	ldd	r23, Z+1	; 0x01
    1260:	82 81       	ldd	r24, Z+2	; 0x02
    1262:	93 81       	ldd	r25, Z+3	; 0x03
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	4a e7       	ldi	r20, 0x7A	; 122
    126a:	53 e4       	ldi	r21, 0x43	; 67
    126c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	f8 01       	movw	r30, r16
    1276:	80 83       	st	Z, r24
    1278:	91 83       	std	Z+1, r25	; 0x01
    127a:	a2 83       	std	Z+2, r26	; 0x02
    127c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    127e:	fe 01       	movw	r30, r28
    1280:	e5 5a       	subi	r30, 0xA5	; 165
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	60 81       	ld	r22, Z
    1286:	71 81       	ldd	r23, Z+1	; 0x01
    1288:	82 81       	ldd	r24, Z+2	; 0x02
    128a:	93 81       	ldd	r25, Z+3	; 0x03
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e8       	ldi	r20, 0x80	; 128
    1292:	5f e3       	ldi	r21, 0x3F	; 63
    1294:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1298:	88 23       	and	r24, r24
    129a:	44 f4       	brge	.+16     	; 0x12ac <LCD_sendCommand+0xb0>
		__ticks = 1;
    129c:	fe 01       	movw	r30, r28
    129e:	e7 5a       	subi	r30, 0xA7	; 167
    12a0:	ff 4f       	sbci	r31, 0xFF	; 255
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	91 83       	std	Z+1, r25	; 0x01
    12a8:	80 83       	st	Z, r24
    12aa:	64 c0       	rjmp	.+200    	; 0x1374 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    12ac:	fe 01       	movw	r30, r28
    12ae:	e5 5a       	subi	r30, 0xA5	; 165
    12b0:	ff 4f       	sbci	r31, 0xFF	; 255
    12b2:	60 81       	ld	r22, Z
    12b4:	71 81       	ldd	r23, Z+1	; 0x01
    12b6:	82 81       	ldd	r24, Z+2	; 0x02
    12b8:	93 81       	ldd	r25, Z+3	; 0x03
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	3f ef       	ldi	r19, 0xFF	; 255
    12be:	4f e7       	ldi	r20, 0x7F	; 127
    12c0:	57 e4       	ldi	r21, 0x47	; 71
    12c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12c6:	18 16       	cp	r1, r24
    12c8:	0c f0       	brlt	.+2      	; 0x12cc <LCD_sendCommand+0xd0>
    12ca:	43 c0       	rjmp	.+134    	; 0x1352 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12cc:	fe 01       	movw	r30, r28
    12ce:	e1 5a       	subi	r30, 0xA1	; 161
    12d0:	ff 4f       	sbci	r31, 0xFF	; 255
    12d2:	60 81       	ld	r22, Z
    12d4:	71 81       	ldd	r23, Z+1	; 0x01
    12d6:	82 81       	ldd	r24, Z+2	; 0x02
    12d8:	93 81       	ldd	r25, Z+3	; 0x03
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	40 e2       	ldi	r20, 0x20	; 32
    12e0:	51 e4       	ldi	r21, 0x41	; 65
    12e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	8e 01       	movw	r16, r28
    12ec:	07 5a       	subi	r16, 0xA7	; 167
    12ee:	1f 4f       	sbci	r17, 0xFF	; 255
    12f0:	bc 01       	movw	r22, r24
    12f2:	cd 01       	movw	r24, r26
    12f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	f8 01       	movw	r30, r16
    12fe:	91 83       	std	Z+1, r25	; 0x01
    1300:	80 83       	st	Z, r24
    1302:	1f c0       	rjmp	.+62     	; 0x1342 <LCD_sendCommand+0x146>
    1304:	fe 01       	movw	r30, r28
    1306:	e9 5a       	subi	r30, 0xA9	; 169
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	89 e1       	ldi	r24, 0x19	; 25
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	91 83       	std	Z+1, r25	; 0x01
    1310:	80 83       	st	Z, r24
    1312:	fe 01       	movw	r30, r28
    1314:	e9 5a       	subi	r30, 0xA9	; 169
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	80 81       	ld	r24, Z
    131a:	91 81       	ldd	r25, Z+1	; 0x01
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	f1 f7       	brne	.-4      	; 0x131c <LCD_sendCommand+0x120>
    1320:	fe 01       	movw	r30, r28
    1322:	e9 5a       	subi	r30, 0xA9	; 169
    1324:	ff 4f       	sbci	r31, 0xFF	; 255
    1326:	91 83       	std	Z+1, r25	; 0x01
    1328:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132a:	de 01       	movw	r26, r28
    132c:	a7 5a       	subi	r26, 0xA7	; 167
    132e:	bf 4f       	sbci	r27, 0xFF	; 255
    1330:	fe 01       	movw	r30, r28
    1332:	e7 5a       	subi	r30, 0xA7	; 167
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	80 81       	ld	r24, Z
    1338:	91 81       	ldd	r25, Z+1	; 0x01
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	11 96       	adiw	r26, 0x01	; 1
    133e:	9c 93       	st	X, r25
    1340:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1342:	fe 01       	movw	r30, r28
    1344:	e7 5a       	subi	r30, 0xA7	; 167
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	80 81       	ld	r24, Z
    134a:	91 81       	ldd	r25, Z+1	; 0x01
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	d1 f6       	brne	.-76     	; 0x1304 <LCD_sendCommand+0x108>
    1350:	27 c0       	rjmp	.+78     	; 0x13a0 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1352:	8e 01       	movw	r16, r28
    1354:	07 5a       	subi	r16, 0xA7	; 167
    1356:	1f 4f       	sbci	r17, 0xFF	; 255
    1358:	fe 01       	movw	r30, r28
    135a:	e5 5a       	subi	r30, 0xA5	; 165
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	60 81       	ld	r22, Z
    1360:	71 81       	ldd	r23, Z+1	; 0x01
    1362:	82 81       	ldd	r24, Z+2	; 0x02
    1364:	93 81       	ldd	r25, Z+3	; 0x03
    1366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	f8 01       	movw	r30, r16
    1370:	91 83       	std	Z+1, r25	; 0x01
    1372:	80 83       	st	Z, r24
    1374:	de 01       	movw	r26, r28
    1376:	ab 5a       	subi	r26, 0xAB	; 171
    1378:	bf 4f       	sbci	r27, 0xFF	; 255
    137a:	fe 01       	movw	r30, r28
    137c:	e7 5a       	subi	r30, 0xA7	; 167
    137e:	ff 4f       	sbci	r31, 0xFF	; 255
    1380:	80 81       	ld	r24, Z
    1382:	91 81       	ldd	r25, Z+1	; 0x01
    1384:	8d 93       	st	X+, r24
    1386:	9c 93       	st	X, r25
    1388:	fe 01       	movw	r30, r28
    138a:	eb 5a       	subi	r30, 0xAB	; 171
    138c:	ff 4f       	sbci	r31, 0xFF	; 255
    138e:	80 81       	ld	r24, Z
    1390:	91 81       	ldd	r25, Z+1	; 0x01
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	f1 f7       	brne	.-4      	; 0x1392 <LCD_sendCommand+0x196>
    1396:	fe 01       	movw	r30, r28
    1398:	eb 5a       	subi	r30, 0xAB	; 171
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	91 83       	std	Z+1, r25	; 0x01
    139e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    13a0:	a2 e3       	ldi	r26, 0x32	; 50
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e2 e3       	ldi	r30, 0x32	; 50
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	80 64       	ori	r24, 0x40	; 64
    13ac:	8c 93       	st	X, r24
    13ae:	fe 01       	movw	r30, r28
    13b0:	ef 5a       	subi	r30, 0xAF	; 175
    13b2:	ff 4f       	sbci	r31, 0xFF	; 255
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	a0 e8       	ldi	r26, 0x80	; 128
    13ba:	bf e3       	ldi	r27, 0x3F	; 63
    13bc:	80 83       	st	Z, r24
    13be:	91 83       	std	Z+1, r25	; 0x01
    13c0:	a2 83       	std	Z+2, r26	; 0x02
    13c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c4:	8e 01       	movw	r16, r28
    13c6:	03 5b       	subi	r16, 0xB3	; 179
    13c8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ca:	fe 01       	movw	r30, r28
    13cc:	ef 5a       	subi	r30, 0xAF	; 175
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	60 81       	ld	r22, Z
    13d2:	71 81       	ldd	r23, Z+1	; 0x01
    13d4:	82 81       	ldd	r24, Z+2	; 0x02
    13d6:	93 81       	ldd	r25, Z+3	; 0x03
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	4a e7       	ldi	r20, 0x7A	; 122
    13de:	53 e4       	ldi	r21, 0x43	; 67
    13e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e4:	dc 01       	movw	r26, r24
    13e6:	cb 01       	movw	r24, r22
    13e8:	f8 01       	movw	r30, r16
    13ea:	80 83       	st	Z, r24
    13ec:	91 83       	std	Z+1, r25	; 0x01
    13ee:	a2 83       	std	Z+2, r26	; 0x02
    13f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13f2:	fe 01       	movw	r30, r28
    13f4:	e3 5b       	subi	r30, 0xB3	; 179
    13f6:	ff 4f       	sbci	r31, 0xFF	; 255
    13f8:	60 81       	ld	r22, Z
    13fa:	71 81       	ldd	r23, Z+1	; 0x01
    13fc:	82 81       	ldd	r24, Z+2	; 0x02
    13fe:	93 81       	ldd	r25, Z+3	; 0x03
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 e8       	ldi	r20, 0x80	; 128
    1406:	5f e3       	ldi	r21, 0x3F	; 63
    1408:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    140c:	88 23       	and	r24, r24
    140e:	44 f4       	brge	.+16     	; 0x1420 <LCD_sendCommand+0x224>
		__ticks = 1;
    1410:	fe 01       	movw	r30, r28
    1412:	e5 5b       	subi	r30, 0xB5	; 181
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	91 83       	std	Z+1, r25	; 0x01
    141c:	80 83       	st	Z, r24
    141e:	64 c0       	rjmp	.+200    	; 0x14e8 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1420:	fe 01       	movw	r30, r28
    1422:	e3 5b       	subi	r30, 0xB3	; 179
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	60 81       	ld	r22, Z
    1428:	71 81       	ldd	r23, Z+1	; 0x01
    142a:	82 81       	ldd	r24, Z+2	; 0x02
    142c:	93 81       	ldd	r25, Z+3	; 0x03
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	3f ef       	ldi	r19, 0xFF	; 255
    1432:	4f e7       	ldi	r20, 0x7F	; 127
    1434:	57 e4       	ldi	r21, 0x47	; 71
    1436:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    143a:	18 16       	cp	r1, r24
    143c:	0c f0       	brlt	.+2      	; 0x1440 <LCD_sendCommand+0x244>
    143e:	43 c0       	rjmp	.+134    	; 0x14c6 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1440:	fe 01       	movw	r30, r28
    1442:	ef 5a       	subi	r30, 0xAF	; 175
    1444:	ff 4f       	sbci	r31, 0xFF	; 255
    1446:	60 81       	ld	r22, Z
    1448:	71 81       	ldd	r23, Z+1	; 0x01
    144a:	82 81       	ldd	r24, Z+2	; 0x02
    144c:	93 81       	ldd	r25, Z+3	; 0x03
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e2       	ldi	r20, 0x20	; 32
    1454:	51 e4       	ldi	r21, 0x41	; 65
    1456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	8e 01       	movw	r16, r28
    1460:	05 5b       	subi	r16, 0xB5	; 181
    1462:	1f 4f       	sbci	r17, 0xFF	; 255
    1464:	bc 01       	movw	r22, r24
    1466:	cd 01       	movw	r24, r26
    1468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	f8 01       	movw	r30, r16
    1472:	91 83       	std	Z+1, r25	; 0x01
    1474:	80 83       	st	Z, r24
    1476:	1f c0       	rjmp	.+62     	; 0x14b6 <LCD_sendCommand+0x2ba>
    1478:	fe 01       	movw	r30, r28
    147a:	e7 5b       	subi	r30, 0xB7	; 183
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	89 e1       	ldi	r24, 0x19	; 25
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	91 83       	std	Z+1, r25	; 0x01
    1484:	80 83       	st	Z, r24
    1486:	fe 01       	movw	r30, r28
    1488:	e7 5b       	subi	r30, 0xB7	; 183
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	80 81       	ld	r24, Z
    148e:	91 81       	ldd	r25, Z+1	; 0x01
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	f1 f7       	brne	.-4      	; 0x1490 <LCD_sendCommand+0x294>
    1494:	fe 01       	movw	r30, r28
    1496:	e7 5b       	subi	r30, 0xB7	; 183
    1498:	ff 4f       	sbci	r31, 0xFF	; 255
    149a:	91 83       	std	Z+1, r25	; 0x01
    149c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    149e:	de 01       	movw	r26, r28
    14a0:	a5 5b       	subi	r26, 0xB5	; 181
    14a2:	bf 4f       	sbci	r27, 0xFF	; 255
    14a4:	fe 01       	movw	r30, r28
    14a6:	e5 5b       	subi	r30, 0xB5	; 181
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	80 81       	ld	r24, Z
    14ac:	91 81       	ldd	r25, Z+1	; 0x01
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	11 96       	adiw	r26, 0x01	; 1
    14b2:	9c 93       	st	X, r25
    14b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b6:	fe 01       	movw	r30, r28
    14b8:	e5 5b       	subi	r30, 0xB5	; 181
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	80 81       	ld	r24, Z
    14be:	91 81       	ldd	r25, Z+1	; 0x01
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	d1 f6       	brne	.-76     	; 0x1478 <LCD_sendCommand+0x27c>
    14c4:	27 c0       	rjmp	.+78     	; 0x1514 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c6:	8e 01       	movw	r16, r28
    14c8:	05 5b       	subi	r16, 0xB5	; 181
    14ca:	1f 4f       	sbci	r17, 0xFF	; 255
    14cc:	fe 01       	movw	r30, r28
    14ce:	e3 5b       	subi	r30, 0xB3	; 179
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	60 81       	ld	r22, Z
    14d4:	71 81       	ldd	r23, Z+1	; 0x01
    14d6:	82 81       	ldd	r24, Z+2	; 0x02
    14d8:	93 81       	ldd	r25, Z+3	; 0x03
    14da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	f8 01       	movw	r30, r16
    14e4:	91 83       	std	Z+1, r25	; 0x01
    14e6:	80 83       	st	Z, r24
    14e8:	de 01       	movw	r26, r28
    14ea:	a9 5b       	subi	r26, 0xB9	; 185
    14ec:	bf 4f       	sbci	r27, 0xFF	; 255
    14ee:	fe 01       	movw	r30, r28
    14f0:	e5 5b       	subi	r30, 0xB5	; 181
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	80 81       	ld	r24, Z
    14f6:	91 81       	ldd	r25, Z+1	; 0x01
    14f8:	8d 93       	st	X+, r24
    14fa:	9c 93       	st	X, r25
    14fc:	fe 01       	movw	r30, r28
    14fe:	e9 5b       	subi	r30, 0xB9	; 185
    1500:	ff 4f       	sbci	r31, 0xFF	; 255
    1502:	80 81       	ld	r24, Z
    1504:	91 81       	ldd	r25, Z+1	; 0x01
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	f1 f7       	brne	.-4      	; 0x1506 <LCD_sendCommand+0x30a>
    150a:	fe 01       	movw	r30, r28
    150c:	e9 5b       	subi	r30, 0xB9	; 185
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	91 83       	std	Z+1, r25	; 0x01
    1512:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
    1514:	a2 e3       	ldi	r26, 0x32	; 50
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e2 e3       	ldi	r30, 0x32	; 50
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	98 2f       	mov	r25, r24
    1520:	90 7f       	andi	r25, 0xF0	; 240
    1522:	fe 01       	movw	r30, r28
    1524:	ed 59       	subi	r30, 0x9D	; 157
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	80 81       	ld	r24, Z
    152a:	82 95       	swap	r24
    152c:	8f 70       	andi	r24, 0x0F	; 15
    152e:	89 2b       	or	r24, r25
    1530:	8c 93       	st	X, r24
    1532:	fe 01       	movw	r30, r28
    1534:	ed 5b       	subi	r30, 0xBD	; 189
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	a0 e8       	ldi	r26, 0x80	; 128
    153e:	bf e3       	ldi	r27, 0x3F	; 63
    1540:	80 83       	st	Z, r24
    1542:	91 83       	std	Z+1, r25	; 0x01
    1544:	a2 83       	std	Z+2, r26	; 0x02
    1546:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1548:	8e 01       	movw	r16, r28
    154a:	01 5c       	subi	r16, 0xC1	; 193
    154c:	1f 4f       	sbci	r17, 0xFF	; 255
    154e:	fe 01       	movw	r30, r28
    1550:	ed 5b       	subi	r30, 0xBD	; 189
    1552:	ff 4f       	sbci	r31, 0xFF	; 255
    1554:	60 81       	ld	r22, Z
    1556:	71 81       	ldd	r23, Z+1	; 0x01
    1558:	82 81       	ldd	r24, Z+2	; 0x02
    155a:	93 81       	ldd	r25, Z+3	; 0x03
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	4a e7       	ldi	r20, 0x7A	; 122
    1562:	53 e4       	ldi	r21, 0x43	; 67
    1564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	f8 01       	movw	r30, r16
    156e:	80 83       	st	Z, r24
    1570:	91 83       	std	Z+1, r25	; 0x01
    1572:	a2 83       	std	Z+2, r26	; 0x02
    1574:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1576:	fe 01       	movw	r30, r28
    1578:	ff 96       	adiw	r30, 0x3f	; 63
    157a:	60 81       	ld	r22, Z
    157c:	71 81       	ldd	r23, Z+1	; 0x01
    157e:	82 81       	ldd	r24, Z+2	; 0x02
    1580:	93 81       	ldd	r25, Z+3	; 0x03
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e8       	ldi	r20, 0x80	; 128
    1588:	5f e3       	ldi	r21, 0x3F	; 63
    158a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    158e:	88 23       	and	r24, r24
    1590:	2c f4       	brge	.+10     	; 0x159c <LCD_sendCommand+0x3a0>
		__ticks = 1;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	9e af       	std	Y+62, r25	; 0x3e
    1598:	8d af       	std	Y+61, r24	; 0x3d
    159a:	46 c0       	rjmp	.+140    	; 0x1628 <LCD_sendCommand+0x42c>
	else if (__tmp > 65535)
    159c:	fe 01       	movw	r30, r28
    159e:	ff 96       	adiw	r30, 0x3f	; 63
    15a0:	60 81       	ld	r22, Z
    15a2:	71 81       	ldd	r23, Z+1	; 0x01
    15a4:	82 81       	ldd	r24, Z+2	; 0x02
    15a6:	93 81       	ldd	r25, Z+3	; 0x03
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	3f ef       	ldi	r19, 0xFF	; 255
    15ac:	4f e7       	ldi	r20, 0x7F	; 127
    15ae:	57 e4       	ldi	r21, 0x47	; 71
    15b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15b4:	18 16       	cp	r1, r24
    15b6:	64 f5       	brge	.+88     	; 0x1610 <LCD_sendCommand+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b8:	fe 01       	movw	r30, r28
    15ba:	ed 5b       	subi	r30, 0xBD	; 189
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	60 81       	ld	r22, Z
    15c0:	71 81       	ldd	r23, Z+1	; 0x01
    15c2:	82 81       	ldd	r24, Z+2	; 0x02
    15c4:	93 81       	ldd	r25, Z+3	; 0x03
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e2       	ldi	r20, 0x20	; 32
    15cc:	51 e4       	ldi	r21, 0x41	; 65
    15ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	bc 01       	movw	r22, r24
    15d8:	cd 01       	movw	r24, r26
    15da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	9e af       	std	Y+62, r25	; 0x3e
    15e4:	8d af       	std	Y+61, r24	; 0x3d
    15e6:	0f c0       	rjmp	.+30     	; 0x1606 <LCD_sendCommand+0x40a>
    15e8:	89 e1       	ldi	r24, 0x19	; 25
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	9c af       	std	Y+60, r25	; 0x3c
    15ee:	8b af       	std	Y+59, r24	; 0x3b
    15f0:	8b ad       	ldd	r24, Y+59	; 0x3b
    15f2:	9c ad       	ldd	r25, Y+60	; 0x3c
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <LCD_sendCommand+0x3f8>
    15f8:	9c af       	std	Y+60, r25	; 0x3c
    15fa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    15fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	9e af       	std	Y+62, r25	; 0x3e
    1604:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1606:	8d ad       	ldd	r24, Y+61	; 0x3d
    1608:	9e ad       	ldd	r25, Y+62	; 0x3e
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	69 f7       	brne	.-38     	; 0x15e8 <LCD_sendCommand+0x3ec>
    160e:	16 c0       	rjmp	.+44     	; 0x163c <LCD_sendCommand+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1610:	fe 01       	movw	r30, r28
    1612:	ff 96       	adiw	r30, 0x3f	; 63
    1614:	60 81       	ld	r22, Z
    1616:	71 81       	ldd	r23, Z+1	; 0x01
    1618:	82 81       	ldd	r24, Z+2	; 0x02
    161a:	93 81       	ldd	r25, Z+3	; 0x03
    161c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	9e af       	std	Y+62, r25	; 0x3e
    1626:	8d af       	std	Y+61, r24	; 0x3d
    1628:	8d ad       	ldd	r24, Y+61	; 0x3d
    162a:	9e ad       	ldd	r25, Y+62	; 0x3e
    162c:	9a af       	std	Y+58, r25	; 0x3a
    162e:	89 af       	std	Y+57, r24	; 0x39
    1630:	89 ad       	ldd	r24, Y+57	; 0x39
    1632:	9a ad       	ldd	r25, Y+58	; 0x3a
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	f1 f7       	brne	.-4      	; 0x1634 <LCD_sendCommand+0x438>
    1638:	9a af       	std	Y+58, r25	; 0x3a
    163a:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    163c:	a2 e3       	ldi	r26, 0x32	; 50
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e2 e3       	ldi	r30, 0x32	; 50
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	8f 7b       	andi	r24, 0xBF	; 191
    1648:	8c 93       	st	X, r24
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	a0 e8       	ldi	r26, 0x80	; 128
    1650:	bf e3       	ldi	r27, 0x3F	; 63
    1652:	8d ab       	std	Y+53, r24	; 0x35
    1654:	9e ab       	std	Y+54, r25	; 0x36
    1656:	af ab       	std	Y+55, r26	; 0x37
    1658:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    165a:	6d a9       	ldd	r22, Y+53	; 0x35
    165c:	7e a9       	ldd	r23, Y+54	; 0x36
    165e:	8f a9       	ldd	r24, Y+55	; 0x37
    1660:	98 ad       	ldd	r25, Y+56	; 0x38
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	4a e7       	ldi	r20, 0x7A	; 122
    1668:	53 e4       	ldi	r21, 0x43	; 67
    166a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	89 ab       	std	Y+49, r24	; 0x31
    1674:	9a ab       	std	Y+50, r25	; 0x32
    1676:	ab ab       	std	Y+51, r26	; 0x33
    1678:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    167a:	69 a9       	ldd	r22, Y+49	; 0x31
    167c:	7a a9       	ldd	r23, Y+50	; 0x32
    167e:	8b a9       	ldd	r24, Y+51	; 0x33
    1680:	9c a9       	ldd	r25, Y+52	; 0x34
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e8       	ldi	r20, 0x80	; 128
    1688:	5f e3       	ldi	r21, 0x3F	; 63
    168a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    168e:	88 23       	and	r24, r24
    1690:	2c f4       	brge	.+10     	; 0x169c <LCD_sendCommand+0x4a0>
		__ticks = 1;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	98 ab       	std	Y+48, r25	; 0x30
    1698:	8f a7       	std	Y+47, r24	; 0x2f
    169a:	3f c0       	rjmp	.+126    	; 0x171a <LCD_sendCommand+0x51e>
	else if (__tmp > 65535)
    169c:	69 a9       	ldd	r22, Y+49	; 0x31
    169e:	7a a9       	ldd	r23, Y+50	; 0x32
    16a0:	8b a9       	ldd	r24, Y+51	; 0x33
    16a2:	9c a9       	ldd	r25, Y+52	; 0x34
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	3f ef       	ldi	r19, 0xFF	; 255
    16a8:	4f e7       	ldi	r20, 0x7F	; 127
    16aa:	57 e4       	ldi	r21, 0x47	; 71
    16ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16b0:	18 16       	cp	r1, r24
    16b2:	4c f5       	brge	.+82     	; 0x1706 <LCD_sendCommand+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b4:	6d a9       	ldd	r22, Y+53	; 0x35
    16b6:	7e a9       	ldd	r23, Y+54	; 0x36
    16b8:	8f a9       	ldd	r24, Y+55	; 0x37
    16ba:	98 ad       	ldd	r25, Y+56	; 0x38
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e2       	ldi	r20, 0x20	; 32
    16c2:	51 e4       	ldi	r21, 0x41	; 65
    16c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	bc 01       	movw	r22, r24
    16ce:	cd 01       	movw	r24, r26
    16d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	98 ab       	std	Y+48, r25	; 0x30
    16da:	8f a7       	std	Y+47, r24	; 0x2f
    16dc:	0f c0       	rjmp	.+30     	; 0x16fc <LCD_sendCommand+0x500>
    16de:	89 e1       	ldi	r24, 0x19	; 25
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	9e a7       	std	Y+46, r25	; 0x2e
    16e4:	8d a7       	std	Y+45, r24	; 0x2d
    16e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    16e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	f1 f7       	brne	.-4      	; 0x16ea <LCD_sendCommand+0x4ee>
    16ee:	9e a7       	std	Y+46, r25	; 0x2e
    16f0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    16f4:	98 a9       	ldd	r25, Y+48	; 0x30
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	98 ab       	std	Y+48, r25	; 0x30
    16fa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    16fe:	98 a9       	ldd	r25, Y+48	; 0x30
    1700:	00 97       	sbiw	r24, 0x00	; 0
    1702:	69 f7       	brne	.-38     	; 0x16de <LCD_sendCommand+0x4e2>
    1704:	14 c0       	rjmp	.+40     	; 0x172e <LCD_sendCommand+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1706:	69 a9       	ldd	r22, Y+49	; 0x31
    1708:	7a a9       	ldd	r23, Y+50	; 0x32
    170a:	8b a9       	ldd	r24, Y+51	; 0x33
    170c:	9c a9       	ldd	r25, Y+52	; 0x34
    170e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	98 ab       	std	Y+48, r25	; 0x30
    1718:	8f a7       	std	Y+47, r24	; 0x2f
    171a:	8f a5       	ldd	r24, Y+47	; 0x2f
    171c:	98 a9       	ldd	r25, Y+48	; 0x30
    171e:	9c a7       	std	Y+44, r25	; 0x2c
    1720:	8b a7       	std	Y+43, r24	; 0x2b
    1722:	8b a5       	ldd	r24, Y+43	; 0x2b
    1724:	9c a5       	ldd	r25, Y+44	; 0x2c
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <LCD_sendCommand+0x52a>
    172a:	9c a7       	std	Y+44, r25	; 0x2c
    172c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    172e:	a2 e3       	ldi	r26, 0x32	; 50
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e2 e3       	ldi	r30, 0x32	; 50
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	80 64       	ori	r24, 0x40	; 64
    173a:	8c 93       	st	X, r24
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	a0 e8       	ldi	r26, 0x80	; 128
    1742:	bf e3       	ldi	r27, 0x3F	; 63
    1744:	8f a3       	std	Y+39, r24	; 0x27
    1746:	98 a7       	std	Y+40, r25	; 0x28
    1748:	a9 a7       	std	Y+41, r26	; 0x29
    174a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174c:	6f a1       	ldd	r22, Y+39	; 0x27
    174e:	78 a5       	ldd	r23, Y+40	; 0x28
    1750:	89 a5       	ldd	r24, Y+41	; 0x29
    1752:	9a a5       	ldd	r25, Y+42	; 0x2a
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	4a e7       	ldi	r20, 0x7A	; 122
    175a:	53 e4       	ldi	r21, 0x43	; 67
    175c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	8b a3       	std	Y+35, r24	; 0x23
    1766:	9c a3       	std	Y+36, r25	; 0x24
    1768:	ad a3       	std	Y+37, r26	; 0x25
    176a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    176c:	6b a1       	ldd	r22, Y+35	; 0x23
    176e:	7c a1       	ldd	r23, Y+36	; 0x24
    1770:	8d a1       	ldd	r24, Y+37	; 0x25
    1772:	9e a1       	ldd	r25, Y+38	; 0x26
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e8       	ldi	r20, 0x80	; 128
    177a:	5f e3       	ldi	r21, 0x3F	; 63
    177c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1780:	88 23       	and	r24, r24
    1782:	2c f4       	brge	.+10     	; 0x178e <LCD_sendCommand+0x592>
		__ticks = 1;
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9a a3       	std	Y+34, r25	; 0x22
    178a:	89 a3       	std	Y+33, r24	; 0x21
    178c:	3f c0       	rjmp	.+126    	; 0x180c <LCD_sendCommand+0x610>
	else if (__tmp > 65535)
    178e:	6b a1       	ldd	r22, Y+35	; 0x23
    1790:	7c a1       	ldd	r23, Y+36	; 0x24
    1792:	8d a1       	ldd	r24, Y+37	; 0x25
    1794:	9e a1       	ldd	r25, Y+38	; 0x26
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	3f ef       	ldi	r19, 0xFF	; 255
    179a:	4f e7       	ldi	r20, 0x7F	; 127
    179c:	57 e4       	ldi	r21, 0x47	; 71
    179e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a2:	18 16       	cp	r1, r24
    17a4:	4c f5       	brge	.+82     	; 0x17f8 <LCD_sendCommand+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a6:	6f a1       	ldd	r22, Y+39	; 0x27
    17a8:	78 a5       	ldd	r23, Y+40	; 0x28
    17aa:	89 a5       	ldd	r24, Y+41	; 0x29
    17ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e2       	ldi	r20, 0x20	; 32
    17b4:	51 e4       	ldi	r21, 0x41	; 65
    17b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	bc 01       	movw	r22, r24
    17c0:	cd 01       	movw	r24, r26
    17c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	9a a3       	std	Y+34, r25	; 0x22
    17cc:	89 a3       	std	Y+33, r24	; 0x21
    17ce:	0f c0       	rjmp	.+30     	; 0x17ee <LCD_sendCommand+0x5f2>
    17d0:	89 e1       	ldi	r24, 0x19	; 25
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	98 a3       	std	Y+32, r25	; 0x20
    17d6:	8f 8f       	std	Y+31, r24	; 0x1f
    17d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17da:	98 a1       	ldd	r25, Y+32	; 0x20
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	f1 f7       	brne	.-4      	; 0x17dc <LCD_sendCommand+0x5e0>
    17e0:	98 a3       	std	Y+32, r25	; 0x20
    17e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e4:	89 a1       	ldd	r24, Y+33	; 0x21
    17e6:	9a a1       	ldd	r25, Y+34	; 0x22
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	9a a3       	std	Y+34, r25	; 0x22
    17ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ee:	89 a1       	ldd	r24, Y+33	; 0x21
    17f0:	9a a1       	ldd	r25, Y+34	; 0x22
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	69 f7       	brne	.-38     	; 0x17d0 <LCD_sendCommand+0x5d4>
    17f6:	14 c0       	rjmp	.+40     	; 0x1820 <LCD_sendCommand+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f8:	6b a1       	ldd	r22, Y+35	; 0x23
    17fa:	7c a1       	ldd	r23, Y+36	; 0x24
    17fc:	8d a1       	ldd	r24, Y+37	; 0x25
    17fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	9a a3       	std	Y+34, r25	; 0x22
    180a:	89 a3       	std	Y+33, r24	; 0x21
    180c:	89 a1       	ldd	r24, Y+33	; 0x21
    180e:	9a a1       	ldd	r25, Y+34	; 0x22
    1810:	9e 8f       	std	Y+30, r25	; 0x1e
    1812:	8d 8f       	std	Y+29, r24	; 0x1d
    1814:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1816:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <LCD_sendCommand+0x61c>
    181c:	9e 8f       	std	Y+30, r25	; 0x1e
    181e:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
    1820:	a2 e3       	ldi	r26, 0x32	; 50
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e2 e3       	ldi	r30, 0x32	; 50
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	98 2f       	mov	r25, r24
    182c:	90 7f       	andi	r25, 0xF0	; 240
    182e:	fe 01       	movw	r30, r28
    1830:	ed 59       	subi	r30, 0x9D	; 157
    1832:	ff 4f       	sbci	r31, 0xFF	; 255
    1834:	80 81       	ld	r24, Z
    1836:	8f 70       	andi	r24, 0x0F	; 15
    1838:	89 2b       	or	r24, r25
    183a:	8c 93       	st	X, r24
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	a0 e8       	ldi	r26, 0x80	; 128
    1842:	bf e3       	ldi	r27, 0x3F	; 63
    1844:	89 8f       	std	Y+25, r24	; 0x19
    1846:	9a 8f       	std	Y+26, r25	; 0x1a
    1848:	ab 8f       	std	Y+27, r26	; 0x1b
    184a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    184c:	69 8d       	ldd	r22, Y+25	; 0x19
    184e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1850:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1852:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	4a e7       	ldi	r20, 0x7A	; 122
    185a:	53 e4       	ldi	r21, 0x43	; 67
    185c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	8d 8b       	std	Y+21, r24	; 0x15
    1866:	9e 8b       	std	Y+22, r25	; 0x16
    1868:	af 8b       	std	Y+23, r26	; 0x17
    186a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    186c:	6d 89       	ldd	r22, Y+21	; 0x15
    186e:	7e 89       	ldd	r23, Y+22	; 0x16
    1870:	8f 89       	ldd	r24, Y+23	; 0x17
    1872:	98 8d       	ldd	r25, Y+24	; 0x18
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e8       	ldi	r20, 0x80	; 128
    187a:	5f e3       	ldi	r21, 0x3F	; 63
    187c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1880:	88 23       	and	r24, r24
    1882:	2c f4       	brge	.+10     	; 0x188e <LCD_sendCommand+0x692>
		__ticks = 1;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	9c 8b       	std	Y+20, r25	; 0x14
    188a:	8b 8b       	std	Y+19, r24	; 0x13
    188c:	3f c0       	rjmp	.+126    	; 0x190c <LCD_sendCommand+0x710>
	else if (__tmp > 65535)
    188e:	6d 89       	ldd	r22, Y+21	; 0x15
    1890:	7e 89       	ldd	r23, Y+22	; 0x16
    1892:	8f 89       	ldd	r24, Y+23	; 0x17
    1894:	98 8d       	ldd	r25, Y+24	; 0x18
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	3f ef       	ldi	r19, 0xFF	; 255
    189a:	4f e7       	ldi	r20, 0x7F	; 127
    189c:	57 e4       	ldi	r21, 0x47	; 71
    189e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18a2:	18 16       	cp	r1, r24
    18a4:	4c f5       	brge	.+82     	; 0x18f8 <LCD_sendCommand+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a6:	69 8d       	ldd	r22, Y+25	; 0x19
    18a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 e2       	ldi	r20, 0x20	; 32
    18b4:	51 e4       	ldi	r21, 0x41	; 65
    18b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	bc 01       	movw	r22, r24
    18c0:	cd 01       	movw	r24, r26
    18c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	9c 8b       	std	Y+20, r25	; 0x14
    18cc:	8b 8b       	std	Y+19, r24	; 0x13
    18ce:	0f c0       	rjmp	.+30     	; 0x18ee <LCD_sendCommand+0x6f2>
    18d0:	89 e1       	ldi	r24, 0x19	; 25
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	9a 8b       	std	Y+18, r25	; 0x12
    18d6:	89 8b       	std	Y+17, r24	; 0x11
    18d8:	89 89       	ldd	r24, Y+17	; 0x11
    18da:	9a 89       	ldd	r25, Y+18	; 0x12
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	f1 f7       	brne	.-4      	; 0x18dc <LCD_sendCommand+0x6e0>
    18e0:	9a 8b       	std	Y+18, r25	; 0x12
    18e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e4:	8b 89       	ldd	r24, Y+19	; 0x13
    18e6:	9c 89       	ldd	r25, Y+20	; 0x14
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	9c 8b       	std	Y+20, r25	; 0x14
    18ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ee:	8b 89       	ldd	r24, Y+19	; 0x13
    18f0:	9c 89       	ldd	r25, Y+20	; 0x14
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	69 f7       	brne	.-38     	; 0x18d0 <LCD_sendCommand+0x6d4>
    18f6:	14 c0       	rjmp	.+40     	; 0x1920 <LCD_sendCommand+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f8:	6d 89       	ldd	r22, Y+21	; 0x15
    18fa:	7e 89       	ldd	r23, Y+22	; 0x16
    18fc:	8f 89       	ldd	r24, Y+23	; 0x17
    18fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	9c 8b       	std	Y+20, r25	; 0x14
    190a:	8b 8b       	std	Y+19, r24	; 0x13
    190c:	8b 89       	ldd	r24, Y+19	; 0x13
    190e:	9c 89       	ldd	r25, Y+20	; 0x14
    1910:	98 8b       	std	Y+16, r25	; 0x10
    1912:	8f 87       	std	Y+15, r24	; 0x0f
    1914:	8f 85       	ldd	r24, Y+15	; 0x0f
    1916:	98 89       	ldd	r25, Y+16	; 0x10
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	f1 f7       	brne	.-4      	; 0x1918 <LCD_sendCommand+0x71c>
    191c:	98 8b       	std	Y+16, r25	; 0x10
    191e:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1920:	a2 e3       	ldi	r26, 0x32	; 50
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e2 e3       	ldi	r30, 0x32	; 50
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	8f 7b       	andi	r24, 0xBF	; 191
    192c:	8c 93       	st	X, r24
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	a0 e8       	ldi	r26, 0x80	; 128
    1934:	bf e3       	ldi	r27, 0x3F	; 63
    1936:	8b 87       	std	Y+11, r24	; 0x0b
    1938:	9c 87       	std	Y+12, r25	; 0x0c
    193a:	ad 87       	std	Y+13, r26	; 0x0d
    193c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    193e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1940:	7c 85       	ldd	r23, Y+12	; 0x0c
    1942:	8d 85       	ldd	r24, Y+13	; 0x0d
    1944:	9e 85       	ldd	r25, Y+14	; 0x0e
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	4a e7       	ldi	r20, 0x7A	; 122
    194c:	53 e4       	ldi	r21, 0x43	; 67
    194e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	8f 83       	std	Y+7, r24	; 0x07
    1958:	98 87       	std	Y+8, r25	; 0x08
    195a:	a9 87       	std	Y+9, r26	; 0x09
    195c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    195e:	6f 81       	ldd	r22, Y+7	; 0x07
    1960:	78 85       	ldd	r23, Y+8	; 0x08
    1962:	89 85       	ldd	r24, Y+9	; 0x09
    1964:	9a 85       	ldd	r25, Y+10	; 0x0a
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e8       	ldi	r20, 0x80	; 128
    196c:	5f e3       	ldi	r21, 0x3F	; 63
    196e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1972:	88 23       	and	r24, r24
    1974:	2c f4       	brge	.+10     	; 0x1980 <LCD_sendCommand+0x784>
		__ticks = 1;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	9e 83       	std	Y+6, r25	; 0x06
    197c:	8d 83       	std	Y+5, r24	; 0x05
    197e:	3f c0       	rjmp	.+126    	; 0x19fe <LCD_sendCommand+0x802>
	else if (__tmp > 65535)
    1980:	6f 81       	ldd	r22, Y+7	; 0x07
    1982:	78 85       	ldd	r23, Y+8	; 0x08
    1984:	89 85       	ldd	r24, Y+9	; 0x09
    1986:	9a 85       	ldd	r25, Y+10	; 0x0a
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	3f ef       	ldi	r19, 0xFF	; 255
    198c:	4f e7       	ldi	r20, 0x7F	; 127
    198e:	57 e4       	ldi	r21, 0x47	; 71
    1990:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1994:	18 16       	cp	r1, r24
    1996:	4c f5       	brge	.+82     	; 0x19ea <LCD_sendCommand+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1998:	6b 85       	ldd	r22, Y+11	; 0x0b
    199a:	7c 85       	ldd	r23, Y+12	; 0x0c
    199c:	8d 85       	ldd	r24, Y+13	; 0x0d
    199e:	9e 85       	ldd	r25, Y+14	; 0x0e
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e2       	ldi	r20, 0x20	; 32
    19a6:	51 e4       	ldi	r21, 0x41	; 65
    19a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	bc 01       	movw	r22, r24
    19b2:	cd 01       	movw	r24, r26
    19b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	9e 83       	std	Y+6, r25	; 0x06
    19be:	8d 83       	std	Y+5, r24	; 0x05
    19c0:	0f c0       	rjmp	.+30     	; 0x19e0 <LCD_sendCommand+0x7e4>
    19c2:	89 e1       	ldi	r24, 0x19	; 25
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	9c 83       	std	Y+4, r25	; 0x04
    19c8:	8b 83       	std	Y+3, r24	; 0x03
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	9c 81       	ldd	r25, Y+4	; 0x04
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	f1 f7       	brne	.-4      	; 0x19ce <LCD_sendCommand+0x7d2>
    19d2:	9c 83       	std	Y+4, r25	; 0x04
    19d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d6:	8d 81       	ldd	r24, Y+5	; 0x05
    19d8:	9e 81       	ldd	r25, Y+6	; 0x06
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	9e 83       	std	Y+6, r25	; 0x06
    19de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e0:	8d 81       	ldd	r24, Y+5	; 0x05
    19e2:	9e 81       	ldd	r25, Y+6	; 0x06
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	69 f7       	brne	.-38     	; 0x19c2 <LCD_sendCommand+0x7c6>
    19e8:	14 c0       	rjmp	.+40     	; 0x1a12 <LCD_sendCommand+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ea:	6f 81       	ldd	r22, Y+7	; 0x07
    19ec:	78 85       	ldd	r23, Y+8	; 0x08
    19ee:	89 85       	ldd	r24, Y+9	; 0x09
    19f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	9e 83       	std	Y+6, r25	; 0x06
    19fc:	8d 83       	std	Y+5, r24	; 0x05
    19fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1a00:	9e 81       	ldd	r25, Y+6	; 0x06
    1a02:	9a 83       	std	Y+2, r25	; 0x02
    1a04:	89 83       	std	Y+1, r24	; 0x01
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	f1 f7       	brne	.-4      	; 0x1a0a <LCD_sendCommand+0x80e>
    1a0e:	9a 83       	std	Y+2, r25	; 0x02
    1a10:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1a12:	cd 59       	subi	r28, 0x9D	; 157
    1a14:	df 4f       	sbci	r29, 0xFF	; 255
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	1f 91       	pop	r17
    1a26:	0f 91       	pop	r16
    1a28:	08 95       	ret

00001a2a <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	c3 56       	subi	r28, 0x63	; 99
    1a38:	d0 40       	sbci	r29, 0x00	; 0
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	fe 01       	movw	r30, r28
    1a46:	ed 59       	subi	r30, 0x9D	; 157
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1a4c:	a2 e3       	ldi	r26, 0x32	; 50
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	e2 e3       	ldi	r30, 0x32	; 50
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	80 61       	ori	r24, 0x10	; 16
    1a58:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1a5a:	a2 e3       	ldi	r26, 0x32	; 50
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e2 e3       	ldi	r30, 0x32	; 50
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	8f 7d       	andi	r24, 0xDF	; 223
    1a66:	8c 93       	st	X, r24
    1a68:	fe 01       	movw	r30, r28
    1a6a:	e1 5a       	subi	r30, 0xA1	; 161
    1a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	a0 e8       	ldi	r26, 0x80	; 128
    1a74:	bf e3       	ldi	r27, 0x3F	; 63
    1a76:	80 83       	st	Z, r24
    1a78:	91 83       	std	Z+1, r25	; 0x01
    1a7a:	a2 83       	std	Z+2, r26	; 0x02
    1a7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7e:	8e 01       	movw	r16, r28
    1a80:	05 5a       	subi	r16, 0xA5	; 165
    1a82:	1f 4f       	sbci	r17, 0xFF	; 255
    1a84:	fe 01       	movw	r30, r28
    1a86:	e1 5a       	subi	r30, 0xA1	; 161
    1a88:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8a:	60 81       	ld	r22, Z
    1a8c:	71 81       	ldd	r23, Z+1	; 0x01
    1a8e:	82 81       	ldd	r24, Z+2	; 0x02
    1a90:	93 81       	ldd	r25, Z+3	; 0x03
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	4a e7       	ldi	r20, 0x7A	; 122
    1a98:	53 e4       	ldi	r21, 0x43	; 67
    1a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	f8 01       	movw	r30, r16
    1aa4:	80 83       	st	Z, r24
    1aa6:	91 83       	std	Z+1, r25	; 0x01
    1aa8:	a2 83       	std	Z+2, r26	; 0x02
    1aaa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aac:	fe 01       	movw	r30, r28
    1aae:	e5 5a       	subi	r30, 0xA5	; 165
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	60 81       	ld	r22, Z
    1ab4:	71 81       	ldd	r23, Z+1	; 0x01
    1ab6:	82 81       	ldd	r24, Z+2	; 0x02
    1ab8:	93 81       	ldd	r25, Z+3	; 0x03
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	40 e8       	ldi	r20, 0x80	; 128
    1ac0:	5f e3       	ldi	r21, 0x3F	; 63
    1ac2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ac6:	88 23       	and	r24, r24
    1ac8:	44 f4       	brge	.+16     	; 0x1ada <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1aca:	fe 01       	movw	r30, r28
    1acc:	e7 5a       	subi	r30, 0xA7	; 167
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	91 83       	std	Z+1, r25	; 0x01
    1ad6:	80 83       	st	Z, r24
    1ad8:	64 c0       	rjmp	.+200    	; 0x1ba2 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1ada:	fe 01       	movw	r30, r28
    1adc:	e5 5a       	subi	r30, 0xA5	; 165
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	60 81       	ld	r22, Z
    1ae2:	71 81       	ldd	r23, Z+1	; 0x01
    1ae4:	82 81       	ldd	r24, Z+2	; 0x02
    1ae6:	93 81       	ldd	r25, Z+3	; 0x03
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	3f ef       	ldi	r19, 0xFF	; 255
    1aec:	4f e7       	ldi	r20, 0x7F	; 127
    1aee:	57 e4       	ldi	r21, 0x47	; 71
    1af0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1af4:	18 16       	cp	r1, r24
    1af6:	0c f0       	brlt	.+2      	; 0x1afa <LCD_displayCharacter+0xd0>
    1af8:	43 c0       	rjmp	.+134    	; 0x1b80 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afa:	fe 01       	movw	r30, r28
    1afc:	e1 5a       	subi	r30, 0xA1	; 161
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	60 81       	ld	r22, Z
    1b02:	71 81       	ldd	r23, Z+1	; 0x01
    1b04:	82 81       	ldd	r24, Z+2	; 0x02
    1b06:	93 81       	ldd	r25, Z+3	; 0x03
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e2       	ldi	r20, 0x20	; 32
    1b0e:	51 e4       	ldi	r21, 0x41	; 65
    1b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	8e 01       	movw	r16, r28
    1b1a:	07 5a       	subi	r16, 0xA7	; 167
    1b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1e:	bc 01       	movw	r22, r24
    1b20:	cd 01       	movw	r24, r26
    1b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	f8 01       	movw	r30, r16
    1b2c:	91 83       	std	Z+1, r25	; 0x01
    1b2e:	80 83       	st	Z, r24
    1b30:	1f c0       	rjmp	.+62     	; 0x1b70 <LCD_displayCharacter+0x146>
    1b32:	fe 01       	movw	r30, r28
    1b34:	e9 5a       	subi	r30, 0xA9	; 169
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	89 e1       	ldi	r24, 0x19	; 25
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	91 83       	std	Z+1, r25	; 0x01
    1b3e:	80 83       	st	Z, r24
    1b40:	fe 01       	movw	r30, r28
    1b42:	e9 5a       	subi	r30, 0xA9	; 169
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	80 81       	ld	r24, Z
    1b48:	91 81       	ldd	r25, Z+1	; 0x01
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <LCD_displayCharacter+0x120>
    1b4e:	fe 01       	movw	r30, r28
    1b50:	e9 5a       	subi	r30, 0xA9	; 169
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	91 83       	std	Z+1, r25	; 0x01
    1b56:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b58:	de 01       	movw	r26, r28
    1b5a:	a7 5a       	subi	r26, 0xA7	; 167
    1b5c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b5e:	fe 01       	movw	r30, r28
    1b60:	e7 5a       	subi	r30, 0xA7	; 167
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	80 81       	ld	r24, Z
    1b66:	91 81       	ldd	r25, Z+1	; 0x01
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	11 96       	adiw	r26, 0x01	; 1
    1b6c:	9c 93       	st	X, r25
    1b6e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b70:	fe 01       	movw	r30, r28
    1b72:	e7 5a       	subi	r30, 0xA7	; 167
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	80 81       	ld	r24, Z
    1b78:	91 81       	ldd	r25, Z+1	; 0x01
    1b7a:	00 97       	sbiw	r24, 0x00	; 0
    1b7c:	d1 f6       	brne	.-76     	; 0x1b32 <LCD_displayCharacter+0x108>
    1b7e:	27 c0       	rjmp	.+78     	; 0x1bce <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b80:	8e 01       	movw	r16, r28
    1b82:	07 5a       	subi	r16, 0xA7	; 167
    1b84:	1f 4f       	sbci	r17, 0xFF	; 255
    1b86:	fe 01       	movw	r30, r28
    1b88:	e5 5a       	subi	r30, 0xA5	; 165
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	60 81       	ld	r22, Z
    1b8e:	71 81       	ldd	r23, Z+1	; 0x01
    1b90:	82 81       	ldd	r24, Z+2	; 0x02
    1b92:	93 81       	ldd	r25, Z+3	; 0x03
    1b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	f8 01       	movw	r30, r16
    1b9e:	91 83       	std	Z+1, r25	; 0x01
    1ba0:	80 83       	st	Z, r24
    1ba2:	de 01       	movw	r26, r28
    1ba4:	ab 5a       	subi	r26, 0xAB	; 171
    1ba6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba8:	fe 01       	movw	r30, r28
    1baa:	e7 5a       	subi	r30, 0xA7	; 167
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	80 81       	ld	r24, Z
    1bb0:	91 81       	ldd	r25, Z+1	; 0x01
    1bb2:	8d 93       	st	X+, r24
    1bb4:	9c 93       	st	X, r25
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	eb 5a       	subi	r30, 0xAB	; 171
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	80 81       	ld	r24, Z
    1bbe:	91 81       	ldd	r25, Z+1	; 0x01
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <LCD_displayCharacter+0x196>
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	eb 5a       	subi	r30, 0xAB	; 171
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	91 83       	std	Z+1, r25	; 0x01
    1bcc:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1bce:	a2 e3       	ldi	r26, 0x32	; 50
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	e2 e3       	ldi	r30, 0x32	; 50
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	80 64       	ori	r24, 0x40	; 64
    1bda:	8c 93       	st	X, r24
    1bdc:	fe 01       	movw	r30, r28
    1bde:	ef 5a       	subi	r30, 0xAF	; 175
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	a0 e8       	ldi	r26, 0x80	; 128
    1be8:	bf e3       	ldi	r27, 0x3F	; 63
    1bea:	80 83       	st	Z, r24
    1bec:	91 83       	std	Z+1, r25	; 0x01
    1bee:	a2 83       	std	Z+2, r26	; 0x02
    1bf0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf2:	8e 01       	movw	r16, r28
    1bf4:	03 5b       	subi	r16, 0xB3	; 179
    1bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	ef 5a       	subi	r30, 0xAF	; 175
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	60 81       	ld	r22, Z
    1c00:	71 81       	ldd	r23, Z+1	; 0x01
    1c02:	82 81       	ldd	r24, Z+2	; 0x02
    1c04:	93 81       	ldd	r25, Z+3	; 0x03
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	4a e7       	ldi	r20, 0x7A	; 122
    1c0c:	53 e4       	ldi	r21, 0x43	; 67
    1c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	f8 01       	movw	r30, r16
    1c18:	80 83       	st	Z, r24
    1c1a:	91 83       	std	Z+1, r25	; 0x01
    1c1c:	a2 83       	std	Z+2, r26	; 0x02
    1c1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c20:	fe 01       	movw	r30, r28
    1c22:	e3 5b       	subi	r30, 0xB3	; 179
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	60 81       	ld	r22, Z
    1c28:	71 81       	ldd	r23, Z+1	; 0x01
    1c2a:	82 81       	ldd	r24, Z+2	; 0x02
    1c2c:	93 81       	ldd	r25, Z+3	; 0x03
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e8       	ldi	r20, 0x80	; 128
    1c34:	5f e3       	ldi	r21, 0x3F	; 63
    1c36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c3a:	88 23       	and	r24, r24
    1c3c:	44 f4       	brge	.+16     	; 0x1c4e <LCD_displayCharacter+0x224>
		__ticks = 1;
    1c3e:	fe 01       	movw	r30, r28
    1c40:	e5 5b       	subi	r30, 0xB5	; 181
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	91 83       	std	Z+1, r25	; 0x01
    1c4a:	80 83       	st	Z, r24
    1c4c:	64 c0       	rjmp	.+200    	; 0x1d16 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    1c4e:	fe 01       	movw	r30, r28
    1c50:	e3 5b       	subi	r30, 0xB3	; 179
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	60 81       	ld	r22, Z
    1c56:	71 81       	ldd	r23, Z+1	; 0x01
    1c58:	82 81       	ldd	r24, Z+2	; 0x02
    1c5a:	93 81       	ldd	r25, Z+3	; 0x03
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	3f ef       	ldi	r19, 0xFF	; 255
    1c60:	4f e7       	ldi	r20, 0x7F	; 127
    1c62:	57 e4       	ldi	r21, 0x47	; 71
    1c64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c68:	18 16       	cp	r1, r24
    1c6a:	0c f0       	brlt	.+2      	; 0x1c6e <LCD_displayCharacter+0x244>
    1c6c:	43 c0       	rjmp	.+134    	; 0x1cf4 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c6e:	fe 01       	movw	r30, r28
    1c70:	ef 5a       	subi	r30, 0xAF	; 175
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	60 81       	ld	r22, Z
    1c76:	71 81       	ldd	r23, Z+1	; 0x01
    1c78:	82 81       	ldd	r24, Z+2	; 0x02
    1c7a:	93 81       	ldd	r25, Z+3	; 0x03
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	40 e2       	ldi	r20, 0x20	; 32
    1c82:	51 e4       	ldi	r21, 0x41	; 65
    1c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	8e 01       	movw	r16, r28
    1c8e:	05 5b       	subi	r16, 0xB5	; 181
    1c90:	1f 4f       	sbci	r17, 0xFF	; 255
    1c92:	bc 01       	movw	r22, r24
    1c94:	cd 01       	movw	r24, r26
    1c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	91 83       	std	Z+1, r25	; 0x01
    1ca2:	80 83       	st	Z, r24
    1ca4:	1f c0       	rjmp	.+62     	; 0x1ce4 <LCD_displayCharacter+0x2ba>
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	e7 5b       	subi	r30, 0xB7	; 183
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	89 e1       	ldi	r24, 0x19	; 25
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	91 83       	std	Z+1, r25	; 0x01
    1cb2:	80 83       	st	Z, r24
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	e7 5b       	subi	r30, 0xB7	; 183
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	80 81       	ld	r24, Z
    1cbc:	91 81       	ldd	r25, Z+1	; 0x01
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <LCD_displayCharacter+0x294>
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	e7 5b       	subi	r30, 0xB7	; 183
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	91 83       	std	Z+1, r25	; 0x01
    1cca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ccc:	de 01       	movw	r26, r28
    1cce:	a5 5b       	subi	r26, 0xB5	; 181
    1cd0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	e5 5b       	subi	r30, 0xB5	; 181
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	80 81       	ld	r24, Z
    1cda:	91 81       	ldd	r25, Z+1	; 0x01
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	11 96       	adiw	r26, 0x01	; 1
    1ce0:	9c 93       	st	X, r25
    1ce2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e5 5b       	subi	r30, 0xB5	; 181
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	80 81       	ld	r24, Z
    1cec:	91 81       	ldd	r25, Z+1	; 0x01
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	d1 f6       	brne	.-76     	; 0x1ca6 <LCD_displayCharacter+0x27c>
    1cf2:	27 c0       	rjmp	.+78     	; 0x1d42 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf4:	8e 01       	movw	r16, r28
    1cf6:	05 5b       	subi	r16, 0xB5	; 181
    1cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	e3 5b       	subi	r30, 0xB3	; 179
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	60 81       	ld	r22, Z
    1d02:	71 81       	ldd	r23, Z+1	; 0x01
    1d04:	82 81       	ldd	r24, Z+2	; 0x02
    1d06:	93 81       	ldd	r25, Z+3	; 0x03
    1d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	f8 01       	movw	r30, r16
    1d12:	91 83       	std	Z+1, r25	; 0x01
    1d14:	80 83       	st	Z, r24
    1d16:	de 01       	movw	r26, r28
    1d18:	a9 5b       	subi	r26, 0xB9	; 185
    1d1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	e5 5b       	subi	r30, 0xB5	; 181
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	80 81       	ld	r24, Z
    1d24:	91 81       	ldd	r25, Z+1	; 0x01
    1d26:	8d 93       	st	X+, r24
    1d28:	9c 93       	st	X, r25
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	e9 5b       	subi	r30, 0xB9	; 185
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	80 81       	ld	r24, Z
    1d32:	91 81       	ldd	r25, Z+1	; 0x01
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <LCD_displayCharacter+0x30a>
    1d38:	fe 01       	movw	r30, r28
    1d3a:	e9 5b       	subi	r30, 0xB9	; 185
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	91 83       	std	Z+1, r25	; 0x01
    1d40:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
    1d42:	a2 e3       	ldi	r26, 0x32	; 50
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	e2 e3       	ldi	r30, 0x32	; 50
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	98 2f       	mov	r25, r24
    1d4e:	90 7f       	andi	r25, 0xF0	; 240
    1d50:	fe 01       	movw	r30, r28
    1d52:	ed 59       	subi	r30, 0x9D	; 157
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	80 81       	ld	r24, Z
    1d58:	82 95       	swap	r24
    1d5a:	8f 70       	andi	r24, 0x0F	; 15
    1d5c:	89 2b       	or	r24, r25
    1d5e:	8c 93       	st	X, r24
    1d60:	fe 01       	movw	r30, r28
    1d62:	ed 5b       	subi	r30, 0xBD	; 189
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	a0 e8       	ldi	r26, 0x80	; 128
    1d6c:	bf e3       	ldi	r27, 0x3F	; 63
    1d6e:	80 83       	st	Z, r24
    1d70:	91 83       	std	Z+1, r25	; 0x01
    1d72:	a2 83       	std	Z+2, r26	; 0x02
    1d74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d76:	8e 01       	movw	r16, r28
    1d78:	01 5c       	subi	r16, 0xC1	; 193
    1d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	ed 5b       	subi	r30, 0xBD	; 189
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	60 81       	ld	r22, Z
    1d84:	71 81       	ldd	r23, Z+1	; 0x01
    1d86:	82 81       	ldd	r24, Z+2	; 0x02
    1d88:	93 81       	ldd	r25, Z+3	; 0x03
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	4a e7       	ldi	r20, 0x7A	; 122
    1d90:	53 e4       	ldi	r21, 0x43	; 67
    1d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	f8 01       	movw	r30, r16
    1d9c:	80 83       	st	Z, r24
    1d9e:	91 83       	std	Z+1, r25	; 0x01
    1da0:	a2 83       	std	Z+2, r26	; 0x02
    1da2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1da4:	fe 01       	movw	r30, r28
    1da6:	ff 96       	adiw	r30, 0x3f	; 63
    1da8:	60 81       	ld	r22, Z
    1daa:	71 81       	ldd	r23, Z+1	; 0x01
    1dac:	82 81       	ldd	r24, Z+2	; 0x02
    1dae:	93 81       	ldd	r25, Z+3	; 0x03
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e8       	ldi	r20, 0x80	; 128
    1db6:	5f e3       	ldi	r21, 0x3F	; 63
    1db8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dbc:	88 23       	and	r24, r24
    1dbe:	2c f4       	brge	.+10     	; 0x1dca <LCD_displayCharacter+0x3a0>
		__ticks = 1;
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	9e af       	std	Y+62, r25	; 0x3e
    1dc6:	8d af       	std	Y+61, r24	; 0x3d
    1dc8:	46 c0       	rjmp	.+140    	; 0x1e56 <LCD_displayCharacter+0x42c>
	else if (__tmp > 65535)
    1dca:	fe 01       	movw	r30, r28
    1dcc:	ff 96       	adiw	r30, 0x3f	; 63
    1dce:	60 81       	ld	r22, Z
    1dd0:	71 81       	ldd	r23, Z+1	; 0x01
    1dd2:	82 81       	ldd	r24, Z+2	; 0x02
    1dd4:	93 81       	ldd	r25, Z+3	; 0x03
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	3f ef       	ldi	r19, 0xFF	; 255
    1dda:	4f e7       	ldi	r20, 0x7F	; 127
    1ddc:	57 e4       	ldi	r21, 0x47	; 71
    1dde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de2:	18 16       	cp	r1, r24
    1de4:	64 f5       	brge	.+88     	; 0x1e3e <LCD_displayCharacter+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de6:	fe 01       	movw	r30, r28
    1de8:	ed 5b       	subi	r30, 0xBD	; 189
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	60 81       	ld	r22, Z
    1dee:	71 81       	ldd	r23, Z+1	; 0x01
    1df0:	82 81       	ldd	r24, Z+2	; 0x02
    1df2:	93 81       	ldd	r25, Z+3	; 0x03
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e2       	ldi	r20, 0x20	; 32
    1dfa:	51 e4       	ldi	r21, 0x41	; 65
    1dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	bc 01       	movw	r22, r24
    1e06:	cd 01       	movw	r24, r26
    1e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	9e af       	std	Y+62, r25	; 0x3e
    1e12:	8d af       	std	Y+61, r24	; 0x3d
    1e14:	0f c0       	rjmp	.+30     	; 0x1e34 <LCD_displayCharacter+0x40a>
    1e16:	89 e1       	ldi	r24, 0x19	; 25
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	9c af       	std	Y+60, r25	; 0x3c
    1e1c:	8b af       	std	Y+59, r24	; 0x3b
    1e1e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e20:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <LCD_displayCharacter+0x3f8>
    1e26:	9c af       	std	Y+60, r25	; 0x3c
    1e28:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	9e af       	std	Y+62, r25	; 0x3e
    1e32:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e34:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e36:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	69 f7       	brne	.-38     	; 0x1e16 <LCD_displayCharacter+0x3ec>
    1e3c:	16 c0       	rjmp	.+44     	; 0x1e6a <LCD_displayCharacter+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3e:	fe 01       	movw	r30, r28
    1e40:	ff 96       	adiw	r30, 0x3f	; 63
    1e42:	60 81       	ld	r22, Z
    1e44:	71 81       	ldd	r23, Z+1	; 0x01
    1e46:	82 81       	ldd	r24, Z+2	; 0x02
    1e48:	93 81       	ldd	r25, Z+3	; 0x03
    1e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	9e af       	std	Y+62, r25	; 0x3e
    1e54:	8d af       	std	Y+61, r24	; 0x3d
    1e56:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e58:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e5a:	9a af       	std	Y+58, r25	; 0x3a
    1e5c:	89 af       	std	Y+57, r24	; 0x39
    1e5e:	89 ad       	ldd	r24, Y+57	; 0x39
    1e60:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <LCD_displayCharacter+0x438>
    1e66:	9a af       	std	Y+58, r25	; 0x3a
    1e68:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1e6a:	a2 e3       	ldi	r26, 0x32	; 50
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	e2 e3       	ldi	r30, 0x32	; 50
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	8f 7b       	andi	r24, 0xBF	; 191
    1e76:	8c 93       	st	X, r24
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	a0 e8       	ldi	r26, 0x80	; 128
    1e7e:	bf e3       	ldi	r27, 0x3F	; 63
    1e80:	8d ab       	std	Y+53, r24	; 0x35
    1e82:	9e ab       	std	Y+54, r25	; 0x36
    1e84:	af ab       	std	Y+55, r26	; 0x37
    1e86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e88:	6d a9       	ldd	r22, Y+53	; 0x35
    1e8a:	7e a9       	ldd	r23, Y+54	; 0x36
    1e8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1e8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	4a e7       	ldi	r20, 0x7A	; 122
    1e96:	53 e4       	ldi	r21, 0x43	; 67
    1e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	89 ab       	std	Y+49, r24	; 0x31
    1ea2:	9a ab       	std	Y+50, r25	; 0x32
    1ea4:	ab ab       	std	Y+51, r26	; 0x33
    1ea6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ea8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eaa:	7a a9       	ldd	r23, Y+50	; 0x32
    1eac:	8b a9       	ldd	r24, Y+51	; 0x33
    1eae:	9c a9       	ldd	r25, Y+52	; 0x34
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e8       	ldi	r20, 0x80	; 128
    1eb6:	5f e3       	ldi	r21, 0x3F	; 63
    1eb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ebc:	88 23       	and	r24, r24
    1ebe:	2c f4       	brge	.+10     	; 0x1eca <LCD_displayCharacter+0x4a0>
		__ticks = 1;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	98 ab       	std	Y+48, r25	; 0x30
    1ec6:	8f a7       	std	Y+47, r24	; 0x2f
    1ec8:	3f c0       	rjmp	.+126    	; 0x1f48 <LCD_displayCharacter+0x51e>
	else if (__tmp > 65535)
    1eca:	69 a9       	ldd	r22, Y+49	; 0x31
    1ecc:	7a a9       	ldd	r23, Y+50	; 0x32
    1ece:	8b a9       	ldd	r24, Y+51	; 0x33
    1ed0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	3f ef       	ldi	r19, 0xFF	; 255
    1ed6:	4f e7       	ldi	r20, 0x7F	; 127
    1ed8:	57 e4       	ldi	r21, 0x47	; 71
    1eda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ede:	18 16       	cp	r1, r24
    1ee0:	4c f5       	brge	.+82     	; 0x1f34 <LCD_displayCharacter+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ee4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ee6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ee8:	98 ad       	ldd	r25, Y+56	; 0x38
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e2       	ldi	r20, 0x20	; 32
    1ef0:	51 e4       	ldi	r21, 0x41	; 65
    1ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	bc 01       	movw	r22, r24
    1efc:	cd 01       	movw	r24, r26
    1efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	98 ab       	std	Y+48, r25	; 0x30
    1f08:	8f a7       	std	Y+47, r24	; 0x2f
    1f0a:	0f c0       	rjmp	.+30     	; 0x1f2a <LCD_displayCharacter+0x500>
    1f0c:	89 e1       	ldi	r24, 0x19	; 25
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	9e a7       	std	Y+46, r25	; 0x2e
    1f12:	8d a7       	std	Y+45, r24	; 0x2d
    1f14:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f16:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <LCD_displayCharacter+0x4ee>
    1f1c:	9e a7       	std	Y+46, r25	; 0x2e
    1f1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f20:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f22:	98 a9       	ldd	r25, Y+48	; 0x30
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	98 ab       	std	Y+48, r25	; 0x30
    1f28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	69 f7       	brne	.-38     	; 0x1f0c <LCD_displayCharacter+0x4e2>
    1f32:	14 c0       	rjmp	.+40     	; 0x1f5c <LCD_displayCharacter+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f34:	69 a9       	ldd	r22, Y+49	; 0x31
    1f36:	7a a9       	ldd	r23, Y+50	; 0x32
    1f38:	8b a9       	ldd	r24, Y+51	; 0x33
    1f3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	98 ab       	std	Y+48, r25	; 0x30
    1f46:	8f a7       	std	Y+47, r24	; 0x2f
    1f48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f4c:	9c a7       	std	Y+44, r25	; 0x2c
    1f4e:	8b a7       	std	Y+43, r24	; 0x2b
    1f50:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f52:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <LCD_displayCharacter+0x52a>
    1f58:	9c a7       	std	Y+44, r25	; 0x2c
    1f5a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1f5c:	a2 e3       	ldi	r26, 0x32	; 50
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e2 e3       	ldi	r30, 0x32	; 50
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	80 64       	ori	r24, 0x40	; 64
    1f68:	8c 93       	st	X, r24
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	a0 e8       	ldi	r26, 0x80	; 128
    1f70:	bf e3       	ldi	r27, 0x3F	; 63
    1f72:	8f a3       	std	Y+39, r24	; 0x27
    1f74:	98 a7       	std	Y+40, r25	; 0x28
    1f76:	a9 a7       	std	Y+41, r26	; 0x29
    1f78:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f7c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f7e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f80:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	4a e7       	ldi	r20, 0x7A	; 122
    1f88:	53 e4       	ldi	r21, 0x43	; 67
    1f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	8b a3       	std	Y+35, r24	; 0x23
    1f94:	9c a3       	std	Y+36, r25	; 0x24
    1f96:	ad a3       	std	Y+37, r26	; 0x25
    1f98:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f9a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f9c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa0:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e8       	ldi	r20, 0x80	; 128
    1fa8:	5f e3       	ldi	r21, 0x3F	; 63
    1faa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fae:	88 23       	and	r24, r24
    1fb0:	2c f4       	brge	.+10     	; 0x1fbc <LCD_displayCharacter+0x592>
		__ticks = 1;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	9a a3       	std	Y+34, r25	; 0x22
    1fb8:	89 a3       	std	Y+33, r24	; 0x21
    1fba:	3f c0       	rjmp	.+126    	; 0x203a <LCD_displayCharacter+0x610>
	else if (__tmp > 65535)
    1fbc:	6b a1       	ldd	r22, Y+35	; 0x23
    1fbe:	7c a1       	ldd	r23, Y+36	; 0x24
    1fc0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fc2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	3f ef       	ldi	r19, 0xFF	; 255
    1fc8:	4f e7       	ldi	r20, 0x7F	; 127
    1fca:	57 e4       	ldi	r21, 0x47	; 71
    1fcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fd0:	18 16       	cp	r1, r24
    1fd2:	4c f5       	brge	.+82     	; 0x2026 <LCD_displayCharacter+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd4:	6f a1       	ldd	r22, Y+39	; 0x27
    1fd6:	78 a5       	ldd	r23, Y+40	; 0x28
    1fd8:	89 a5       	ldd	r24, Y+41	; 0x29
    1fda:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e2       	ldi	r20, 0x20	; 32
    1fe2:	51 e4       	ldi	r21, 0x41	; 65
    1fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	bc 01       	movw	r22, r24
    1fee:	cd 01       	movw	r24, r26
    1ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	9a a3       	std	Y+34, r25	; 0x22
    1ffa:	89 a3       	std	Y+33, r24	; 0x21
    1ffc:	0f c0       	rjmp	.+30     	; 0x201c <LCD_displayCharacter+0x5f2>
    1ffe:	89 e1       	ldi	r24, 0x19	; 25
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	98 a3       	std	Y+32, r25	; 0x20
    2004:	8f 8f       	std	Y+31, r24	; 0x1f
    2006:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2008:	98 a1       	ldd	r25, Y+32	; 0x20
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <LCD_displayCharacter+0x5e0>
    200e:	98 a3       	std	Y+32, r25	; 0x20
    2010:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2012:	89 a1       	ldd	r24, Y+33	; 0x21
    2014:	9a a1       	ldd	r25, Y+34	; 0x22
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	9a a3       	std	Y+34, r25	; 0x22
    201a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201c:	89 a1       	ldd	r24, Y+33	; 0x21
    201e:	9a a1       	ldd	r25, Y+34	; 0x22
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	69 f7       	brne	.-38     	; 0x1ffe <LCD_displayCharacter+0x5d4>
    2024:	14 c0       	rjmp	.+40     	; 0x204e <LCD_displayCharacter+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2026:	6b a1       	ldd	r22, Y+35	; 0x23
    2028:	7c a1       	ldd	r23, Y+36	; 0x24
    202a:	8d a1       	ldd	r24, Y+37	; 0x25
    202c:	9e a1       	ldd	r25, Y+38	; 0x26
    202e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	9a a3       	std	Y+34, r25	; 0x22
    2038:	89 a3       	std	Y+33, r24	; 0x21
    203a:	89 a1       	ldd	r24, Y+33	; 0x21
    203c:	9a a1       	ldd	r25, Y+34	; 0x22
    203e:	9e 8f       	std	Y+30, r25	; 0x1e
    2040:	8d 8f       	std	Y+29, r24	; 0x1d
    2042:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2044:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	f1 f7       	brne	.-4      	; 0x2046 <LCD_displayCharacter+0x61c>
    204a:	9e 8f       	std	Y+30, r25	; 0x1e
    204c:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
    204e:	a2 e3       	ldi	r26, 0x32	; 50
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e2 e3       	ldi	r30, 0x32	; 50
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	98 2f       	mov	r25, r24
    205a:	90 7f       	andi	r25, 0xF0	; 240
    205c:	fe 01       	movw	r30, r28
    205e:	ed 59       	subi	r30, 0x9D	; 157
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	80 81       	ld	r24, Z
    2064:	8f 70       	andi	r24, 0x0F	; 15
    2066:	89 2b       	or	r24, r25
    2068:	8c 93       	st	X, r24
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	a0 e8       	ldi	r26, 0x80	; 128
    2070:	bf e3       	ldi	r27, 0x3F	; 63
    2072:	89 8f       	std	Y+25, r24	; 0x19
    2074:	9a 8f       	std	Y+26, r25	; 0x1a
    2076:	ab 8f       	std	Y+27, r26	; 0x1b
    2078:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207a:	69 8d       	ldd	r22, Y+25	; 0x19
    207c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    207e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2080:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	4a e7       	ldi	r20, 0x7A	; 122
    2088:	53 e4       	ldi	r21, 0x43	; 67
    208a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	8d 8b       	std	Y+21, r24	; 0x15
    2094:	9e 8b       	std	Y+22, r25	; 0x16
    2096:	af 8b       	std	Y+23, r26	; 0x17
    2098:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    209a:	6d 89       	ldd	r22, Y+21	; 0x15
    209c:	7e 89       	ldd	r23, Y+22	; 0x16
    209e:	8f 89       	ldd	r24, Y+23	; 0x17
    20a0:	98 8d       	ldd	r25, Y+24	; 0x18
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e8       	ldi	r20, 0x80	; 128
    20a8:	5f e3       	ldi	r21, 0x3F	; 63
    20aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ae:	88 23       	and	r24, r24
    20b0:	2c f4       	brge	.+10     	; 0x20bc <LCD_displayCharacter+0x692>
		__ticks = 1;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	9c 8b       	std	Y+20, r25	; 0x14
    20b8:	8b 8b       	std	Y+19, r24	; 0x13
    20ba:	3f c0       	rjmp	.+126    	; 0x213a <LCD_displayCharacter+0x710>
	else if (__tmp > 65535)
    20bc:	6d 89       	ldd	r22, Y+21	; 0x15
    20be:	7e 89       	ldd	r23, Y+22	; 0x16
    20c0:	8f 89       	ldd	r24, Y+23	; 0x17
    20c2:	98 8d       	ldd	r25, Y+24	; 0x18
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	3f ef       	ldi	r19, 0xFF	; 255
    20c8:	4f e7       	ldi	r20, 0x7F	; 127
    20ca:	57 e4       	ldi	r21, 0x47	; 71
    20cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d0:	18 16       	cp	r1, r24
    20d2:	4c f5       	brge	.+82     	; 0x2126 <LCD_displayCharacter+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d4:	69 8d       	ldd	r22, Y+25	; 0x19
    20d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e2       	ldi	r20, 0x20	; 32
    20e2:	51 e4       	ldi	r21, 0x41	; 65
    20e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	bc 01       	movw	r22, r24
    20ee:	cd 01       	movw	r24, r26
    20f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	9c 8b       	std	Y+20, r25	; 0x14
    20fa:	8b 8b       	std	Y+19, r24	; 0x13
    20fc:	0f c0       	rjmp	.+30     	; 0x211c <LCD_displayCharacter+0x6f2>
    20fe:	89 e1       	ldi	r24, 0x19	; 25
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	9a 8b       	std	Y+18, r25	; 0x12
    2104:	89 8b       	std	Y+17, r24	; 0x11
    2106:	89 89       	ldd	r24, Y+17	; 0x11
    2108:	9a 89       	ldd	r25, Y+18	; 0x12
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <LCD_displayCharacter+0x6e0>
    210e:	9a 8b       	std	Y+18, r25	; 0x12
    2110:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2112:	8b 89       	ldd	r24, Y+19	; 0x13
    2114:	9c 89       	ldd	r25, Y+20	; 0x14
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	9c 8b       	std	Y+20, r25	; 0x14
    211a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211c:	8b 89       	ldd	r24, Y+19	; 0x13
    211e:	9c 89       	ldd	r25, Y+20	; 0x14
    2120:	00 97       	sbiw	r24, 0x00	; 0
    2122:	69 f7       	brne	.-38     	; 0x20fe <LCD_displayCharacter+0x6d4>
    2124:	14 c0       	rjmp	.+40     	; 0x214e <LCD_displayCharacter+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2126:	6d 89       	ldd	r22, Y+21	; 0x15
    2128:	7e 89       	ldd	r23, Y+22	; 0x16
    212a:	8f 89       	ldd	r24, Y+23	; 0x17
    212c:	98 8d       	ldd	r25, Y+24	; 0x18
    212e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	9c 8b       	std	Y+20, r25	; 0x14
    2138:	8b 8b       	std	Y+19, r24	; 0x13
    213a:	8b 89       	ldd	r24, Y+19	; 0x13
    213c:	9c 89       	ldd	r25, Y+20	; 0x14
    213e:	98 8b       	std	Y+16, r25	; 0x10
    2140:	8f 87       	std	Y+15, r24	; 0x0f
    2142:	8f 85       	ldd	r24, Y+15	; 0x0f
    2144:	98 89       	ldd	r25, Y+16	; 0x10
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <LCD_displayCharacter+0x71c>
    214a:	98 8b       	std	Y+16, r25	; 0x10
    214c:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    214e:	a2 e3       	ldi	r26, 0x32	; 50
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e2 e3       	ldi	r30, 0x32	; 50
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	8f 7b       	andi	r24, 0xBF	; 191
    215a:	8c 93       	st	X, r24
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	a0 e8       	ldi	r26, 0x80	; 128
    2162:	bf e3       	ldi	r27, 0x3F	; 63
    2164:	8b 87       	std	Y+11, r24	; 0x0b
    2166:	9c 87       	std	Y+12, r25	; 0x0c
    2168:	ad 87       	std	Y+13, r26	; 0x0d
    216a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216c:	6b 85       	ldd	r22, Y+11	; 0x0b
    216e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2170:	8d 85       	ldd	r24, Y+13	; 0x0d
    2172:	9e 85       	ldd	r25, Y+14	; 0x0e
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	4a e7       	ldi	r20, 0x7A	; 122
    217a:	53 e4       	ldi	r21, 0x43	; 67
    217c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	8f 83       	std	Y+7, r24	; 0x07
    2186:	98 87       	std	Y+8, r25	; 0x08
    2188:	a9 87       	std	Y+9, r26	; 0x09
    218a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    218c:	6f 81       	ldd	r22, Y+7	; 0x07
    218e:	78 85       	ldd	r23, Y+8	; 0x08
    2190:	89 85       	ldd	r24, Y+9	; 0x09
    2192:	9a 85       	ldd	r25, Y+10	; 0x0a
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e8       	ldi	r20, 0x80	; 128
    219a:	5f e3       	ldi	r21, 0x3F	; 63
    219c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21a0:	88 23       	and	r24, r24
    21a2:	2c f4       	brge	.+10     	; 0x21ae <LCD_displayCharacter+0x784>
		__ticks = 1;
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	9e 83       	std	Y+6, r25	; 0x06
    21aa:	8d 83       	std	Y+5, r24	; 0x05
    21ac:	3f c0       	rjmp	.+126    	; 0x222c <LCD_displayCharacter+0x802>
	else if (__tmp > 65535)
    21ae:	6f 81       	ldd	r22, Y+7	; 0x07
    21b0:	78 85       	ldd	r23, Y+8	; 0x08
    21b2:	89 85       	ldd	r24, Y+9	; 0x09
    21b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	3f ef       	ldi	r19, 0xFF	; 255
    21ba:	4f e7       	ldi	r20, 0x7F	; 127
    21bc:	57 e4       	ldi	r21, 0x47	; 71
    21be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21c2:	18 16       	cp	r1, r24
    21c4:	4c f5       	brge	.+82     	; 0x2218 <LCD_displayCharacter+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    21cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 e2       	ldi	r20, 0x20	; 32
    21d4:	51 e4       	ldi	r21, 0x41	; 65
    21d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	bc 01       	movw	r22, r24
    21e0:	cd 01       	movw	r24, r26
    21e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	9e 83       	std	Y+6, r25	; 0x06
    21ec:	8d 83       	std	Y+5, r24	; 0x05
    21ee:	0f c0       	rjmp	.+30     	; 0x220e <LCD_displayCharacter+0x7e4>
    21f0:	89 e1       	ldi	r24, 0x19	; 25
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	9c 83       	std	Y+4, r25	; 0x04
    21f6:	8b 83       	std	Y+3, r24	; 0x03
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	9c 81       	ldd	r25, Y+4	; 0x04
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <LCD_displayCharacter+0x7d2>
    2200:	9c 83       	std	Y+4, r25	; 0x04
    2202:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2204:	8d 81       	ldd	r24, Y+5	; 0x05
    2206:	9e 81       	ldd	r25, Y+6	; 0x06
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	9e 83       	std	Y+6, r25	; 0x06
    220c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220e:	8d 81       	ldd	r24, Y+5	; 0x05
    2210:	9e 81       	ldd	r25, Y+6	; 0x06
    2212:	00 97       	sbiw	r24, 0x00	; 0
    2214:	69 f7       	brne	.-38     	; 0x21f0 <LCD_displayCharacter+0x7c6>
    2216:	14 c0       	rjmp	.+40     	; 0x2240 <LCD_displayCharacter+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2218:	6f 81       	ldd	r22, Y+7	; 0x07
    221a:	78 85       	ldd	r23, Y+8	; 0x08
    221c:	89 85       	ldd	r24, Y+9	; 0x09
    221e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	9e 83       	std	Y+6, r25	; 0x06
    222a:	8d 83       	std	Y+5, r24	; 0x05
    222c:	8d 81       	ldd	r24, Y+5	; 0x05
    222e:	9e 81       	ldd	r25, Y+6	; 0x06
    2230:	9a 83       	std	Y+2, r25	; 0x02
    2232:	89 83       	std	Y+1, r24	; 0x01
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	9a 81       	ldd	r25, Y+2	; 0x02
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	f1 f7       	brne	.-4      	; 0x2238 <LCD_displayCharacter+0x80e>
    223c:	9a 83       	std	Y+2, r25	; 0x02
    223e:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2240:	cd 59       	subi	r28, 0x9D	; 157
    2242:	df 4f       	sbci	r29, 0xFF	; 255
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	de bf       	out	0x3e, r29	; 62
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	cd bf       	out	0x3d, r28	; 61
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	1f 91       	pop	r17
    2254:	0f 91       	pop	r16
    2256:	08 95       	ret

00002258 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2258:	df 93       	push	r29
    225a:	cf 93       	push	r28
    225c:	00 d0       	rcall	.+0      	; 0x225e <LCD_displayString+0x6>
    225e:	0f 92       	push	r0
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	9b 83       	std	Y+3, r25	; 0x03
    2266:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2268:	19 82       	std	Y+1, r1	; 0x01
    226a:	0e c0       	rjmp	.+28     	; 0x2288 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	28 2f       	mov	r18, r24
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	9b 81       	ldd	r25, Y+3	; 0x03
    2276:	fc 01       	movw	r30, r24
    2278:	e2 0f       	add	r30, r18
    227a:	f3 1f       	adc	r31, r19
    227c:	80 81       	ld	r24, Z
    227e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <LCD_displayCharacter>
		i++;
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	8f 5f       	subi	r24, 0xFF	; 255
    2286:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	28 2f       	mov	r18, r24
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	8a 81       	ldd	r24, Y+2	; 0x02
    2290:	9b 81       	ldd	r25, Y+3	; 0x03
    2292:	fc 01       	movw	r30, r24
    2294:	e2 0f       	add	r30, r18
    2296:	f3 1f       	adc	r31, r19
    2298:	80 81       	ld	r24, Z
    229a:	88 23       	and	r24, r24
    229c:	39 f7       	brne	.-50     	; 0x226c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	00 d0       	rcall	.+0      	; 0x22b0 <LCD_goToRowColumn+0x6>
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <LCD_goToRowColumn+0x8>
    22b2:	0f 92       	push	r0
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	8a 83       	std	Y+2, r24	; 0x02
    22ba:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	28 2f       	mov	r18, r24
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	3d 83       	std	Y+5, r19	; 0x05
    22c4:	2c 83       	std	Y+4, r18	; 0x04
    22c6:	8c 81       	ldd	r24, Y+4	; 0x04
    22c8:	9d 81       	ldd	r25, Y+5	; 0x05
    22ca:	81 30       	cpi	r24, 0x01	; 1
    22cc:	91 05       	cpc	r25, r1
    22ce:	c1 f0       	breq	.+48     	; 0x2300 <LCD_goToRowColumn+0x56>
    22d0:	2c 81       	ldd	r18, Y+4	; 0x04
    22d2:	3d 81       	ldd	r19, Y+5	; 0x05
    22d4:	22 30       	cpi	r18, 0x02	; 2
    22d6:	31 05       	cpc	r19, r1
    22d8:	2c f4       	brge	.+10     	; 0x22e4 <LCD_goToRowColumn+0x3a>
    22da:	8c 81       	ldd	r24, Y+4	; 0x04
    22dc:	9d 81       	ldd	r25, Y+5	; 0x05
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	61 f0       	breq	.+24     	; 0x22fa <LCD_goToRowColumn+0x50>
    22e2:	19 c0       	rjmp	.+50     	; 0x2316 <LCD_goToRowColumn+0x6c>
    22e4:	2c 81       	ldd	r18, Y+4	; 0x04
    22e6:	3d 81       	ldd	r19, Y+5	; 0x05
    22e8:	22 30       	cpi	r18, 0x02	; 2
    22ea:	31 05       	cpc	r19, r1
    22ec:	69 f0       	breq	.+26     	; 0x2308 <LCD_goToRowColumn+0x5e>
    22ee:	8c 81       	ldd	r24, Y+4	; 0x04
    22f0:	9d 81       	ldd	r25, Y+5	; 0x05
    22f2:	83 30       	cpi	r24, 0x03	; 3
    22f4:	91 05       	cpc	r25, r1
    22f6:	61 f0       	breq	.+24     	; 0x2310 <LCD_goToRowColumn+0x66>
    22f8:	0e c0       	rjmp	.+28     	; 0x2316 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	0b c0       	rjmp	.+22     	; 0x2316 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	80 5c       	subi	r24, 0xC0	; 192
    2304:	89 83       	std	Y+1, r24	; 0x01
    2306:	07 c0       	rjmp	.+14     	; 0x2316 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	80 5f       	subi	r24, 0xF0	; 240
    230c:	89 83       	std	Y+1, r24	; 0x01
    230e:	03 c0       	rjmp	.+6      	; 0x2316 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2310:	8b 81       	ldd	r24, Y+3	; 0x03
    2312:	80 5b       	subi	r24, 0xB0	; 176
    2314:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	80 68       	ori	r24, 0x80	; 128
    231a:	0e 94 fe 08 	call	0x11fc	; 0x11fc <LCD_sendCommand>
}
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	00 d0       	rcall	.+0      	; 0x2334 <LCD_displayStringRowColumn+0x6>
    2334:	00 d0       	rcall	.+0      	; 0x2336 <LCD_displayStringRowColumn+0x8>
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	89 83       	std	Y+1, r24	; 0x01
    233c:	6a 83       	std	Y+2, r22	; 0x02
    233e:	5c 83       	std	Y+4, r21	; 0x04
    2340:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	6a 81       	ldd	r22, Y+2	; 0x02
    2346:	0e 94 55 11 	call	0x22aa	; 0x22aa <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	9c 81       	ldd	r25, Y+4	; 0x04
    234e:	0e 94 2c 11 	call	0x2258	; 0x2258 <LCD_displayString>
}
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	cf 91       	pop	r28
    235c:	df 91       	pop	r29
    235e:	08 95       	ret

00002360 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
    2368:	62 97       	sbiw	r28, 0x12	; 18
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	de bf       	out	0x3e, r29	; 62
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	cd bf       	out	0x3d, r28	; 61
    2374:	9a 8b       	std	Y+18, r25	; 0x12
    2376:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2378:	89 89       	ldd	r24, Y+17	; 0x11
    237a:	9a 89       	ldd	r25, Y+18	; 0x12
    237c:	9e 01       	movw	r18, r28
    237e:	2f 5f       	subi	r18, 0xFF	; 255
    2380:	3f 4f       	sbci	r19, 0xFF	; 255
    2382:	b9 01       	movw	r22, r18
    2384:	4a e0       	ldi	r20, 0x0A	; 10
    2386:	50 e0       	ldi	r21, 0x00	; 0
    2388:	0e 94 14 12 	call	0x2428	; 0x2428 <itoa>
   LCD_displayString(buff);
    238c:	ce 01       	movw	r24, r28
    238e:	01 96       	adiw	r24, 0x01	; 1
    2390:	0e 94 2c 11 	call	0x2258	; 0x2258 <LCD_displayString>
}
    2394:	62 96       	adiw	r28, 0x12	; 18
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	08 95       	ret

000023a6 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	0e 94 fe 08 	call	0x11fc	; 0x11fc <LCD_sendCommand>
}
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	08 95       	ret

000023ba <__prologue_saves__>:
    23ba:	2f 92       	push	r2
    23bc:	3f 92       	push	r3
    23be:	4f 92       	push	r4
    23c0:	5f 92       	push	r5
    23c2:	6f 92       	push	r6
    23c4:	7f 92       	push	r7
    23c6:	8f 92       	push	r8
    23c8:	9f 92       	push	r9
    23ca:	af 92       	push	r10
    23cc:	bf 92       	push	r11
    23ce:	cf 92       	push	r12
    23d0:	df 92       	push	r13
    23d2:	ef 92       	push	r14
    23d4:	ff 92       	push	r15
    23d6:	0f 93       	push	r16
    23d8:	1f 93       	push	r17
    23da:	cf 93       	push	r28
    23dc:	df 93       	push	r29
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	ca 1b       	sub	r28, r26
    23e4:	db 0b       	sbc	r29, r27
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	f8 94       	cli
    23ea:	de bf       	out	0x3e, r29	; 62
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	cd bf       	out	0x3d, r28	; 61
    23f0:	09 94       	ijmp

000023f2 <__epilogue_restores__>:
    23f2:	2a 88       	ldd	r2, Y+18	; 0x12
    23f4:	39 88       	ldd	r3, Y+17	; 0x11
    23f6:	48 88       	ldd	r4, Y+16	; 0x10
    23f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    23fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    23fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    23fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2400:	9b 84       	ldd	r9, Y+11	; 0x0b
    2402:	aa 84       	ldd	r10, Y+10	; 0x0a
    2404:	b9 84       	ldd	r11, Y+9	; 0x09
    2406:	c8 84       	ldd	r12, Y+8	; 0x08
    2408:	df 80       	ldd	r13, Y+7	; 0x07
    240a:	ee 80       	ldd	r14, Y+6	; 0x06
    240c:	fd 80       	ldd	r15, Y+5	; 0x05
    240e:	0c 81       	ldd	r16, Y+4	; 0x04
    2410:	1b 81       	ldd	r17, Y+3	; 0x03
    2412:	aa 81       	ldd	r26, Y+2	; 0x02
    2414:	b9 81       	ldd	r27, Y+1	; 0x01
    2416:	ce 0f       	add	r28, r30
    2418:	d1 1d       	adc	r29, r1
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	f8 94       	cli
    241e:	de bf       	out	0x3e, r29	; 62
    2420:	0f be       	out	0x3f, r0	; 63
    2422:	cd bf       	out	0x3d, r28	; 61
    2424:	ed 01       	movw	r28, r26
    2426:	08 95       	ret

00002428 <itoa>:
    2428:	fb 01       	movw	r30, r22
    242a:	9f 01       	movw	r18, r30
    242c:	e8 94       	clt
    242e:	42 30       	cpi	r20, 0x02	; 2
    2430:	c4 f0       	brlt	.+48     	; 0x2462 <itoa+0x3a>
    2432:	45 32       	cpi	r20, 0x25	; 37
    2434:	b4 f4       	brge	.+44     	; 0x2462 <itoa+0x3a>
    2436:	4a 30       	cpi	r20, 0x0A	; 10
    2438:	29 f4       	brne	.+10     	; 0x2444 <itoa+0x1c>
    243a:	97 fb       	bst	r25, 7
    243c:	1e f4       	brtc	.+6      	; 0x2444 <itoa+0x1c>
    243e:	90 95       	com	r25
    2440:	81 95       	neg	r24
    2442:	9f 4f       	sbci	r25, 0xFF	; 255
    2444:	64 2f       	mov	r22, r20
    2446:	77 27       	eor	r23, r23
    2448:	0e 94 45 12 	call	0x248a	; 0x248a <__udivmodhi4>
    244c:	80 5d       	subi	r24, 0xD0	; 208
    244e:	8a 33       	cpi	r24, 0x3A	; 58
    2450:	0c f0       	brlt	.+2      	; 0x2454 <itoa+0x2c>
    2452:	89 5d       	subi	r24, 0xD9	; 217
    2454:	81 93       	st	Z+, r24
    2456:	cb 01       	movw	r24, r22
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	a1 f7       	brne	.-24     	; 0x2444 <itoa+0x1c>
    245c:	16 f4       	brtc	.+4      	; 0x2462 <itoa+0x3a>
    245e:	5d e2       	ldi	r21, 0x2D	; 45
    2460:	51 93       	st	Z+, r21
    2462:	10 82       	st	Z, r1
    2464:	c9 01       	movw	r24, r18
    2466:	0c 94 35 12 	jmp	0x246a	; 0x246a <strrev>

0000246a <strrev>:
    246a:	dc 01       	movw	r26, r24
    246c:	fc 01       	movw	r30, r24
    246e:	67 2f       	mov	r22, r23
    2470:	71 91       	ld	r23, Z+
    2472:	77 23       	and	r23, r23
    2474:	e1 f7       	brne	.-8      	; 0x246e <strrev+0x4>
    2476:	32 97       	sbiw	r30, 0x02	; 2
    2478:	04 c0       	rjmp	.+8      	; 0x2482 <strrev+0x18>
    247a:	7c 91       	ld	r23, X
    247c:	6d 93       	st	X+, r22
    247e:	70 83       	st	Z, r23
    2480:	62 91       	ld	r22, -Z
    2482:	ae 17       	cp	r26, r30
    2484:	bf 07       	cpc	r27, r31
    2486:	c8 f3       	brcs	.-14     	; 0x247a <strrev+0x10>
    2488:	08 95       	ret

0000248a <__udivmodhi4>:
    248a:	aa 1b       	sub	r26, r26
    248c:	bb 1b       	sub	r27, r27
    248e:	51 e1       	ldi	r21, 0x11	; 17
    2490:	07 c0       	rjmp	.+14     	; 0x24a0 <__udivmodhi4_ep>

00002492 <__udivmodhi4_loop>:
    2492:	aa 1f       	adc	r26, r26
    2494:	bb 1f       	adc	r27, r27
    2496:	a6 17       	cp	r26, r22
    2498:	b7 07       	cpc	r27, r23
    249a:	10 f0       	brcs	.+4      	; 0x24a0 <__udivmodhi4_ep>
    249c:	a6 1b       	sub	r26, r22
    249e:	b7 0b       	sbc	r27, r23

000024a0 <__udivmodhi4_ep>:
    24a0:	88 1f       	adc	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	5a 95       	dec	r21
    24a6:	a9 f7       	brne	.-22     	; 0x2492 <__udivmodhi4_loop>
    24a8:	80 95       	com	r24
    24aa:	90 95       	com	r25
    24ac:	bc 01       	movw	r22, r24
    24ae:	cd 01       	movw	r24, r26
    24b0:	08 95       	ret

000024b2 <_exit>:
    24b2:	f8 94       	cli

000024b4 <__stop_program>:
    24b4:	ff cf       	rjmp	.-2      	; 0x24b4 <__stop_program>
