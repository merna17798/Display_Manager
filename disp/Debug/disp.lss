
disp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b20  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00002b20  00002b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001fa4  00000000  00000000  00002bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c0c  00000000  00000000  00004b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005788  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000058c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007681  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000856c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000931c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000947c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009709  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009ed7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <main>
      7a:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	aa e9       	ldi	r26, 0x9A	; 154
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 1e 15 	jmp	0x2a3c	; 0x2a3c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 1e 15 	jmp	0x2a3c	; 0x2a3c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	8a e9       	ldi	r24, 0x9A	; 154
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 1e 15 	jmp	0x2a3c	; 0x2a3c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 1e 15 	jmp	0x2a3c	; 0x2a3c <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 1e 15 	jmp	0x2a3c	; 0x2a3c <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 22 15 	jmp	0x2a44	; 0x2a44 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 3e 15 	jmp	0x2a7c	; 0x2a7c <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_SetPinValue>:



/* IO Pins */
extern void DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= DIO_u8PORTD) && (u8PinIdCopy <= DIO_u8PIN7))
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	84 30       	cpi	r24, 0x04	; 4
     b54:	08 f0       	brcs	.+2      	; 0xb58 <DIO_SetPinValue+0x22>
     b56:	ee c0       	rjmp	.+476    	; 0xd34 <DIO_SetPinValue+0x1fe>
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	88 30       	cpi	r24, 0x08	; 8
     b5c:	08 f0       	brcs	.+2      	; 0xb60 <DIO_SetPinValue+0x2a>
     b5e:	ea c0       	rjmp	.+468    	; 0xd34 <DIO_SetPinValue+0x1fe>
	{
		if (u8PinValCopy == DIO_u8HIGH)
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	09 f0       	breq	.+2      	; 0xb68 <DIO_SetPinValue+0x32>
     b66:	6f c0       	rjmp	.+222    	; 0xc46 <DIO_SetPinValue+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3f 83       	std	Y+7, r19	; 0x07
     b70:	2e 83       	std	Y+6, r18	; 0x06
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	49 f1       	breq	.+82     	; 0xbce <DIO_SetPinValue+0x98>
     b7c:	2e 81       	ldd	r18, Y+6	; 0x06
     b7e:	3f 81       	ldd	r19, Y+7	; 0x07
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <DIO_SetPinValue+0x5a>
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	61 f0       	breq	.+24     	; 0xba6 <DIO_SetPinValue+0x70>
     b8e:	d2 c0       	rjmp	.+420    	; 0xd34 <DIO_SetPinValue+0x1fe>
     b90:	2e 81       	ldd	r18, Y+6	; 0x06
     b92:	3f 81       	ldd	r19, Y+7	; 0x07
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	71 f1       	breq	.+92     	; 0xbf6 <DIO_SetPinValue+0xc0>
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	e9 f1       	breq	.+122    	; 0xc1e <DIO_SetPinValue+0xe8>
     ba4:	c7 c0       	rjmp	.+398    	; 0xd34 <DIO_SetPinValue+0x1fe>
			{
				case DIO_u8PORTA: SET_BIT(DIO_u8PORTA_REG,u8PinIdCopy); break;
     ba6:	ab e3       	ldi	r26, 0x3B	; 59
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	eb e3       	ldi	r30, 0x3B	; 59
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_SetPinValue+0x8e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_SetPinValue+0x8a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	b3 c0       	rjmp	.+358    	; 0xd34 <DIO_SetPinValue+0x1fe>
				case DIO_u8PORTB: SET_BIT(DIO_u8PORTB_REG,u8PinIdCopy); break;
     bce:	a8 e3       	ldi	r26, 0x38	; 56
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e8 e3       	ldi	r30, 0x38	; 56
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_SetPinValue+0xb6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_SetPinValue+0xb2>
     bf0:	84 2b       	or	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	9f c0       	rjmp	.+318    	; 0xd34 <DIO_SetPinValue+0x1fe>
				case DIO_u8PORTC: SET_BIT(DIO_u8PORTC_REG,u8PinIdCopy); break;
     bf6:	a5 e3       	ldi	r26, 0x35	; 53
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e5 e3       	ldi	r30, 0x35	; 53
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	48 2f       	mov	r20, r24
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <DIO_SetPinValue+0xde>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <DIO_SetPinValue+0xda>
     c18:	84 2b       	or	r24, r20
     c1a:	8c 93       	st	X, r24
     c1c:	8b c0       	rjmp	.+278    	; 0xd34 <DIO_SetPinValue+0x1fe>
				case DIO_u8PORTD: SET_BIT(DIO_u8PORTD_REG,u8PinIdCopy); break;
     c1e:	a2 e3       	ldi	r26, 0x32	; 50
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e2 e3       	ldi	r30, 0x32	; 50
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	48 2f       	mov	r20, r24
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 2e       	mov	r0, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <DIO_SetPinValue+0x106>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <DIO_SetPinValue+0x102>
     c40:	84 2b       	or	r24, r20
     c42:	8c 93       	st	X, r24
     c44:	77 c0       	rjmp	.+238    	; 0xd34 <DIO_SetPinValue+0x1fe>
			}

		}

		else if (u8PinValCopy == DIO_u8LOW)
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	88 23       	and	r24, r24
     c4a:	09 f0       	breq	.+2      	; 0xc4e <DIO_SetPinValue+0x118>
     c4c:	73 c0       	rjmp	.+230    	; 0xd34 <DIO_SetPinValue+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	3d 83       	std	Y+5, r19	; 0x05
     c56:	2c 83       	std	Y+4, r18	; 0x04
     c58:	8c 81       	ldd	r24, Y+4	; 0x04
     c5a:	9d 81       	ldd	r25, Y+5	; 0x05
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	91 05       	cpc	r25, r1
     c60:	59 f1       	breq	.+86     	; 0xcb8 <DIO_SetPinValue+0x182>
     c62:	2c 81       	ldd	r18, Y+4	; 0x04
     c64:	3d 81       	ldd	r19, Y+5	; 0x05
     c66:	22 30       	cpi	r18, 0x02	; 2
     c68:	31 05       	cpc	r19, r1
     c6a:	2c f4       	brge	.+10     	; 0xc76 <DIO_SetPinValue+0x140>
     c6c:	8c 81       	ldd	r24, Y+4	; 0x04
     c6e:	9d 81       	ldd	r25, Y+5	; 0x05
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	69 f0       	breq	.+26     	; 0xc8e <DIO_SetPinValue+0x158>
     c74:	5f c0       	rjmp	.+190    	; 0xd34 <DIO_SetPinValue+0x1fe>
     c76:	2c 81       	ldd	r18, Y+4	; 0x04
     c78:	3d 81       	ldd	r19, Y+5	; 0x05
     c7a:	22 30       	cpi	r18, 0x02	; 2
     c7c:	31 05       	cpc	r19, r1
     c7e:	89 f1       	breq	.+98     	; 0xce2 <DIO_SetPinValue+0x1ac>
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	9d 81       	ldd	r25, Y+5	; 0x05
     c84:	83 30       	cpi	r24, 0x03	; 3
     c86:	91 05       	cpc	r25, r1
     c88:	09 f4       	brne	.+2      	; 0xc8c <DIO_SetPinValue+0x156>
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <DIO_SetPinValue+0x1d6>
     c8c:	53 c0       	rjmp	.+166    	; 0xd34 <DIO_SetPinValue+0x1fe>
			{
				case DIO_u8PORTA: CLR_BIT(DIO_u8PORTA_REG,u8PinIdCopy); break;
     c8e:	ab e3       	ldi	r26, 0x3B	; 59
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	eb e3       	ldi	r30, 0x3B	; 59
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_SetPinValue+0x176>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <DIO_SetPinValue+0x172>
     cb0:	80 95       	com	r24
     cb2:	84 23       	and	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	3e c0       	rjmp	.+124    	; 0xd34 <DIO_SetPinValue+0x1fe>
				case DIO_u8PORTB: CLR_BIT(DIO_u8PORTB_REG,u8PinIdCopy); break;
     cb8:	a8 e3       	ldi	r26, 0x38	; 56
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e8 e3       	ldi	r30, 0x38	; 56
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_SetPinValue+0x1a0>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_SetPinValue+0x19c>
     cda:	80 95       	com	r24
     cdc:	84 23       	and	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	29 c0       	rjmp	.+82     	; 0xd34 <DIO_SetPinValue+0x1fe>
				case DIO_u8PORTC: CLR_BIT(DIO_u8PORTC_REG,u8PinIdCopy); break;
     ce2:	a5 e3       	ldi	r26, 0x35	; 53
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e5 e3       	ldi	r30, 0x35	; 53
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <DIO_SetPinValue+0x1ca>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <DIO_SetPinValue+0x1c6>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	14 c0       	rjmp	.+40     	; 0xd34 <DIO_SetPinValue+0x1fe>
				case DIO_u8PORTD: CLR_BIT(DIO_u8PORTD_REG,u8PinIdCopy); break;
     d0c:	a2 e3       	ldi	r26, 0x32	; 50
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e2 e3       	ldi	r30, 0x32	; 50
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <DIO_SetPinValue+0x1f4>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <DIO_SetPinValue+0x1f0>
     d2e:	80 95       	com	r24
     d30:	84 23       	and	r24, r20
     d32:	8c 93       	st	X, r24

	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
     d34:	27 96       	adiw	r28, 0x07	; 7
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <DIO_GetPinValue>:

extern u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <DIO_GetPinValue+0x6>
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <DIO_GetPinValue+0x8>
     d4e:	0f 92       	push	r0
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	8a 83       	std	Y+2, r24	; 0x02
     d56:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= DIO_u8PORTD) && (u8PinIdCopy <= DIO_u8PIN7))
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	84 30       	cpi	r24, 0x04	; 4
     d5c:	08 f0       	brcs	.+2      	; 0xd60 <DIO_GetPinValue+0x1a>
     d5e:	9e c0       	rjmp	.+316    	; 0xe9c <DIO_GetPinValue+0x156>
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	88 30       	cpi	r24, 0x08	; 8
     d64:	08 f0       	brcs	.+2      	; 0xd68 <DIO_GetPinValue+0x22>
     d66:	9a c0       	rjmp	.+308    	; 0xe9c <DIO_GetPinValue+0x156>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3d 83       	std	Y+5, r19	; 0x05
     d70:	2c 83       	std	Y+4, r18	; 0x04
     d72:	4c 81       	ldd	r20, Y+4	; 0x04
     d74:	5d 81       	ldd	r21, Y+5	; 0x05
     d76:	41 30       	cpi	r20, 0x01	; 1
     d78:	51 05       	cpc	r21, r1
     d7a:	b1 f1       	breq	.+108    	; 0xde8 <DIO_GetPinValue+0xa2>
     d7c:	8c 81       	ldd	r24, Y+4	; 0x04
     d7e:	9d 81       	ldd	r25, Y+5	; 0x05
     d80:	82 30       	cpi	r24, 0x02	; 2
     d82:	91 05       	cpc	r25, r1
     d84:	34 f4       	brge	.+12     	; 0xd92 <DIO_GetPinValue+0x4c>
     d86:	2c 81       	ldd	r18, Y+4	; 0x04
     d88:	3d 81       	ldd	r19, Y+5	; 0x05
     d8a:	21 15       	cp	r18, r1
     d8c:	31 05       	cpc	r19, r1
     d8e:	71 f0       	breq	.+28     	; 0xdac <DIO_GetPinValue+0x66>
     d90:	87 c0       	rjmp	.+270    	; 0xea0 <DIO_GetPinValue+0x15a>
     d92:	4c 81       	ldd	r20, Y+4	; 0x04
     d94:	5d 81       	ldd	r21, Y+5	; 0x05
     d96:	42 30       	cpi	r20, 0x02	; 2
     d98:	51 05       	cpc	r21, r1
     d9a:	09 f4       	brne	.+2      	; 0xd9e <DIO_GetPinValue+0x58>
     d9c:	43 c0       	rjmp	.+134    	; 0xe24 <DIO_GetPinValue+0xde>
     d9e:	8c 81       	ldd	r24, Y+4	; 0x04
     da0:	9d 81       	ldd	r25, Y+5	; 0x05
     da2:	83 30       	cpi	r24, 0x03	; 3
     da4:	91 05       	cpc	r25, r1
     da6:	09 f4       	brne	.+2      	; 0xdaa <DIO_GetPinValue+0x64>
     da8:	5b c0       	rjmp	.+182    	; 0xe60 <DIO_GetPinValue+0x11a>
     daa:	7a c0       	rjmp	.+244    	; 0xea0 <DIO_GetPinValue+0x15a>
		{
			case DIO_u8PORTA: u8ResultLocal= GET_BIT(DIO_u8PINA_REG,u8PinIdCopy); break;
     dac:	e9 e3       	ldi	r30, 0x39	; 57
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	48 2f       	mov	r20, r24
     db4:	50 e0       	ldi	r21, 0x00	; 0
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <DIO_GetPinValue+0x80>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	2a 95       	dec	r18
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <DIO_GetPinValue+0x7c>
     dca:	9a 01       	movw	r18, r20
     dcc:	28 23       	and	r18, r24
     dce:	39 23       	and	r19, r25
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	88 2f       	mov	r24, r24
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a9 01       	movw	r20, r18
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <DIO_GetPinValue+0x98>
     dda:	55 95       	asr	r21
     ddc:	47 95       	ror	r20
     dde:	8a 95       	dec	r24
     de0:	e2 f7       	brpl	.-8      	; 0xdda <DIO_GetPinValue+0x94>
     de2:	ca 01       	movw	r24, r20
     de4:	89 83       	std	Y+1, r24	; 0x01
     de6:	5c c0       	rjmp	.+184    	; 0xea0 <DIO_GetPinValue+0x15a>
			case DIO_u8PORTB: u8ResultLocal= GET_BIT(DIO_u8PINB_REG,u8PinIdCopy); break;
     de8:	e6 e3       	ldi	r30, 0x36	; 54
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	48 2f       	mov	r20, r24
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <DIO_GetPinValue+0xbc>
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	2a 95       	dec	r18
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <DIO_GetPinValue+0xb8>
     e06:	9a 01       	movw	r18, r20
     e08:	28 23       	and	r18, r24
     e0a:	39 23       	and	r19, r25
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	88 2f       	mov	r24, r24
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	a9 01       	movw	r20, r18
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <DIO_GetPinValue+0xd4>
     e16:	55 95       	asr	r21
     e18:	47 95       	ror	r20
     e1a:	8a 95       	dec	r24
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <DIO_GetPinValue+0xd0>
     e1e:	ca 01       	movw	r24, r20
     e20:	89 83       	std	Y+1, r24	; 0x01
     e22:	3e c0       	rjmp	.+124    	; 0xea0 <DIO_GetPinValue+0x15a>
			case DIO_u8PORTC: u8ResultLocal= GET_BIT(DIO_u8PINC_REG,u8PinIdCopy); break;
     e24:	e3 e3       	ldi	r30, 0x33	; 51
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <DIO_GetPinValue+0xf8>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	2a 95       	dec	r18
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <DIO_GetPinValue+0xf4>
     e42:	9a 01       	movw	r18, r20
     e44:	28 23       	and	r18, r24
     e46:	39 23       	and	r19, r25
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	88 2f       	mov	r24, r24
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	a9 01       	movw	r20, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <DIO_GetPinValue+0x110>
     e52:	55 95       	asr	r21
     e54:	47 95       	ror	r20
     e56:	8a 95       	dec	r24
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <DIO_GetPinValue+0x10c>
     e5a:	ca 01       	movw	r24, r20
     e5c:	89 83       	std	Y+1, r24	; 0x01
     e5e:	20 c0       	rjmp	.+64     	; 0xea0 <DIO_GetPinValue+0x15a>
			case DIO_u8PORTD: u8ResultLocal= GET_BIT(DIO_u8PIND_REG,u8PinIdCopy); break;
     e60:	e0 e3       	ldi	r30, 0x30	; 48
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	48 2f       	mov	r20, r24
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <DIO_GetPinValue+0x134>
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	2a 95       	dec	r18
     e7c:	e2 f7       	brpl	.-8      	; 0xe76 <DIO_GetPinValue+0x130>
     e7e:	9a 01       	movw	r18, r20
     e80:	28 23       	and	r18, r24
     e82:	39 23       	and	r19, r25
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	88 2f       	mov	r24, r24
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	a9 01       	movw	r20, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <DIO_GetPinValue+0x14c>
     e8e:	55 95       	asr	r21
     e90:	47 95       	ror	r20
     e92:	8a 95       	dec	r24
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <DIO_GetPinValue+0x148>
     e96:	ca 01       	movw	r24, r20
     e98:	89 83       	std	Y+1, r24	; 0x01
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <DIO_GetPinValue+0x15a>
	}

	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
     e9c:	8f ef       	ldi	r24, 0xFF	; 255
     e9e:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ResultLocal;
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <DIO_SetPinDirection>:

extern void DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	27 97       	sbiw	r28, 0x07	; 7
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
     ec6:	89 83       	std	Y+1, r24	; 0x01
     ec8:	6a 83       	std	Y+2, r22	; 0x02
     eca:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= DIO_u8PORTD) && (u8PinIdCopy <= DIO_u8PIN7))
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	84 30       	cpi	r24, 0x04	; 4
     ed0:	08 f0       	brcs	.+2      	; 0xed4 <DIO_SetPinDirection+0x22>
     ed2:	ee c0       	rjmp	.+476    	; 0x10b0 <DIO_SetPinDirection+0x1fe>
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	88 30       	cpi	r24, 0x08	; 8
     ed8:	08 f0       	brcs	.+2      	; 0xedc <DIO_SetPinDirection+0x2a>
     eda:	ea c0       	rjmp	.+468    	; 0x10b0 <DIO_SetPinDirection+0x1fe>
	{
		if ( u8PinDirCopy == DIO_u8OUTPUT )
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	8f 3f       	cpi	r24, 0xFF	; 255
     ee0:	09 f0       	breq	.+2      	; 0xee4 <DIO_SetPinDirection+0x32>
     ee2:	6f c0       	rjmp	.+222    	; 0xfc2 <DIO_SetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	3f 83       	std	Y+7, r19	; 0x07
     eec:	2e 83       	std	Y+6, r18	; 0x06
     eee:	8e 81       	ldd	r24, Y+6	; 0x06
     ef0:	9f 81       	ldd	r25, Y+7	; 0x07
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	91 05       	cpc	r25, r1
     ef6:	49 f1       	breq	.+82     	; 0xf4a <DIO_SetPinDirection+0x98>
     ef8:	2e 81       	ldd	r18, Y+6	; 0x06
     efa:	3f 81       	ldd	r19, Y+7	; 0x07
     efc:	22 30       	cpi	r18, 0x02	; 2
     efe:	31 05       	cpc	r19, r1
     f00:	2c f4       	brge	.+10     	; 0xf0c <DIO_SetPinDirection+0x5a>
     f02:	8e 81       	ldd	r24, Y+6	; 0x06
     f04:	9f 81       	ldd	r25, Y+7	; 0x07
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	61 f0       	breq	.+24     	; 0xf22 <DIO_SetPinDirection+0x70>
     f0a:	d2 c0       	rjmp	.+420    	; 0x10b0 <DIO_SetPinDirection+0x1fe>
     f0c:	2e 81       	ldd	r18, Y+6	; 0x06
     f0e:	3f 81       	ldd	r19, Y+7	; 0x07
     f10:	22 30       	cpi	r18, 0x02	; 2
     f12:	31 05       	cpc	r19, r1
     f14:	71 f1       	breq	.+92     	; 0xf72 <DIO_SetPinDirection+0xc0>
     f16:	8e 81       	ldd	r24, Y+6	; 0x06
     f18:	9f 81       	ldd	r25, Y+7	; 0x07
     f1a:	83 30       	cpi	r24, 0x03	; 3
     f1c:	91 05       	cpc	r25, r1
     f1e:	e9 f1       	breq	.+122    	; 0xf9a <DIO_SetPinDirection+0xe8>
     f20:	c7 c0       	rjmp	.+398    	; 0x10b0 <DIO_SetPinDirection+0x1fe>
			{
				case DIO_u8PORTA: SET_BIT(DIO_u8DDRA_REG,u8PinIdCopy); break;
     f22:	aa e3       	ldi	r26, 0x3A	; 58
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	ea e3       	ldi	r30, 0x3A	; 58
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	48 2f       	mov	r20, r24
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	02 2e       	mov	r0, r18
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <DIO_SetPinDirection+0x8e>
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	0a 94       	dec	r0
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <DIO_SetPinDirection+0x8a>
     f44:	84 2b       	or	r24, r20
     f46:	8c 93       	st	X, r24
     f48:	b3 c0       	rjmp	.+358    	; 0x10b0 <DIO_SetPinDirection+0x1fe>
				case DIO_u8PORTB: SET_BIT(DIO_u8DDRB_REG,u8PinIdCopy); break;
     f4a:	a7 e3       	ldi	r26, 0x37	; 55
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e7 e3       	ldi	r30, 0x37	; 55
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 2e       	mov	r0, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_SetPinDirection+0xb6>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_SetPinDirection+0xb2>
     f6c:	84 2b       	or	r24, r20
     f6e:	8c 93       	st	X, r24
     f70:	9f c0       	rjmp	.+318    	; 0x10b0 <DIO_SetPinDirection+0x1fe>
				case DIO_u8PORTC: SET_BIT(DIO_u8DDRC_REG,u8PinIdCopy); break;
     f72:	a4 e3       	ldi	r26, 0x34	; 52
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e4 e3       	ldi	r30, 0x34	; 52
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <DIO_SetPinDirection+0xde>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <DIO_SetPinDirection+0xda>
     f94:	84 2b       	or	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	8b c0       	rjmp	.+278    	; 0x10b0 <DIO_SetPinDirection+0x1fe>
				case DIO_u8PORTD: SET_BIT(DIO_u8DDRD_REG,u8PinIdCopy); break;
     f9a:	a1 e3       	ldi	r26, 0x31	; 49
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e1 e3       	ldi	r30, 0x31	; 49
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <DIO_SetPinDirection+0x106>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <DIO_SetPinDirection+0x102>
     fbc:	84 2b       	or	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	77 c0       	rjmp	.+238    	; 0x10b0 <DIO_SetPinDirection+0x1fe>
			}
		}

		else if ( u8PinDirCopy == DIO_u8INPUT )
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 23       	and	r24, r24
     fc6:	09 f0       	breq	.+2      	; 0xfca <DIO_SetPinDirection+0x118>
     fc8:	73 c0       	rjmp	.+230    	; 0x10b0 <DIO_SetPinDirection+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	3d 83       	std	Y+5, r19	; 0x05
     fd2:	2c 83       	std	Y+4, r18	; 0x04
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	9d 81       	ldd	r25, Y+5	; 0x05
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	91 05       	cpc	r25, r1
     fdc:	59 f1       	breq	.+86     	; 0x1034 <DIO_SetPinDirection+0x182>
     fde:	2c 81       	ldd	r18, Y+4	; 0x04
     fe0:	3d 81       	ldd	r19, Y+5	; 0x05
     fe2:	22 30       	cpi	r18, 0x02	; 2
     fe4:	31 05       	cpc	r19, r1
     fe6:	2c f4       	brge	.+10     	; 0xff2 <DIO_SetPinDirection+0x140>
     fe8:	8c 81       	ldd	r24, Y+4	; 0x04
     fea:	9d 81       	ldd	r25, Y+5	; 0x05
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	69 f0       	breq	.+26     	; 0x100a <DIO_SetPinDirection+0x158>
     ff0:	5f c0       	rjmp	.+190    	; 0x10b0 <DIO_SetPinDirection+0x1fe>
     ff2:	2c 81       	ldd	r18, Y+4	; 0x04
     ff4:	3d 81       	ldd	r19, Y+5	; 0x05
     ff6:	22 30       	cpi	r18, 0x02	; 2
     ff8:	31 05       	cpc	r19, r1
     ffa:	89 f1       	breq	.+98     	; 0x105e <DIO_SetPinDirection+0x1ac>
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    1000:	83 30       	cpi	r24, 0x03	; 3
    1002:	91 05       	cpc	r25, r1
    1004:	09 f4       	brne	.+2      	; 0x1008 <DIO_SetPinDirection+0x156>
    1006:	40 c0       	rjmp	.+128    	; 0x1088 <DIO_SetPinDirection+0x1d6>
    1008:	53 c0       	rjmp	.+166    	; 0x10b0 <DIO_SetPinDirection+0x1fe>
			{
				case DIO_u8PORTA: CLR_BIT(DIO_u8DDRA_REG,u8PinIdCopy); break;
    100a:	aa e3       	ldi	r26, 0x3A	; 58
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	ea e3       	ldi	r30, 0x3A	; 58
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <DIO_SetPinDirection+0x176>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <DIO_SetPinDirection+0x172>
    102c:	80 95       	com	r24
    102e:	84 23       	and	r24, r20
    1030:	8c 93       	st	X, r24
    1032:	3e c0       	rjmp	.+124    	; 0x10b0 <DIO_SetPinDirection+0x1fe>
				case DIO_u8PORTB: CLR_BIT(DIO_u8DDRB_REG,u8PinIdCopy); break;
    1034:	a7 e3       	ldi	r26, 0x37	; 55
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e7 e3       	ldi	r30, 0x37	; 55
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <DIO_SetPinDirection+0x1a0>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <DIO_SetPinDirection+0x19c>
    1056:	80 95       	com	r24
    1058:	84 23       	and	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	29 c0       	rjmp	.+82     	; 0x10b0 <DIO_SetPinDirection+0x1fe>
				case DIO_u8PORTC: CLR_BIT(DIO_u8DDRC_REG,u8PinIdCopy); break;
    105e:	a4 e3       	ldi	r26, 0x34	; 52
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e4 e3       	ldi	r30, 0x34	; 52
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	02 2e       	mov	r0, r18
    1076:	02 c0       	rjmp	.+4      	; 0x107c <DIO_SetPinDirection+0x1ca>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	0a 94       	dec	r0
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <DIO_SetPinDirection+0x1c6>
    1080:	80 95       	com	r24
    1082:	84 23       	and	r24, r20
    1084:	8c 93       	st	X, r24
    1086:	14 c0       	rjmp	.+40     	; 0x10b0 <DIO_SetPinDirection+0x1fe>
				case DIO_u8PORTD: CLR_BIT(DIO_u8DDRD_REG,u8PinIdCopy); break;
    1088:	a1 e3       	ldi	r26, 0x31	; 49
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e1 e3       	ldi	r30, 0x31	; 49
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 2e       	mov	r0, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <DIO_SetPinDirection+0x1f4>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <DIO_SetPinDirection+0x1f0>
    10aa:	80 95       	com	r24
    10ac:	84 23       	and	r24, r20
    10ae:	8c 93       	st	X, r24

	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
    10b0:	27 96       	adiw	r28, 0x07	; 7
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <DIO_SetPortDirection>:


/* IO Ports */
extern void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <DIO_SetPortDirection+0x6>
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <DIO_SetPortDirection+0x8>
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	89 83       	std	Y+1, r24	; 0x01
    10d0:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	3c 83       	std	Y+4, r19	; 0x04
    10da:	2b 83       	std	Y+3, r18	; 0x03
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	91 05       	cpc	r25, r1
    10e4:	d1 f0       	breq	.+52     	; 0x111a <DIO_SetPortDirection+0x58>
    10e6:	2b 81       	ldd	r18, Y+3	; 0x03
    10e8:	3c 81       	ldd	r19, Y+4	; 0x04
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	2c f4       	brge	.+10     	; 0x10fa <DIO_SetPortDirection+0x38>
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	61 f0       	breq	.+24     	; 0x1110 <DIO_SetPortDirection+0x4e>
    10f8:	1e c0       	rjmp	.+60     	; 0x1136 <DIO_SetPortDirection+0x74>
    10fa:	2b 81       	ldd	r18, Y+3	; 0x03
    10fc:	3c 81       	ldd	r19, Y+4	; 0x04
    10fe:	22 30       	cpi	r18, 0x02	; 2
    1100:	31 05       	cpc	r19, r1
    1102:	81 f0       	breq	.+32     	; 0x1124 <DIO_SetPortDirection+0x62>
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	9c 81       	ldd	r25, Y+4	; 0x04
    1108:	83 30       	cpi	r24, 0x03	; 3
    110a:	91 05       	cpc	r25, r1
    110c:	81 f0       	breq	.+32     	; 0x112e <DIO_SetPortDirection+0x6c>
    110e:	13 c0       	rjmp	.+38     	; 0x1136 <DIO_SetPortDirection+0x74>
	{
		case     DIO_u8PORTA: DIO_u8DDRA_REG = u8PortDir; break;
    1110:	ea e3       	ldi	r30, 0x3A	; 58
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	80 83       	st	Z, r24
    1118:	0e c0       	rjmp	.+28     	; 0x1136 <DIO_SetPortDirection+0x74>
		case     DIO_u8PORTB: DIO_u8DDRB_REG = u8PortDir; break;
    111a:	e7 e3       	ldi	r30, 0x37	; 55
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	80 83       	st	Z, r24
    1122:	09 c0       	rjmp	.+18     	; 0x1136 <DIO_SetPortDirection+0x74>
		case     DIO_u8PORTC: DIO_u8DDRC_REG = u8PortDir; break;
    1124:	e4 e3       	ldi	r30, 0x34	; 52
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	80 83       	st	Z, r24
    112c:	04 c0       	rjmp	.+8      	; 0x1136 <DIO_SetPortDirection+0x74>
		case     DIO_u8PORTD: DIO_u8DDRD_REG = u8PortDir; break;
    112e:	e1 e3       	ldi	r30, 0x31	; 49
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	80 83       	st	Z, r24
		default: /* Wrong Port ID */       break;
	}
}
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <DIO_SetPortValue>:

extern void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	00 d0       	rcall	.+0      	; 0x114a <DIO_SetPortValue+0x6>
    114a:	00 d0       	rcall	.+0      	; 0x114c <DIO_SetPortValue+0x8>
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	3c 83       	std	Y+4, r19	; 0x04
    115c:	2b 83       	std	Y+3, r18	; 0x03
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	9c 81       	ldd	r25, Y+4	; 0x04
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	91 05       	cpc	r25, r1
    1166:	d1 f0       	breq	.+52     	; 0x119c <DIO_SetPortValue+0x58>
    1168:	2b 81       	ldd	r18, Y+3	; 0x03
    116a:	3c 81       	ldd	r19, Y+4	; 0x04
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	2c f4       	brge	.+10     	; 0x117c <DIO_SetPortValue+0x38>
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	61 f0       	breq	.+24     	; 0x1192 <DIO_SetPortValue+0x4e>
    117a:	1e c0       	rjmp	.+60     	; 0x11b8 <DIO_SetPortValue+0x74>
    117c:	2b 81       	ldd	r18, Y+3	; 0x03
    117e:	3c 81       	ldd	r19, Y+4	; 0x04
    1180:	22 30       	cpi	r18, 0x02	; 2
    1182:	31 05       	cpc	r19, r1
    1184:	81 f0       	breq	.+32     	; 0x11a6 <DIO_SetPortValue+0x62>
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	83 30       	cpi	r24, 0x03	; 3
    118c:	91 05       	cpc	r25, r1
    118e:	81 f0       	breq	.+32     	; 0x11b0 <DIO_SetPortValue+0x6c>
    1190:	13 c0       	rjmp	.+38     	; 0x11b8 <DIO_SetPortValue+0x74>
	{
		case     DIO_u8PORTA: DIO_u8PORTA_REG = u8PortVal; break;
    1192:	eb e3       	ldi	r30, 0x3B	; 59
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	80 83       	st	Z, r24
    119a:	0e c0       	rjmp	.+28     	; 0x11b8 <DIO_SetPortValue+0x74>
		case     DIO_u8PORTB: DIO_u8PORTB_REG = u8PortVal; break;
    119c:	e8 e3       	ldi	r30, 0x38	; 56
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	80 83       	st	Z, r24
    11a4:	09 c0       	rjmp	.+18     	; 0x11b8 <DIO_SetPortValue+0x74>
		case     DIO_u8PORTC: DIO_u8PORTC_REG = u8PortVal; break;
    11a6:	e5 e3       	ldi	r30, 0x35	; 53
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	80 83       	st	Z, r24
    11ae:	04 c0       	rjmp	.+8      	; 0x11b8 <DIO_SetPortValue+0x74>
		case     DIO_u8PORTD: DIO_u8PORTD_REG = u8PortVal; break;
    11b0:	e2 e3       	ldi	r30, 0x32	; 50
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	80 83       	st	Z, r24
		default: /* Wrong Port ID */        break;
	}
}
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <DIO_SetPortValue_AND>:
extern void DIO_SetPortValue_AND (u8 u8PortId, u8 u8PortVal,u8 mask)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <DIO_SetPortValue_AND+0x6>
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <DIO_SetPortValue_AND+0x8>
    11ce:	0f 92       	push	r0
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	89 83       	std	Y+1, r24	; 0x01
    11d6:	6a 83       	std	Y+2, r22	; 0x02
    11d8:	4b 83       	std	Y+3, r20	; 0x03
	/* Check on the Required PORT Number */
	switch (u8PortId)
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	3d 83       	std	Y+5, r19	; 0x05
    11e2:	2c 83       	std	Y+4, r18	; 0x04
    11e4:	8c 81       	ldd	r24, Y+4	; 0x04
    11e6:	9d 81       	ldd	r25, Y+5	; 0x05
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	91 05       	cpc	r25, r1
    11ec:	01 f1       	breq	.+64     	; 0x122e <DIO_SetPortValue_AND+0x68>
    11ee:	2c 81       	ldd	r18, Y+4	; 0x04
    11f0:	3d 81       	ldd	r19, Y+5	; 0x05
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	2c f4       	brge	.+10     	; 0x1202 <DIO_SetPortValue_AND+0x3c>
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	9d 81       	ldd	r25, Y+5	; 0x05
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	61 f0       	breq	.+24     	; 0x1218 <DIO_SetPortValue_AND+0x52>
    1200:	36 c0       	rjmp	.+108    	; 0x126e <DIO_SetPortValue_AND+0xa8>
    1202:	2c 81       	ldd	r18, Y+4	; 0x04
    1204:	3d 81       	ldd	r19, Y+5	; 0x05
    1206:	22 30       	cpi	r18, 0x02	; 2
    1208:	31 05       	cpc	r19, r1
    120a:	e1 f0       	breq	.+56     	; 0x1244 <DIO_SetPortValue_AND+0x7e>
    120c:	8c 81       	ldd	r24, Y+4	; 0x04
    120e:	9d 81       	ldd	r25, Y+5	; 0x05
    1210:	83 30       	cpi	r24, 0x03	; 3
    1212:	91 05       	cpc	r25, r1
    1214:	11 f1       	breq	.+68     	; 0x125a <DIO_SetPortValue_AND+0x94>
    1216:	2b c0       	rjmp	.+86     	; 0x126e <DIO_SetPortValue_AND+0xa8>
	{
		case     DIO_u8PORTA: DIO_u8PORTA_REG = (DIO_u8PORTA_REG &  u8PortVal) | mask; break;
    1218:	ab e3       	ldi	r26, 0x3B	; 59
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	eb e3       	ldi	r30, 0x3B	; 59
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	90 81       	ld	r25, Z
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	98 23       	and	r25, r24
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	89 2b       	or	r24, r25
    122a:	8c 93       	st	X, r24
    122c:	20 c0       	rjmp	.+64     	; 0x126e <DIO_SetPortValue_AND+0xa8>
		case     DIO_u8PORTB: DIO_u8PORTB_REG = (DIO_u8PORTB_REG &  u8PortVal) | mask; break;
    122e:	a8 e3       	ldi	r26, 0x38	; 56
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e8 e3       	ldi	r30, 0x38	; 56
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	90 81       	ld	r25, Z
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	98 23       	and	r25, r24
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	89 2b       	or	r24, r25
    1240:	8c 93       	st	X, r24
    1242:	15 c0       	rjmp	.+42     	; 0x126e <DIO_SetPortValue_AND+0xa8>
		case     DIO_u8PORTC: DIO_u8PORTC_REG = (DIO_u8PORTC_REG &  u8PortVal) | mask; break;
    1244:	a5 e3       	ldi	r26, 0x35	; 53
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e5 e3       	ldi	r30, 0x35	; 53
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	90 81       	ld	r25, Z
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	98 23       	and	r25, r24
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	89 2b       	or	r24, r25
    1256:	8c 93       	st	X, r24
    1258:	0a c0       	rjmp	.+20     	; 0x126e <DIO_SetPortValue_AND+0xa8>
		case     DIO_u8PORTD: DIO_u8PORTD_REG = (DIO_u8PORTD_REG &  u8PortVal) | mask; break;
    125a:	a2 e3       	ldi	r26, 0x32	; 50
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e2 e3       	ldi	r30, 0x32	; 50
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	90 81       	ld	r25, Z
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	98 23       	and	r25, r24
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	89 2b       	or	r24, r25
    126c:	8c 93       	st	X, r24
		default: /* Wrong Port ID */        break;
	}
}
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <LCD_vidInit>:
#include "LCD.h"
#include "LCD_cfg.h"
#include "LCD_Lcfg.h"

void LCD_vidInit(void)
{
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			DIO_SetPortDirection(LCD_DATA_PORT,0xF0);

		#else
			DIO_SetPortDirection(LCD_DATA_PORT,0x0F);
    1286:	83 e0       	ldi	r24, 0x03	; 3
    1288:	6f e0       	ldi	r22, 0x0F	; 15
    128a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <DIO_SetPortDirection>
			DIO_SetPinDirection(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8OUTPUT);
    128e:	83 e0       	ldi	r24, 0x03	; 3
    1290:	66 e0       	ldi	r22, 0x06	; 6
    1292:	4f ef       	ldi	r20, 0xFF	; 255
    1294:	0e 94 59 07 	call	0xeb2	; 0xeb2 <DIO_SetPinDirection>
			DIO_SetPinDirection(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_u8OUTPUT);
    1298:	83 e0       	ldi	r24, 0x03	; 3
    129a:	64 e0       	ldi	r22, 0x04	; 4
    129c:	4f ef       	ldi	r20, 0xFF	; 255
    129e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <DIO_SetPinDirection>
			DIO_SetPinDirection(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_u8OUTPUT);
    12a2:	83 e0       	ldi	r24, 0x03	; 3
    12a4:	65 e0       	ldi	r22, 0x05	; 5
    12a6:	4f ef       	ldi	r20, 0xFF	; 255
    12a8:	0e 94 59 07 	call	0xeb2	; 0xeb2 <DIO_SetPinDirection>
		#endif
		LCD_vidSendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    12ac:	82 e0       	ldi	r24, 0x02	; 2
    12ae:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_vidSendCommand>
		LCD_vidSendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    12b2:	88 e2       	ldi	r24, 0x28	; 40
    12b4:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_vidSendCommand>
	#elif (DATA_BITS_MODE == 8)
		DIO_SetPortDirection(LCD_DATA_PORT,0xFF);
		LCD_vidSendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif

	LCD_vidSendCommand(CURSOR_OFF); /* cursor off */
    12b8:	8c e0       	ldi	r24, 0x0C	; 12
    12ba:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_vidSendCommand>
	LCD_vidSendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_vidSendCommand>
}
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <LCD_vidSendCommand>:

void LCD_vidSendCommand(u8 u8CmdCpy)
{
    12ca:	0f 93       	push	r16
    12cc:	1f 93       	push	r17
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	c3 56       	subi	r28, 0x63	; 99
    12d8:	d0 40       	sbci	r29, 0x00	; 0
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	fe 01       	movw	r30, r28
    12e6:	ed 59       	subi	r30, 0x9D	; 157
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	80 83       	st	Z, r24
	/* Reset RS pin */
	DIO_SetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_u8LOW);
    12ec:	83 e0       	ldi	r24, 0x03	; 3
    12ee:	64 e0       	ldi	r22, 0x04	; 4
    12f0:	40 e0       	ldi	r20, 0x00	; 0
    12f2:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinValue>
	/* Reset R/W pin*/
	DIO_SetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_u8LOW);
    12f6:	83 e0       	ldi	r24, 0x03	; 3
    12f8:	65 e0       	ldi	r22, 0x05	; 5
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinValue>
    1300:	fe 01       	movw	r30, r28
    1302:	e1 5a       	subi	r30, 0xA1	; 161
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a0 e8       	ldi	r26, 0x80	; 128
    130c:	bf e3       	ldi	r27, 0x3F	; 63
    130e:	80 83       	st	Z, r24
    1310:	91 83       	std	Z+1, r25	; 0x01
    1312:	a2 83       	std	Z+2, r26	; 0x02
    1314:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1316:	8e 01       	movw	r16, r28
    1318:	05 5a       	subi	r16, 0xA5	; 165
    131a:	1f 4f       	sbci	r17, 0xFF	; 255
    131c:	fe 01       	movw	r30, r28
    131e:	e1 5a       	subi	r30, 0xA1	; 161
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	60 81       	ld	r22, Z
    1324:	71 81       	ldd	r23, Z+1	; 0x01
    1326:	82 81       	ldd	r24, Z+2	; 0x02
    1328:	93 81       	ldd	r25, Z+3	; 0x03
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e8       	ldi	r19, 0x80	; 128
    132e:	4b e3       	ldi	r20, 0x3B	; 59
    1330:	55 e4       	ldi	r21, 0x45	; 69
    1332:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	f8 01       	movw	r30, r16
    133c:	80 83       	st	Z, r24
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	a2 83       	std	Z+2, r26	; 0x02
    1342:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1344:	fe 01       	movw	r30, r28
    1346:	e5 5a       	subi	r30, 0xA5	; 165
    1348:	ff 4f       	sbci	r31, 0xFF	; 255
    134a:	60 81       	ld	r22, Z
    134c:	71 81       	ldd	r23, Z+1	; 0x01
    134e:	82 81       	ldd	r24, Z+2	; 0x02
    1350:	93 81       	ldd	r25, Z+3	; 0x03
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e8       	ldi	r20, 0x80	; 128
    1358:	5f e3       	ldi	r21, 0x3F	; 63
    135a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    135e:	88 23       	and	r24, r24
    1360:	44 f4       	brge	.+16     	; 0x1372 <LCD_vidSendCommand+0xa8>
		__ticks = 1;
    1362:	fe 01       	movw	r30, r28
    1364:	e7 5a       	subi	r30, 0xA7	; 167
    1366:	ff 4f       	sbci	r31, 0xFF	; 255
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	91 83       	std	Z+1, r25	; 0x01
    136e:	80 83       	st	Z, r24
    1370:	64 c0       	rjmp	.+200    	; 0x143a <LCD_vidSendCommand+0x170>
	else if (__tmp > 65535)
    1372:	fe 01       	movw	r30, r28
    1374:	e5 5a       	subi	r30, 0xA5	; 165
    1376:	ff 4f       	sbci	r31, 0xFF	; 255
    1378:	60 81       	ld	r22, Z
    137a:	71 81       	ldd	r23, Z+1	; 0x01
    137c:	82 81       	ldd	r24, Z+2	; 0x02
    137e:	93 81       	ldd	r25, Z+3	; 0x03
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	3f ef       	ldi	r19, 0xFF	; 255
    1384:	4f e7       	ldi	r20, 0x7F	; 127
    1386:	57 e4       	ldi	r21, 0x47	; 71
    1388:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    138c:	18 16       	cp	r1, r24
    138e:	0c f0       	brlt	.+2      	; 0x1392 <LCD_vidSendCommand+0xc8>
    1390:	43 c0       	rjmp	.+134    	; 0x1418 <LCD_vidSendCommand+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1392:	fe 01       	movw	r30, r28
    1394:	e1 5a       	subi	r30, 0xA1	; 161
    1396:	ff 4f       	sbci	r31, 0xFF	; 255
    1398:	60 81       	ld	r22, Z
    139a:	71 81       	ldd	r23, Z+1	; 0x01
    139c:	82 81       	ldd	r24, Z+2	; 0x02
    139e:	93 81       	ldd	r25, Z+3	; 0x03
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e2       	ldi	r20, 0x20	; 32
    13a6:	51 e4       	ldi	r21, 0x41	; 65
    13a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	8e 01       	movw	r16, r28
    13b2:	07 5a       	subi	r16, 0xA7	; 167
    13b4:	1f 4f       	sbci	r17, 0xFF	; 255
    13b6:	bc 01       	movw	r22, r24
    13b8:	cd 01       	movw	r24, r26
    13ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	f8 01       	movw	r30, r16
    13c4:	91 83       	std	Z+1, r25	; 0x01
    13c6:	80 83       	st	Z, r24
    13c8:	1f c0       	rjmp	.+62     	; 0x1408 <LCD_vidSendCommand+0x13e>
    13ca:	fe 01       	movw	r30, r28
    13cc:	e9 5a       	subi	r30, 0xA9	; 169
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	8c e2       	ldi	r24, 0x2C	; 44
    13d2:	91 e0       	ldi	r25, 0x01	; 1
    13d4:	91 83       	std	Z+1, r25	; 0x01
    13d6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13d8:	fe 01       	movw	r30, r28
    13da:	e9 5a       	subi	r30, 0xA9	; 169
    13dc:	ff 4f       	sbci	r31, 0xFF	; 255
    13de:	80 81       	ld	r24, Z
    13e0:	91 81       	ldd	r25, Z+1	; 0x01
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <LCD_vidSendCommand+0x118>
    13e6:	fe 01       	movw	r30, r28
    13e8:	e9 5a       	subi	r30, 0xA9	; 169
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	91 83       	std	Z+1, r25	; 0x01
    13ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f0:	de 01       	movw	r26, r28
    13f2:	a7 5a       	subi	r26, 0xA7	; 167
    13f4:	bf 4f       	sbci	r27, 0xFF	; 255
    13f6:	fe 01       	movw	r30, r28
    13f8:	e7 5a       	subi	r30, 0xA7	; 167
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	80 81       	ld	r24, Z
    13fe:	91 81       	ldd	r25, Z+1	; 0x01
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	11 96       	adiw	r26, 0x01	; 1
    1404:	9c 93       	st	X, r25
    1406:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1408:	fe 01       	movw	r30, r28
    140a:	e7 5a       	subi	r30, 0xA7	; 167
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	80 81       	ld	r24, Z
    1410:	91 81       	ldd	r25, Z+1	; 0x01
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	d1 f6       	brne	.-76     	; 0x13ca <LCD_vidSendCommand+0x100>
    1416:	27 c0       	rjmp	.+78     	; 0x1466 <LCD_vidSendCommand+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1418:	8e 01       	movw	r16, r28
    141a:	07 5a       	subi	r16, 0xA7	; 167
    141c:	1f 4f       	sbci	r17, 0xFF	; 255
    141e:	fe 01       	movw	r30, r28
    1420:	e5 5a       	subi	r30, 0xA5	; 165
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	60 81       	ld	r22, Z
    1426:	71 81       	ldd	r23, Z+1	; 0x01
    1428:	82 81       	ldd	r24, Z+2	; 0x02
    142a:	93 81       	ldd	r25, Z+3	; 0x03
    142c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	f8 01       	movw	r30, r16
    1436:	91 83       	std	Z+1, r25	; 0x01
    1438:	80 83       	st	Z, r24
    143a:	de 01       	movw	r26, r28
    143c:	ab 5a       	subi	r26, 0xAB	; 171
    143e:	bf 4f       	sbci	r27, 0xFF	; 255
    1440:	fe 01       	movw	r30, r28
    1442:	e7 5a       	subi	r30, 0xA7	; 167
    1444:	ff 4f       	sbci	r31, 0xFF	; 255
    1446:	80 81       	ld	r24, Z
    1448:	91 81       	ldd	r25, Z+1	; 0x01
    144a:	8d 93       	st	X+, r24
    144c:	9c 93       	st	X, r25
    144e:	fe 01       	movw	r30, r28
    1450:	eb 5a       	subi	r30, 0xAB	; 171
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	80 81       	ld	r24, Z
    1456:	91 81       	ldd	r25, Z+1	; 0x01
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	f1 f7       	brne	.-4      	; 0x1458 <LCD_vidSendCommand+0x18e>
    145c:	fe 01       	movw	r30, r28
    145e:	eb 5a       	subi	r30, 0xAB	; 171
    1460:	ff 4f       	sbci	r31, 0xFF	; 255
    1462:	91 83       	std	Z+1, r25	; 0x01
    1464:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	/* Set E to HIGH  */
	DIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8HIGH);
    1466:	83 e0       	ldi	r24, 0x03	; 3
    1468:	66 e0       	ldi	r22, 0x06	; 6
    146a:	41 e0       	ldi	r20, 0x01	; 1
    146c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinValue>
    1470:	fe 01       	movw	r30, r28
    1472:	ef 5a       	subi	r30, 0xAF	; 175
    1474:	ff 4f       	sbci	r31, 0xFF	; 255
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	a0 e8       	ldi	r26, 0x80	; 128
    147c:	bf e3       	ldi	r27, 0x3F	; 63
    147e:	80 83       	st	Z, r24
    1480:	91 83       	std	Z+1, r25	; 0x01
    1482:	a2 83       	std	Z+2, r26	; 0x02
    1484:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1486:	8e 01       	movw	r16, r28
    1488:	03 5b       	subi	r16, 0xB3	; 179
    148a:	1f 4f       	sbci	r17, 0xFF	; 255
    148c:	fe 01       	movw	r30, r28
    148e:	ef 5a       	subi	r30, 0xAF	; 175
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	60 81       	ld	r22, Z
    1494:	71 81       	ldd	r23, Z+1	; 0x01
    1496:	82 81       	ldd	r24, Z+2	; 0x02
    1498:	93 81       	ldd	r25, Z+3	; 0x03
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e8       	ldi	r19, 0x80	; 128
    149e:	4b e3       	ldi	r20, 0x3B	; 59
    14a0:	55 e4       	ldi	r21, 0x45	; 69
    14a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	f8 01       	movw	r30, r16
    14ac:	80 83       	st	Z, r24
    14ae:	91 83       	std	Z+1, r25	; 0x01
    14b0:	a2 83       	std	Z+2, r26	; 0x02
    14b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14b4:	fe 01       	movw	r30, r28
    14b6:	e3 5b       	subi	r30, 0xB3	; 179
    14b8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ba:	60 81       	ld	r22, Z
    14bc:	71 81       	ldd	r23, Z+1	; 0x01
    14be:	82 81       	ldd	r24, Z+2	; 0x02
    14c0:	93 81       	ldd	r25, Z+3	; 0x03
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 e8       	ldi	r20, 0x80	; 128
    14c8:	5f e3       	ldi	r21, 0x3F	; 63
    14ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14ce:	88 23       	and	r24, r24
    14d0:	44 f4       	brge	.+16     	; 0x14e2 <LCD_vidSendCommand+0x218>
		__ticks = 1;
    14d2:	fe 01       	movw	r30, r28
    14d4:	e5 5b       	subi	r30, 0xB5	; 181
    14d6:	ff 4f       	sbci	r31, 0xFF	; 255
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	91 83       	std	Z+1, r25	; 0x01
    14de:	80 83       	st	Z, r24
    14e0:	64 c0       	rjmp	.+200    	; 0x15aa <LCD_vidSendCommand+0x2e0>
	else if (__tmp > 65535)
    14e2:	fe 01       	movw	r30, r28
    14e4:	e3 5b       	subi	r30, 0xB3	; 179
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
    14e8:	60 81       	ld	r22, Z
    14ea:	71 81       	ldd	r23, Z+1	; 0x01
    14ec:	82 81       	ldd	r24, Z+2	; 0x02
    14ee:	93 81       	ldd	r25, Z+3	; 0x03
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	3f ef       	ldi	r19, 0xFF	; 255
    14f4:	4f e7       	ldi	r20, 0x7F	; 127
    14f6:	57 e4       	ldi	r21, 0x47	; 71
    14f8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14fc:	18 16       	cp	r1, r24
    14fe:	0c f0       	brlt	.+2      	; 0x1502 <LCD_vidSendCommand+0x238>
    1500:	43 c0       	rjmp	.+134    	; 0x1588 <LCD_vidSendCommand+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1502:	fe 01       	movw	r30, r28
    1504:	ef 5a       	subi	r30, 0xAF	; 175
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	60 81       	ld	r22, Z
    150a:	71 81       	ldd	r23, Z+1	; 0x01
    150c:	82 81       	ldd	r24, Z+2	; 0x02
    150e:	93 81       	ldd	r25, Z+3	; 0x03
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	40 e2       	ldi	r20, 0x20	; 32
    1516:	51 e4       	ldi	r21, 0x41	; 65
    1518:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	8e 01       	movw	r16, r28
    1522:	05 5b       	subi	r16, 0xB5	; 181
    1524:	1f 4f       	sbci	r17, 0xFF	; 255
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	f8 01       	movw	r30, r16
    1534:	91 83       	std	Z+1, r25	; 0x01
    1536:	80 83       	st	Z, r24
    1538:	1f c0       	rjmp	.+62     	; 0x1578 <LCD_vidSendCommand+0x2ae>
    153a:	fe 01       	movw	r30, r28
    153c:	e7 5b       	subi	r30, 0xB7	; 183
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	8c e2       	ldi	r24, 0x2C	; 44
    1542:	91 e0       	ldi	r25, 0x01	; 1
    1544:	91 83       	std	Z+1, r25	; 0x01
    1546:	80 83       	st	Z, r24
    1548:	fe 01       	movw	r30, r28
    154a:	e7 5b       	subi	r30, 0xB7	; 183
    154c:	ff 4f       	sbci	r31, 0xFF	; 255
    154e:	80 81       	ld	r24, Z
    1550:	91 81       	ldd	r25, Z+1	; 0x01
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <LCD_vidSendCommand+0x288>
    1556:	fe 01       	movw	r30, r28
    1558:	e7 5b       	subi	r30, 0xB7	; 183
    155a:	ff 4f       	sbci	r31, 0xFF	; 255
    155c:	91 83       	std	Z+1, r25	; 0x01
    155e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1560:	de 01       	movw	r26, r28
    1562:	a5 5b       	subi	r26, 0xB5	; 181
    1564:	bf 4f       	sbci	r27, 0xFF	; 255
    1566:	fe 01       	movw	r30, r28
    1568:	e5 5b       	subi	r30, 0xB5	; 181
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	80 81       	ld	r24, Z
    156e:	91 81       	ldd	r25, Z+1	; 0x01
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	11 96       	adiw	r26, 0x01	; 1
    1574:	9c 93       	st	X, r25
    1576:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1578:	fe 01       	movw	r30, r28
    157a:	e5 5b       	subi	r30, 0xB5	; 181
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	80 81       	ld	r24, Z
    1580:	91 81       	ldd	r25, Z+1	; 0x01
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	d1 f6       	brne	.-76     	; 0x153a <LCD_vidSendCommand+0x270>
    1586:	27 c0       	rjmp	.+78     	; 0x15d6 <LCD_vidSendCommand+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1588:	8e 01       	movw	r16, r28
    158a:	05 5b       	subi	r16, 0xB5	; 181
    158c:	1f 4f       	sbci	r17, 0xFF	; 255
    158e:	fe 01       	movw	r30, r28
    1590:	e3 5b       	subi	r30, 0xB3	; 179
    1592:	ff 4f       	sbci	r31, 0xFF	; 255
    1594:	60 81       	ld	r22, Z
    1596:	71 81       	ldd	r23, Z+1	; 0x01
    1598:	82 81       	ldd	r24, Z+2	; 0x02
    159a:	93 81       	ldd	r25, Z+3	; 0x03
    159c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	f8 01       	movw	r30, r16
    15a6:	91 83       	std	Z+1, r25	; 0x01
    15a8:	80 83       	st	Z, r24
    15aa:	de 01       	movw	r26, r28
    15ac:	a9 5b       	subi	r26, 0xB9	; 185
    15ae:	bf 4f       	sbci	r27, 0xFF	; 255
    15b0:	fe 01       	movw	r30, r28
    15b2:	e5 5b       	subi	r30, 0xB5	; 181
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	80 81       	ld	r24, Z
    15b8:	91 81       	ldd	r25, Z+1	; 0x01
    15ba:	8d 93       	st	X+, r24
    15bc:	9c 93       	st	X, r25
    15be:	fe 01       	movw	r30, r28
    15c0:	e9 5b       	subi	r30, 0xB9	; 185
    15c2:	ff 4f       	sbci	r31, 0xFF	; 255
    15c4:	80 81       	ld	r24, Z
    15c6:	91 81       	ldd	r25, Z+1	; 0x01
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <LCD_vidSendCommand+0x2fe>
    15cc:	fe 01       	movw	r30, r28
    15ce:	e9 5b       	subi	r30, 0xB9	; 185
    15d0:	ff 4f       	sbci	r31, 0xFF	; 255
    15d2:	91 83       	std	Z+1, r25	; 0x01
    15d4:	80 83       	st	Z, r24
	#if (DATA_BITS_MODE == 4)
		/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
	#ifdef UPPER_PORT_PINS
		DIO_SetPortValue_AND(LCD_DATA_PORT,0x0F,(u8CmdCpy & 0xF0));
	#else
		DIO_SetPortValue_AND(LCD_DATA_PORT,0xF0,((u8CmdCpy & 0xF0) >> 4));
    15d6:	fe 01       	movw	r30, r28
    15d8:	ed 59       	subi	r30, 0x9D	; 157
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	80 81       	ld	r24, Z
    15de:	98 2f       	mov	r25, r24
    15e0:	92 95       	swap	r25
    15e2:	9f 70       	andi	r25, 0x0F	; 15
    15e4:	83 e0       	ldi	r24, 0x03	; 3
    15e6:	60 ef       	ldi	r22, 0xF0	; 240
    15e8:	49 2f       	mov	r20, r25
    15ea:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_SetPortValue_AND>
    15ee:	fe 01       	movw	r30, r28
    15f0:	ed 5b       	subi	r30, 0xBD	; 189
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	a0 e8       	ldi	r26, 0x80	; 128
    15fa:	bf e3       	ldi	r27, 0x3F	; 63
    15fc:	80 83       	st	Z, r24
    15fe:	91 83       	std	Z+1, r25	; 0x01
    1600:	a2 83       	std	Z+2, r26	; 0x02
    1602:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1604:	8e 01       	movw	r16, r28
    1606:	01 5c       	subi	r16, 0xC1	; 193
    1608:	1f 4f       	sbci	r17, 0xFF	; 255
    160a:	fe 01       	movw	r30, r28
    160c:	ed 5b       	subi	r30, 0xBD	; 189
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	60 81       	ld	r22, Z
    1612:	71 81       	ldd	r23, Z+1	; 0x01
    1614:	82 81       	ldd	r24, Z+2	; 0x02
    1616:	93 81       	ldd	r25, Z+3	; 0x03
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e8       	ldi	r19, 0x80	; 128
    161c:	4b e3       	ldi	r20, 0x3B	; 59
    161e:	55 e4       	ldi	r21, 0x45	; 69
    1620:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	f8 01       	movw	r30, r16
    162a:	80 83       	st	Z, r24
    162c:	91 83       	std	Z+1, r25	; 0x01
    162e:	a2 83       	std	Z+2, r26	; 0x02
    1630:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1632:	fe 01       	movw	r30, r28
    1634:	ff 96       	adiw	r30, 0x3f	; 63
    1636:	60 81       	ld	r22, Z
    1638:	71 81       	ldd	r23, Z+1	; 0x01
    163a:	82 81       	ldd	r24, Z+2	; 0x02
    163c:	93 81       	ldd	r25, Z+3	; 0x03
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e8       	ldi	r20, 0x80	; 128
    1644:	5f e3       	ldi	r21, 0x3F	; 63
    1646:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    164a:	88 23       	and	r24, r24
    164c:	2c f4       	brge	.+10     	; 0x1658 <LCD_vidSendCommand+0x38e>
		__ticks = 1;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	9e af       	std	Y+62, r25	; 0x3e
    1654:	8d af       	std	Y+61, r24	; 0x3d
    1656:	46 c0       	rjmp	.+140    	; 0x16e4 <LCD_vidSendCommand+0x41a>
	else if (__tmp > 65535)
    1658:	fe 01       	movw	r30, r28
    165a:	ff 96       	adiw	r30, 0x3f	; 63
    165c:	60 81       	ld	r22, Z
    165e:	71 81       	ldd	r23, Z+1	; 0x01
    1660:	82 81       	ldd	r24, Z+2	; 0x02
    1662:	93 81       	ldd	r25, Z+3	; 0x03
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	3f ef       	ldi	r19, 0xFF	; 255
    1668:	4f e7       	ldi	r20, 0x7F	; 127
    166a:	57 e4       	ldi	r21, 0x47	; 71
    166c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1670:	18 16       	cp	r1, r24
    1672:	64 f5       	brge	.+88     	; 0x16cc <LCD_vidSendCommand+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1674:	fe 01       	movw	r30, r28
    1676:	ed 5b       	subi	r30, 0xBD	; 189
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	60 81       	ld	r22, Z
    167c:	71 81       	ldd	r23, Z+1	; 0x01
    167e:	82 81       	ldd	r24, Z+2	; 0x02
    1680:	93 81       	ldd	r25, Z+3	; 0x03
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e2       	ldi	r20, 0x20	; 32
    1688:	51 e4       	ldi	r21, 0x41	; 65
    168a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	bc 01       	movw	r22, r24
    1694:	cd 01       	movw	r24, r26
    1696:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	9e af       	std	Y+62, r25	; 0x3e
    16a0:	8d af       	std	Y+61, r24	; 0x3d
    16a2:	0f c0       	rjmp	.+30     	; 0x16c2 <LCD_vidSendCommand+0x3f8>
    16a4:	8c e2       	ldi	r24, 0x2C	; 44
    16a6:	91 e0       	ldi	r25, 0x01	; 1
    16a8:	9c af       	std	Y+60, r25	; 0x3c
    16aa:	8b af       	std	Y+59, r24	; 0x3b
    16ac:	8b ad       	ldd	r24, Y+59	; 0x3b
    16ae:	9c ad       	ldd	r25, Y+60	; 0x3c
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <LCD_vidSendCommand+0x3e6>
    16b4:	9c af       	std	Y+60, r25	; 0x3c
    16b6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    16ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	9e af       	std	Y+62, r25	; 0x3e
    16c0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    16c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	69 f7       	brne	.-38     	; 0x16a4 <LCD_vidSendCommand+0x3da>
    16ca:	16 c0       	rjmp	.+44     	; 0x16f8 <LCD_vidSendCommand+0x42e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16cc:	fe 01       	movw	r30, r28
    16ce:	ff 96       	adiw	r30, 0x3f	; 63
    16d0:	60 81       	ld	r22, Z
    16d2:	71 81       	ldd	r23, Z+1	; 0x01
    16d4:	82 81       	ldd	r24, Z+2	; 0x02
    16d6:	93 81       	ldd	r25, Z+3	; 0x03
    16d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	9e af       	std	Y+62, r25	; 0x3e
    16e2:	8d af       	std	Y+61, r24	; 0x3d
    16e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    16e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    16e8:	9a af       	std	Y+58, r25	; 0x3a
    16ea:	89 af       	std	Y+57, r24	; 0x39
    16ec:	89 ad       	ldd	r24, Y+57	; 0x39
    16ee:	9a ad       	ldd	r25, Y+58	; 0x3a
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <LCD_vidSendCommand+0x426>
    16f4:	9a af       	std	Y+58, r25	; 0x3a
    16f6:	89 af       	std	Y+57, r24	; 0x39
	#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8LOW); /* disable LCD E=0 */
    16f8:	83 e0       	ldi	r24, 0x03	; 3
    16fa:	66 e0       	ldi	r22, 0x06	; 6
    16fc:	40 e0       	ldi	r20, 0x00	; 0
    16fe:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinValue>
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	a0 e8       	ldi	r26, 0x80	; 128
    1708:	bf e3       	ldi	r27, 0x3F	; 63
    170a:	8d ab       	std	Y+53, r24	; 0x35
    170c:	9e ab       	std	Y+54, r25	; 0x36
    170e:	af ab       	std	Y+55, r26	; 0x37
    1710:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1712:	6d a9       	ldd	r22, Y+53	; 0x35
    1714:	7e a9       	ldd	r23, Y+54	; 0x36
    1716:	8f a9       	ldd	r24, Y+55	; 0x37
    1718:	98 ad       	ldd	r25, Y+56	; 0x38
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e8       	ldi	r19, 0x80	; 128
    171e:	4b e3       	ldi	r20, 0x3B	; 59
    1720:	55 e4       	ldi	r21, 0x45	; 69
    1722:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	89 ab       	std	Y+49, r24	; 0x31
    172c:	9a ab       	std	Y+50, r25	; 0x32
    172e:	ab ab       	std	Y+51, r26	; 0x33
    1730:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1732:	69 a9       	ldd	r22, Y+49	; 0x31
    1734:	7a a9       	ldd	r23, Y+50	; 0x32
    1736:	8b a9       	ldd	r24, Y+51	; 0x33
    1738:	9c a9       	ldd	r25, Y+52	; 0x34
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e8       	ldi	r20, 0x80	; 128
    1740:	5f e3       	ldi	r21, 0x3F	; 63
    1742:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1746:	88 23       	and	r24, r24
    1748:	2c f4       	brge	.+10     	; 0x1754 <LCD_vidSendCommand+0x48a>
		__ticks = 1;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	98 ab       	std	Y+48, r25	; 0x30
    1750:	8f a7       	std	Y+47, r24	; 0x2f
    1752:	3f c0       	rjmp	.+126    	; 0x17d2 <LCD_vidSendCommand+0x508>
	else if (__tmp > 65535)
    1754:	69 a9       	ldd	r22, Y+49	; 0x31
    1756:	7a a9       	ldd	r23, Y+50	; 0x32
    1758:	8b a9       	ldd	r24, Y+51	; 0x33
    175a:	9c a9       	ldd	r25, Y+52	; 0x34
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	3f ef       	ldi	r19, 0xFF	; 255
    1760:	4f e7       	ldi	r20, 0x7F	; 127
    1762:	57 e4       	ldi	r21, 0x47	; 71
    1764:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1768:	18 16       	cp	r1, r24
    176a:	4c f5       	brge	.+82     	; 0x17be <LCD_vidSendCommand+0x4f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176c:	6d a9       	ldd	r22, Y+53	; 0x35
    176e:	7e a9       	ldd	r23, Y+54	; 0x36
    1770:	8f a9       	ldd	r24, Y+55	; 0x37
    1772:	98 ad       	ldd	r25, Y+56	; 0x38
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e2       	ldi	r20, 0x20	; 32
    177a:	51 e4       	ldi	r21, 0x41	; 65
    177c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	bc 01       	movw	r22, r24
    1786:	cd 01       	movw	r24, r26
    1788:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	98 ab       	std	Y+48, r25	; 0x30
    1792:	8f a7       	std	Y+47, r24	; 0x2f
    1794:	0f c0       	rjmp	.+30     	; 0x17b4 <LCD_vidSendCommand+0x4ea>
    1796:	8c e2       	ldi	r24, 0x2C	; 44
    1798:	91 e0       	ldi	r25, 0x01	; 1
    179a:	9e a7       	std	Y+46, r25	; 0x2e
    179c:	8d a7       	std	Y+45, r24	; 0x2d
    179e:	8d a5       	ldd	r24, Y+45	; 0x2d
    17a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <LCD_vidSendCommand+0x4d8>
    17a6:	9e a7       	std	Y+46, r25	; 0x2e
    17a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    17ac:	98 a9       	ldd	r25, Y+48	; 0x30
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	98 ab       	std	Y+48, r25	; 0x30
    17b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    17b6:	98 a9       	ldd	r25, Y+48	; 0x30
    17b8:	00 97       	sbiw	r24, 0x00	; 0
    17ba:	69 f7       	brne	.-38     	; 0x1796 <LCD_vidSendCommand+0x4cc>
    17bc:	14 c0       	rjmp	.+40     	; 0x17e6 <LCD_vidSendCommand+0x51c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17be:	69 a9       	ldd	r22, Y+49	; 0x31
    17c0:	7a a9       	ldd	r23, Y+50	; 0x32
    17c2:	8b a9       	ldd	r24, Y+51	; 0x33
    17c4:	9c a9       	ldd	r25, Y+52	; 0x34
    17c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	98 ab       	std	Y+48, r25	; 0x30
    17d0:	8f a7       	std	Y+47, r24	; 0x2f
    17d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    17d4:	98 a9       	ldd	r25, Y+48	; 0x30
    17d6:	9c a7       	std	Y+44, r25	; 0x2c
    17d8:	8b a7       	std	Y+43, r24	; 0x2b
    17da:	8b a5       	ldd	r24, Y+43	; 0x2b
    17dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <LCD_vidSendCommand+0x514>
    17e2:	9c a7       	std	Y+44, r25	; 0x2c
    17e4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8HIGH); /* Enable LCD E=1 */
    17e6:	83 e0       	ldi	r24, 0x03	; 3
    17e8:	66 e0       	ldi	r22, 0x06	; 6
    17ea:	41 e0       	ldi	r20, 0x01	; 1
    17ec:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinValue>
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	a0 e8       	ldi	r26, 0x80	; 128
    17f6:	bf e3       	ldi	r27, 0x3F	; 63
    17f8:	8f a3       	std	Y+39, r24	; 0x27
    17fa:	98 a7       	std	Y+40, r25	; 0x28
    17fc:	a9 a7       	std	Y+41, r26	; 0x29
    17fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1800:	6f a1       	ldd	r22, Y+39	; 0x27
    1802:	78 a5       	ldd	r23, Y+40	; 0x28
    1804:	89 a5       	ldd	r24, Y+41	; 0x29
    1806:	9a a5       	ldd	r25, Y+42	; 0x2a
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e8       	ldi	r19, 0x80	; 128
    180c:	4b e3       	ldi	r20, 0x3B	; 59
    180e:	55 e4       	ldi	r21, 0x45	; 69
    1810:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	8b a3       	std	Y+35, r24	; 0x23
    181a:	9c a3       	std	Y+36, r25	; 0x24
    181c:	ad a3       	std	Y+37, r26	; 0x25
    181e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1820:	6b a1       	ldd	r22, Y+35	; 0x23
    1822:	7c a1       	ldd	r23, Y+36	; 0x24
    1824:	8d a1       	ldd	r24, Y+37	; 0x25
    1826:	9e a1       	ldd	r25, Y+38	; 0x26
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	40 e8       	ldi	r20, 0x80	; 128
    182e:	5f e3       	ldi	r21, 0x3F	; 63
    1830:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1834:	88 23       	and	r24, r24
    1836:	2c f4       	brge	.+10     	; 0x1842 <LCD_vidSendCommand+0x578>
		__ticks = 1;
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	9a a3       	std	Y+34, r25	; 0x22
    183e:	89 a3       	std	Y+33, r24	; 0x21
    1840:	3f c0       	rjmp	.+126    	; 0x18c0 <LCD_vidSendCommand+0x5f6>
	else if (__tmp > 65535)
    1842:	6b a1       	ldd	r22, Y+35	; 0x23
    1844:	7c a1       	ldd	r23, Y+36	; 0x24
    1846:	8d a1       	ldd	r24, Y+37	; 0x25
    1848:	9e a1       	ldd	r25, Y+38	; 0x26
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	3f ef       	ldi	r19, 0xFF	; 255
    184e:	4f e7       	ldi	r20, 0x7F	; 127
    1850:	57 e4       	ldi	r21, 0x47	; 71
    1852:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1856:	18 16       	cp	r1, r24
    1858:	4c f5       	brge	.+82     	; 0x18ac <LCD_vidSendCommand+0x5e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185a:	6f a1       	ldd	r22, Y+39	; 0x27
    185c:	78 a5       	ldd	r23, Y+40	; 0x28
    185e:	89 a5       	ldd	r24, Y+41	; 0x29
    1860:	9a a5       	ldd	r25, Y+42	; 0x2a
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e2       	ldi	r20, 0x20	; 32
    1868:	51 e4       	ldi	r21, 0x41	; 65
    186a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	bc 01       	movw	r22, r24
    1874:	cd 01       	movw	r24, r26
    1876:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	9a a3       	std	Y+34, r25	; 0x22
    1880:	89 a3       	std	Y+33, r24	; 0x21
    1882:	0f c0       	rjmp	.+30     	; 0x18a2 <LCD_vidSendCommand+0x5d8>
    1884:	8c e2       	ldi	r24, 0x2C	; 44
    1886:	91 e0       	ldi	r25, 0x01	; 1
    1888:	98 a3       	std	Y+32, r25	; 0x20
    188a:	8f 8f       	std	Y+31, r24	; 0x1f
    188c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    188e:	98 a1       	ldd	r25, Y+32	; 0x20
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	f1 f7       	brne	.-4      	; 0x1890 <LCD_vidSendCommand+0x5c6>
    1894:	98 a3       	std	Y+32, r25	; 0x20
    1896:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1898:	89 a1       	ldd	r24, Y+33	; 0x21
    189a:	9a a1       	ldd	r25, Y+34	; 0x22
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	9a a3       	std	Y+34, r25	; 0x22
    18a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a2:	89 a1       	ldd	r24, Y+33	; 0x21
    18a4:	9a a1       	ldd	r25, Y+34	; 0x22
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	69 f7       	brne	.-38     	; 0x1884 <LCD_vidSendCommand+0x5ba>
    18aa:	14 c0       	rjmp	.+40     	; 0x18d4 <LCD_vidSendCommand+0x60a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ac:	6b a1       	ldd	r22, Y+35	; 0x23
    18ae:	7c a1       	ldd	r23, Y+36	; 0x24
    18b0:	8d a1       	ldd	r24, Y+37	; 0x25
    18b2:	9e a1       	ldd	r25, Y+38	; 0x26
    18b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	9a a3       	std	Y+34, r25	; 0x22
    18be:	89 a3       	std	Y+33, r24	; 0x21
    18c0:	89 a1       	ldd	r24, Y+33	; 0x21
    18c2:	9a a1       	ldd	r25, Y+34	; 0x22
    18c4:	9e 8f       	std	Y+30, r25	; 0x1e
    18c6:	8d 8f       	std	Y+29, r24	; 0x1d
    18c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	f1 f7       	brne	.-4      	; 0x18cc <LCD_vidSendCommand+0x602>
    18d0:	9e 8f       	std	Y+30, r25	; 0x1e
    18d2:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
	#ifdef UPPER_PORT_PINS
		DIO_SetPortValue_AND(LCD_DATA_PORT,0x0F,((u8CmdCpy & 0x0F) >> 4));
	#else
		DIO_SetPortValue_AND(LCD_DATA_PORT,0xF0,(u8CmdCpy & 0x0F));
    18d4:	fe 01       	movw	r30, r28
    18d6:	ed 59       	subi	r30, 0x9D	; 157
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	80 81       	ld	r24, Z
    18dc:	98 2f       	mov	r25, r24
    18de:	9f 70       	andi	r25, 0x0F	; 15
    18e0:	83 e0       	ldi	r24, 0x03	; 3
    18e2:	60 ef       	ldi	r22, 0xF0	; 240
    18e4:	49 2f       	mov	r20, r25
    18e6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_SetPortValue_AND>
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	a0 e8       	ldi	r26, 0x80	; 128
    18f0:	bf e3       	ldi	r27, 0x3F	; 63
    18f2:	89 8f       	std	Y+25, r24	; 0x19
    18f4:	9a 8f       	std	Y+26, r25	; 0x1a
    18f6:	ab 8f       	std	Y+27, r26	; 0x1b
    18f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18fa:	69 8d       	ldd	r22, Y+25	; 0x19
    18fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1900:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e8       	ldi	r19, 0x80	; 128
    1906:	4b e3       	ldi	r20, 0x3B	; 59
    1908:	55 e4       	ldi	r21, 0x45	; 69
    190a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	8d 8b       	std	Y+21, r24	; 0x15
    1914:	9e 8b       	std	Y+22, r25	; 0x16
    1916:	af 8b       	std	Y+23, r26	; 0x17
    1918:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    191a:	6d 89       	ldd	r22, Y+21	; 0x15
    191c:	7e 89       	ldd	r23, Y+22	; 0x16
    191e:	8f 89       	ldd	r24, Y+23	; 0x17
    1920:	98 8d       	ldd	r25, Y+24	; 0x18
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e8       	ldi	r20, 0x80	; 128
    1928:	5f e3       	ldi	r21, 0x3F	; 63
    192a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    192e:	88 23       	and	r24, r24
    1930:	2c f4       	brge	.+10     	; 0x193c <LCD_vidSendCommand+0x672>
		__ticks = 1;
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9c 8b       	std	Y+20, r25	; 0x14
    1938:	8b 8b       	std	Y+19, r24	; 0x13
    193a:	3f c0       	rjmp	.+126    	; 0x19ba <LCD_vidSendCommand+0x6f0>
	else if (__tmp > 65535)
    193c:	6d 89       	ldd	r22, Y+21	; 0x15
    193e:	7e 89       	ldd	r23, Y+22	; 0x16
    1940:	8f 89       	ldd	r24, Y+23	; 0x17
    1942:	98 8d       	ldd	r25, Y+24	; 0x18
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	3f ef       	ldi	r19, 0xFF	; 255
    1948:	4f e7       	ldi	r20, 0x7F	; 127
    194a:	57 e4       	ldi	r21, 0x47	; 71
    194c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1950:	18 16       	cp	r1, r24
    1952:	4c f5       	brge	.+82     	; 0x19a6 <LCD_vidSendCommand+0x6dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1954:	69 8d       	ldd	r22, Y+25	; 0x19
    1956:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1958:	8b 8d       	ldd	r24, Y+27	; 0x1b
    195a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e2       	ldi	r20, 0x20	; 32
    1962:	51 e4       	ldi	r21, 0x41	; 65
    1964:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	bc 01       	movw	r22, r24
    196e:	cd 01       	movw	r24, r26
    1970:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	9c 8b       	std	Y+20, r25	; 0x14
    197a:	8b 8b       	std	Y+19, r24	; 0x13
    197c:	0f c0       	rjmp	.+30     	; 0x199c <LCD_vidSendCommand+0x6d2>
    197e:	8c e2       	ldi	r24, 0x2C	; 44
    1980:	91 e0       	ldi	r25, 0x01	; 1
    1982:	9a 8b       	std	Y+18, r25	; 0x12
    1984:	89 8b       	std	Y+17, r24	; 0x11
    1986:	89 89       	ldd	r24, Y+17	; 0x11
    1988:	9a 89       	ldd	r25, Y+18	; 0x12
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <LCD_vidSendCommand+0x6c0>
    198e:	9a 8b       	std	Y+18, r25	; 0x12
    1990:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1992:	8b 89       	ldd	r24, Y+19	; 0x13
    1994:	9c 89       	ldd	r25, Y+20	; 0x14
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	9c 8b       	std	Y+20, r25	; 0x14
    199a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199c:	8b 89       	ldd	r24, Y+19	; 0x13
    199e:	9c 89       	ldd	r25, Y+20	; 0x14
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	69 f7       	brne	.-38     	; 0x197e <LCD_vidSendCommand+0x6b4>
    19a4:	14 c0       	rjmp	.+40     	; 0x19ce <LCD_vidSendCommand+0x704>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a6:	6d 89       	ldd	r22, Y+21	; 0x15
    19a8:	7e 89       	ldd	r23, Y+22	; 0x16
    19aa:	8f 89       	ldd	r24, Y+23	; 0x17
    19ac:	98 8d       	ldd	r25, Y+24	; 0x18
    19ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	9c 8b       	std	Y+20, r25	; 0x14
    19b8:	8b 8b       	std	Y+19, r24	; 0x13
    19ba:	8b 89       	ldd	r24, Y+19	; 0x13
    19bc:	9c 89       	ldd	r25, Y+20	; 0x14
    19be:	98 8b       	std	Y+16, r25	; 0x10
    19c0:	8f 87       	std	Y+15, r24	; 0x0f
    19c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c4:	98 89       	ldd	r25, Y+16	; 0x10
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <LCD_vidSendCommand+0x6fc>
    19ca:	98 8b       	std	Y+16, r25	; 0x10
    19cc:	8f 87       	std	Y+15, r24	; 0x0f
	#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8LOW); /* disable LCD E=0 */
    19ce:	83 e0       	ldi	r24, 0x03	; 3
    19d0:	66 e0       	ldi	r22, 0x06	; 6
    19d2:	40 e0       	ldi	r20, 0x00	; 0
    19d4:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinValue>
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	a0 e8       	ldi	r26, 0x80	; 128
    19de:	bf e3       	ldi	r27, 0x3F	; 63
    19e0:	8b 87       	std	Y+11, r24	; 0x0b
    19e2:	9c 87       	std	Y+12, r25	; 0x0c
    19e4:	ad 87       	std	Y+13, r26	; 0x0d
    19e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e8       	ldi	r19, 0x80	; 128
    19f4:	4b e3       	ldi	r20, 0x3B	; 59
    19f6:	55 e4       	ldi	r21, 0x45	; 69
    19f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	8f 83       	std	Y+7, r24	; 0x07
    1a02:	98 87       	std	Y+8, r25	; 0x08
    1a04:	a9 87       	std	Y+9, r26	; 0x09
    1a06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a08:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0a:	78 85       	ldd	r23, Y+8	; 0x08
    1a0c:	89 85       	ldd	r24, Y+9	; 0x09
    1a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e8       	ldi	r20, 0x80	; 128
    1a16:	5f e3       	ldi	r21, 0x3F	; 63
    1a18:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a1c:	88 23       	and	r24, r24
    1a1e:	2c f4       	brge	.+10     	; 0x1a2a <LCD_vidSendCommand+0x760>
		__ticks = 1;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	9e 83       	std	Y+6, r25	; 0x06
    1a26:	8d 83       	std	Y+5, r24	; 0x05
    1a28:	3f c0       	rjmp	.+126    	; 0x1aa8 <LCD_vidSendCommand+0x7de>
	else if (__tmp > 65535)
    1a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2c:	78 85       	ldd	r23, Y+8	; 0x08
    1a2e:	89 85       	ldd	r24, Y+9	; 0x09
    1a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	3f ef       	ldi	r19, 0xFF	; 255
    1a36:	4f e7       	ldi	r20, 0x7F	; 127
    1a38:	57 e4       	ldi	r21, 0x47	; 71
    1a3a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a3e:	18 16       	cp	r1, r24
    1a40:	4c f5       	brge	.+82     	; 0x1a94 <LCD_vidSendCommand+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e2       	ldi	r20, 0x20	; 32
    1a50:	51 e4       	ldi	r21, 0x41	; 65
    1a52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	9e 83       	std	Y+6, r25	; 0x06
    1a68:	8d 83       	std	Y+5, r24	; 0x05
    1a6a:	0f c0       	rjmp	.+30     	; 0x1a8a <LCD_vidSendCommand+0x7c0>
    1a6c:	8c e2       	ldi	r24, 0x2C	; 44
    1a6e:	91 e0       	ldi	r25, 0x01	; 1
    1a70:	9c 83       	std	Y+4, r25	; 0x04
    1a72:	8b 83       	std	Y+3, r24	; 0x03
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <LCD_vidSendCommand+0x7ae>
    1a7c:	9c 83       	std	Y+4, r25	; 0x04
    1a7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	69 f7       	brne	.-38     	; 0x1a6c <LCD_vidSendCommand+0x7a2>
    1a92:	14 c0       	rjmp	.+40     	; 0x1abc <LCD_vidSendCommand+0x7f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a94:	6f 81       	ldd	r22, Y+7	; 0x07
    1a96:	78 85       	ldd	r23, Y+8	; 0x08
    1a98:	89 85       	ldd	r24, Y+9	; 0x09
    1a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	9e 83       	std	Y+6, r25	; 0x06
    1aa6:	8d 83       	std	Y+5, r24	; 0x05
    1aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1aac:	9a 83       	std	Y+2, r25	; 0x02
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <LCD_vidSendCommand+0x7ea>
    1ab8:	9a 83       	std	Y+2, r25	; 0x02
    1aba:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		DIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8LOW); /* disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif

}
    1abc:	cd 59       	subi	r28, 0x9D	; 157
    1abe:	df 4f       	sbci	r29, 0xFF	; 255
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	08 95       	ret

00001ad4 <LCD_vidWriteData>:
void LCD_vidWriteData(char u8DataCpy)
{
    1ad4:	0f 93       	push	r16
    1ad6:	1f 93       	push	r17
    1ad8:	df 93       	push	r29
    1ada:	cf 93       	push	r28
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	c3 56       	subi	r28, 0x63	; 99
    1ae2:	d0 40       	sbci	r29, 0x00	; 0
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
    1aee:	fe 01       	movw	r30, r28
    1af0:	ed 59       	subi	r30, 0x9D	; 157
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	80 83       	st	Z, r24
	DIO_SetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_u8HIGH); /* Data Mode RS=1 */
    1af6:	83 e0       	ldi	r24, 0x03	; 3
    1af8:	64 e0       	ldi	r22, 0x04	; 4
    1afa:	41 e0       	ldi	r20, 0x01	; 1
    1afc:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_u8LOW); /* write data to LCD so RW=0 */
    1b00:	83 e0       	ldi	r24, 0x03	; 3
    1b02:	65 e0       	ldi	r22, 0x05	; 5
    1b04:	40 e0       	ldi	r20, 0x00	; 0
    1b06:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinValue>
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	e1 5a       	subi	r30, 0xA1	; 161
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a0 e8       	ldi	r26, 0x80	; 128
    1b16:	bf e3       	ldi	r27, 0x3F	; 63
    1b18:	80 83       	st	Z, r24
    1b1a:	91 83       	std	Z+1, r25	; 0x01
    1b1c:	a2 83       	std	Z+2, r26	; 0x02
    1b1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b20:	8e 01       	movw	r16, r28
    1b22:	05 5a       	subi	r16, 0xA5	; 165
    1b24:	1f 4f       	sbci	r17, 0xFF	; 255
    1b26:	fe 01       	movw	r30, r28
    1b28:	e1 5a       	subi	r30, 0xA1	; 161
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	60 81       	ld	r22, Z
    1b2e:	71 81       	ldd	r23, Z+1	; 0x01
    1b30:	82 81       	ldd	r24, Z+2	; 0x02
    1b32:	93 81       	ldd	r25, Z+3	; 0x03
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e8       	ldi	r19, 0x80	; 128
    1b38:	4b e3       	ldi	r20, 0x3B	; 59
    1b3a:	55 e4       	ldi	r21, 0x45	; 69
    1b3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	f8 01       	movw	r30, r16
    1b46:	80 83       	st	Z, r24
    1b48:	91 83       	std	Z+1, r25	; 0x01
    1b4a:	a2 83       	std	Z+2, r26	; 0x02
    1b4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b4e:	fe 01       	movw	r30, r28
    1b50:	e5 5a       	subi	r30, 0xA5	; 165
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	60 81       	ld	r22, Z
    1b56:	71 81       	ldd	r23, Z+1	; 0x01
    1b58:	82 81       	ldd	r24, Z+2	; 0x02
    1b5a:	93 81       	ldd	r25, Z+3	; 0x03
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e8       	ldi	r20, 0x80	; 128
    1b62:	5f e3       	ldi	r21, 0x3F	; 63
    1b64:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b68:	88 23       	and	r24, r24
    1b6a:	44 f4       	brge	.+16     	; 0x1b7c <LCD_vidWriteData+0xa8>
		__ticks = 1;
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	e7 5a       	subi	r30, 0xA7	; 167
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	91 83       	std	Z+1, r25	; 0x01
    1b78:	80 83       	st	Z, r24
    1b7a:	64 c0       	rjmp	.+200    	; 0x1c44 <LCD_vidWriteData+0x170>
	else if (__tmp > 65535)
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	e5 5a       	subi	r30, 0xA5	; 165
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	60 81       	ld	r22, Z
    1b84:	71 81       	ldd	r23, Z+1	; 0x01
    1b86:	82 81       	ldd	r24, Z+2	; 0x02
    1b88:	93 81       	ldd	r25, Z+3	; 0x03
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	3f ef       	ldi	r19, 0xFF	; 255
    1b8e:	4f e7       	ldi	r20, 0x7F	; 127
    1b90:	57 e4       	ldi	r21, 0x47	; 71
    1b92:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b96:	18 16       	cp	r1, r24
    1b98:	0c f0       	brlt	.+2      	; 0x1b9c <LCD_vidWriteData+0xc8>
    1b9a:	43 c0       	rjmp	.+134    	; 0x1c22 <LCD_vidWriteData+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	e1 5a       	subi	r30, 0xA1	; 161
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	60 81       	ld	r22, Z
    1ba4:	71 81       	ldd	r23, Z+1	; 0x01
    1ba6:	82 81       	ldd	r24, Z+2	; 0x02
    1ba8:	93 81       	ldd	r25, Z+3	; 0x03
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e2       	ldi	r20, 0x20	; 32
    1bb0:	51 e4       	ldi	r21, 0x41	; 65
    1bb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	8e 01       	movw	r16, r28
    1bbc:	07 5a       	subi	r16, 0xA7	; 167
    1bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	cd 01       	movw	r24, r26
    1bc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	f8 01       	movw	r30, r16
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	80 83       	st	Z, r24
    1bd2:	1f c0       	rjmp	.+62     	; 0x1c12 <LCD_vidWriteData+0x13e>
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	e9 5a       	subi	r30, 0xA9	; 169
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	8c e2       	ldi	r24, 0x2C	; 44
    1bdc:	91 e0       	ldi	r25, 0x01	; 1
    1bde:	91 83       	std	Z+1, r25	; 0x01
    1be0:	80 83       	st	Z, r24
    1be2:	fe 01       	movw	r30, r28
    1be4:	e9 5a       	subi	r30, 0xA9	; 169
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	80 81       	ld	r24, Z
    1bea:	91 81       	ldd	r25, Z+1	; 0x01
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <LCD_vidWriteData+0x118>
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	e9 5a       	subi	r30, 0xA9	; 169
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	91 83       	std	Z+1, r25	; 0x01
    1bf8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfa:	de 01       	movw	r26, r28
    1bfc:	a7 5a       	subi	r26, 0xA7	; 167
    1bfe:	bf 4f       	sbci	r27, 0xFF	; 255
    1c00:	fe 01       	movw	r30, r28
    1c02:	e7 5a       	subi	r30, 0xA7	; 167
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	80 81       	ld	r24, Z
    1c08:	91 81       	ldd	r25, Z+1	; 0x01
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	11 96       	adiw	r26, 0x01	; 1
    1c0e:	9c 93       	st	X, r25
    1c10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c12:	fe 01       	movw	r30, r28
    1c14:	e7 5a       	subi	r30, 0xA7	; 167
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	80 81       	ld	r24, Z
    1c1a:	91 81       	ldd	r25, Z+1	; 0x01
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	d1 f6       	brne	.-76     	; 0x1bd4 <LCD_vidWriteData+0x100>
    1c20:	27 c0       	rjmp	.+78     	; 0x1c70 <LCD_vidWriteData+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c22:	8e 01       	movw	r16, r28
    1c24:	07 5a       	subi	r16, 0xA7	; 167
    1c26:	1f 4f       	sbci	r17, 0xFF	; 255
    1c28:	fe 01       	movw	r30, r28
    1c2a:	e5 5a       	subi	r30, 0xA5	; 165
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	60 81       	ld	r22, Z
    1c30:	71 81       	ldd	r23, Z+1	; 0x01
    1c32:	82 81       	ldd	r24, Z+2	; 0x02
    1c34:	93 81       	ldd	r25, Z+3	; 0x03
    1c36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	f8 01       	movw	r30, r16
    1c40:	91 83       	std	Z+1, r25	; 0x01
    1c42:	80 83       	st	Z, r24
    1c44:	de 01       	movw	r26, r28
    1c46:	ab 5a       	subi	r26, 0xAB	; 171
    1c48:	bf 4f       	sbci	r27, 0xFF	; 255
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e7 5a       	subi	r30, 0xA7	; 167
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	80 81       	ld	r24, Z
    1c52:	91 81       	ldd	r25, Z+1	; 0x01
    1c54:	8d 93       	st	X+, r24
    1c56:	9c 93       	st	X, r25
    1c58:	fe 01       	movw	r30, r28
    1c5a:	eb 5a       	subi	r30, 0xAB	; 171
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	80 81       	ld	r24, Z
    1c60:	91 81       	ldd	r25, Z+1	; 0x01
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <LCD_vidWriteData+0x18e>
    1c66:	fe 01       	movw	r30, r28
    1c68:	eb 5a       	subi	r30, 0xAB	; 171
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	91 83       	std	Z+1, r25	; 0x01
    1c6e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8HIGH); /* Enable LCD E=1 */
    1c70:	83 e0       	ldi	r24, 0x03	; 3
    1c72:	66 e0       	ldi	r22, 0x06	; 6
    1c74:	41 e0       	ldi	r20, 0x01	; 1
    1c76:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinValue>
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	ef 5a       	subi	r30, 0xAF	; 175
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	a0 e8       	ldi	r26, 0x80	; 128
    1c86:	bf e3       	ldi	r27, 0x3F	; 63
    1c88:	80 83       	st	Z, r24
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	a2 83       	std	Z+2, r26	; 0x02
    1c8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c90:	8e 01       	movw	r16, r28
    1c92:	03 5b       	subi	r16, 0xB3	; 179
    1c94:	1f 4f       	sbci	r17, 0xFF	; 255
    1c96:	fe 01       	movw	r30, r28
    1c98:	ef 5a       	subi	r30, 0xAF	; 175
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	60 81       	ld	r22, Z
    1c9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ca0:	82 81       	ldd	r24, Z+2	; 0x02
    1ca2:	93 81       	ldd	r25, Z+3	; 0x03
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e8       	ldi	r19, 0x80	; 128
    1ca8:	4b e3       	ldi	r20, 0x3B	; 59
    1caa:	55 e4       	ldi	r21, 0x45	; 69
    1cac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	f8 01       	movw	r30, r16
    1cb6:	80 83       	st	Z, r24
    1cb8:	91 83       	std	Z+1, r25	; 0x01
    1cba:	a2 83       	std	Z+2, r26	; 0x02
    1cbc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e3 5b       	subi	r30, 0xB3	; 179
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	60 81       	ld	r22, Z
    1cc6:	71 81       	ldd	r23, Z+1	; 0x01
    1cc8:	82 81       	ldd	r24, Z+2	; 0x02
    1cca:	93 81       	ldd	r25, Z+3	; 0x03
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e8       	ldi	r20, 0x80	; 128
    1cd2:	5f e3       	ldi	r21, 0x3F	; 63
    1cd4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cd8:	88 23       	and	r24, r24
    1cda:	44 f4       	brge	.+16     	; 0x1cec <LCD_vidWriteData+0x218>
		__ticks = 1;
    1cdc:	fe 01       	movw	r30, r28
    1cde:	e5 5b       	subi	r30, 0xB5	; 181
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	91 83       	std	Z+1, r25	; 0x01
    1ce8:	80 83       	st	Z, r24
    1cea:	64 c0       	rjmp	.+200    	; 0x1db4 <LCD_vidWriteData+0x2e0>
	else if (__tmp > 65535)
    1cec:	fe 01       	movw	r30, r28
    1cee:	e3 5b       	subi	r30, 0xB3	; 179
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	60 81       	ld	r22, Z
    1cf4:	71 81       	ldd	r23, Z+1	; 0x01
    1cf6:	82 81       	ldd	r24, Z+2	; 0x02
    1cf8:	93 81       	ldd	r25, Z+3	; 0x03
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	3f ef       	ldi	r19, 0xFF	; 255
    1cfe:	4f e7       	ldi	r20, 0x7F	; 127
    1d00:	57 e4       	ldi	r21, 0x47	; 71
    1d02:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d06:	18 16       	cp	r1, r24
    1d08:	0c f0       	brlt	.+2      	; 0x1d0c <LCD_vidWriteData+0x238>
    1d0a:	43 c0       	rjmp	.+134    	; 0x1d92 <LCD_vidWriteData+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	ef 5a       	subi	r30, 0xAF	; 175
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	60 81       	ld	r22, Z
    1d14:	71 81       	ldd	r23, Z+1	; 0x01
    1d16:	82 81       	ldd	r24, Z+2	; 0x02
    1d18:	93 81       	ldd	r25, Z+3	; 0x03
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e2       	ldi	r20, 0x20	; 32
    1d20:	51 e4       	ldi	r21, 0x41	; 65
    1d22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	8e 01       	movw	r16, r28
    1d2c:	05 5b       	subi	r16, 0xB5	; 181
    1d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d30:	bc 01       	movw	r22, r24
    1d32:	cd 01       	movw	r24, r26
    1d34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	f8 01       	movw	r30, r16
    1d3e:	91 83       	std	Z+1, r25	; 0x01
    1d40:	80 83       	st	Z, r24
    1d42:	1f c0       	rjmp	.+62     	; 0x1d82 <LCD_vidWriteData+0x2ae>
    1d44:	fe 01       	movw	r30, r28
    1d46:	e7 5b       	subi	r30, 0xB7	; 183
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	8c e2       	ldi	r24, 0x2C	; 44
    1d4c:	91 e0       	ldi	r25, 0x01	; 1
    1d4e:	91 83       	std	Z+1, r25	; 0x01
    1d50:	80 83       	st	Z, r24
    1d52:	fe 01       	movw	r30, r28
    1d54:	e7 5b       	subi	r30, 0xB7	; 183
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	80 81       	ld	r24, Z
    1d5a:	91 81       	ldd	r25, Z+1	; 0x01
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <LCD_vidWriteData+0x288>
    1d60:	fe 01       	movw	r30, r28
    1d62:	e7 5b       	subi	r30, 0xB7	; 183
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	91 83       	std	Z+1, r25	; 0x01
    1d68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6a:	de 01       	movw	r26, r28
    1d6c:	a5 5b       	subi	r26, 0xB5	; 181
    1d6e:	bf 4f       	sbci	r27, 0xFF	; 255
    1d70:	fe 01       	movw	r30, r28
    1d72:	e5 5b       	subi	r30, 0xB5	; 181
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	80 81       	ld	r24, Z
    1d78:	91 81       	ldd	r25, Z+1	; 0x01
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	11 96       	adiw	r26, 0x01	; 1
    1d7e:	9c 93       	st	X, r25
    1d80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d82:	fe 01       	movw	r30, r28
    1d84:	e5 5b       	subi	r30, 0xB5	; 181
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	80 81       	ld	r24, Z
    1d8a:	91 81       	ldd	r25, Z+1	; 0x01
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	d1 f6       	brne	.-76     	; 0x1d44 <LCD_vidWriteData+0x270>
    1d90:	27 c0       	rjmp	.+78     	; 0x1de0 <LCD_vidWriteData+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d92:	8e 01       	movw	r16, r28
    1d94:	05 5b       	subi	r16, 0xB5	; 181
    1d96:	1f 4f       	sbci	r17, 0xFF	; 255
    1d98:	fe 01       	movw	r30, r28
    1d9a:	e3 5b       	subi	r30, 0xB3	; 179
    1d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9e:	60 81       	ld	r22, Z
    1da0:	71 81       	ldd	r23, Z+1	; 0x01
    1da2:	82 81       	ldd	r24, Z+2	; 0x02
    1da4:	93 81       	ldd	r25, Z+3	; 0x03
    1da6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	f8 01       	movw	r30, r16
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	80 83       	st	Z, r24
    1db4:	de 01       	movw	r26, r28
    1db6:	a9 5b       	subi	r26, 0xB9	; 185
    1db8:	bf 4f       	sbci	r27, 0xFF	; 255
    1dba:	fe 01       	movw	r30, r28
    1dbc:	e5 5b       	subi	r30, 0xB5	; 181
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	80 81       	ld	r24, Z
    1dc2:	91 81       	ldd	r25, Z+1	; 0x01
    1dc4:	8d 93       	st	X+, r24
    1dc6:	9c 93       	st	X, r25
    1dc8:	fe 01       	movw	r30, r28
    1dca:	e9 5b       	subi	r30, 0xB9	; 185
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	80 81       	ld	r24, Z
    1dd0:	91 81       	ldd	r25, Z+1	; 0x01
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	f1 f7       	brne	.-4      	; 0x1dd2 <LCD_vidWriteData+0x2fe>
    1dd6:	fe 01       	movw	r30, r28
    1dd8:	e9 5b       	subi	r30, 0xB9	; 185
    1dda:	ff 4f       	sbci	r31, 0xFF	; 255
    1ddc:	91 83       	std	Z+1, r25	; 0x01
    1dde:	80 83       	st	Z, r24
	#if (DATA_BITS_MODE == 4)
		/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
	#ifdef UPPER_PORT_PINS
		DIO_SetPortValue_AND(LCD_DATA_PORT,0x0F,(u8DataCpy & 0xF0));
	#else
		DIO_SetPortValue_AND(LCD_DATA_PORT,0xF0,((u8DataCpy & 0xF0) >> 4));
    1de0:	fe 01       	movw	r30, r28
    1de2:	ed 59       	subi	r30, 0x9D	; 157
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	80 81       	ld	r24, Z
    1de8:	98 2f       	mov	r25, r24
    1dea:	92 95       	swap	r25
    1dec:	9f 70       	andi	r25, 0x0F	; 15
    1dee:	83 e0       	ldi	r24, 0x03	; 3
    1df0:	60 ef       	ldi	r22, 0xF0	; 240
    1df2:	49 2f       	mov	r20, r25
    1df4:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_SetPortValue_AND>
    1df8:	fe 01       	movw	r30, r28
    1dfa:	ed 5b       	subi	r30, 0xBD	; 189
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	a0 e8       	ldi	r26, 0x80	; 128
    1e04:	bf e3       	ldi	r27, 0x3F	; 63
    1e06:	80 83       	st	Z, r24
    1e08:	91 83       	std	Z+1, r25	; 0x01
    1e0a:	a2 83       	std	Z+2, r26	; 0x02
    1e0c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e0e:	8e 01       	movw	r16, r28
    1e10:	01 5c       	subi	r16, 0xC1	; 193
    1e12:	1f 4f       	sbci	r17, 0xFF	; 255
    1e14:	fe 01       	movw	r30, r28
    1e16:	ed 5b       	subi	r30, 0xBD	; 189
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	60 81       	ld	r22, Z
    1e1c:	71 81       	ldd	r23, Z+1	; 0x01
    1e1e:	82 81       	ldd	r24, Z+2	; 0x02
    1e20:	93 81       	ldd	r25, Z+3	; 0x03
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e8       	ldi	r19, 0x80	; 128
    1e26:	4b e3       	ldi	r20, 0x3B	; 59
    1e28:	55 e4       	ldi	r21, 0x45	; 69
    1e2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	f8 01       	movw	r30, r16
    1e34:	80 83       	st	Z, r24
    1e36:	91 83       	std	Z+1, r25	; 0x01
    1e38:	a2 83       	std	Z+2, r26	; 0x02
    1e3a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	ff 96       	adiw	r30, 0x3f	; 63
    1e40:	60 81       	ld	r22, Z
    1e42:	71 81       	ldd	r23, Z+1	; 0x01
    1e44:	82 81       	ldd	r24, Z+2	; 0x02
    1e46:	93 81       	ldd	r25, Z+3	; 0x03
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e8       	ldi	r20, 0x80	; 128
    1e4e:	5f e3       	ldi	r21, 0x3F	; 63
    1e50:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e54:	88 23       	and	r24, r24
    1e56:	2c f4       	brge	.+10     	; 0x1e62 <LCD_vidWriteData+0x38e>
		__ticks = 1;
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	9e af       	std	Y+62, r25	; 0x3e
    1e5e:	8d af       	std	Y+61, r24	; 0x3d
    1e60:	46 c0       	rjmp	.+140    	; 0x1eee <LCD_vidWriteData+0x41a>
	else if (__tmp > 65535)
    1e62:	fe 01       	movw	r30, r28
    1e64:	ff 96       	adiw	r30, 0x3f	; 63
    1e66:	60 81       	ld	r22, Z
    1e68:	71 81       	ldd	r23, Z+1	; 0x01
    1e6a:	82 81       	ldd	r24, Z+2	; 0x02
    1e6c:	93 81       	ldd	r25, Z+3	; 0x03
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	3f ef       	ldi	r19, 0xFF	; 255
    1e72:	4f e7       	ldi	r20, 0x7F	; 127
    1e74:	57 e4       	ldi	r21, 0x47	; 71
    1e76:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e7a:	18 16       	cp	r1, r24
    1e7c:	64 f5       	brge	.+88     	; 0x1ed6 <LCD_vidWriteData+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7e:	fe 01       	movw	r30, r28
    1e80:	ed 5b       	subi	r30, 0xBD	; 189
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	60 81       	ld	r22, Z
    1e86:	71 81       	ldd	r23, Z+1	; 0x01
    1e88:	82 81       	ldd	r24, Z+2	; 0x02
    1e8a:	93 81       	ldd	r25, Z+3	; 0x03
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	40 e2       	ldi	r20, 0x20	; 32
    1e92:	51 e4       	ldi	r21, 0x41	; 65
    1e94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	bc 01       	movw	r22, r24
    1e9e:	cd 01       	movw	r24, r26
    1ea0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	9e af       	std	Y+62, r25	; 0x3e
    1eaa:	8d af       	std	Y+61, r24	; 0x3d
    1eac:	0f c0       	rjmp	.+30     	; 0x1ecc <LCD_vidWriteData+0x3f8>
    1eae:	8c e2       	ldi	r24, 0x2C	; 44
    1eb0:	91 e0       	ldi	r25, 0x01	; 1
    1eb2:	9c af       	std	Y+60, r25	; 0x3c
    1eb4:	8b af       	std	Y+59, r24	; 0x3b
    1eb6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1eb8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	f1 f7       	brne	.-4      	; 0x1eba <LCD_vidWriteData+0x3e6>
    1ebe:	9c af       	std	Y+60, r25	; 0x3c
    1ec0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ec4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	9e af       	std	Y+62, r25	; 0x3e
    1eca:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ecc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ece:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ed0:	00 97       	sbiw	r24, 0x00	; 0
    1ed2:	69 f7       	brne	.-38     	; 0x1eae <LCD_vidWriteData+0x3da>
    1ed4:	16 c0       	rjmp	.+44     	; 0x1f02 <LCD_vidWriteData+0x42e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	ff 96       	adiw	r30, 0x3f	; 63
    1eda:	60 81       	ld	r22, Z
    1edc:	71 81       	ldd	r23, Z+1	; 0x01
    1ede:	82 81       	ldd	r24, Z+2	; 0x02
    1ee0:	93 81       	ldd	r25, Z+3	; 0x03
    1ee2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	9e af       	std	Y+62, r25	; 0x3e
    1eec:	8d af       	std	Y+61, r24	; 0x3d
    1eee:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ef0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ef2:	9a af       	std	Y+58, r25	; 0x3a
    1ef4:	89 af       	std	Y+57, r24	; 0x39
    1ef6:	89 ad       	ldd	r24, Y+57	; 0x39
    1ef8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	f1 f7       	brne	.-4      	; 0x1efa <LCD_vidWriteData+0x426>
    1efe:	9a af       	std	Y+58, r25	; 0x3a
    1f00:	89 af       	std	Y+57, r24	; 0x39
	#endif
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8LOW); /* disable LCD E=0 */
    1f02:	83 e0       	ldi	r24, 0x03	; 3
    1f04:	66 e0       	ldi	r22, 0x06	; 6
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinValue>
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	a0 e8       	ldi	r26, 0x80	; 128
    1f12:	bf e3       	ldi	r27, 0x3F	; 63
    1f14:	8d ab       	std	Y+53, r24	; 0x35
    1f16:	9e ab       	std	Y+54, r25	; 0x36
    1f18:	af ab       	std	Y+55, r26	; 0x37
    1f1a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f1e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f20:	8f a9       	ldd	r24, Y+55	; 0x37
    1f22:	98 ad       	ldd	r25, Y+56	; 0x38
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e8       	ldi	r19, 0x80	; 128
    1f28:	4b e3       	ldi	r20, 0x3B	; 59
    1f2a:	55 e4       	ldi	r21, 0x45	; 69
    1f2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	89 ab       	std	Y+49, r24	; 0x31
    1f36:	9a ab       	std	Y+50, r25	; 0x32
    1f38:	ab ab       	std	Y+51, r26	; 0x33
    1f3a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f3c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f3e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f40:	8b a9       	ldd	r24, Y+51	; 0x33
    1f42:	9c a9       	ldd	r25, Y+52	; 0x34
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	40 e8       	ldi	r20, 0x80	; 128
    1f4a:	5f e3       	ldi	r21, 0x3F	; 63
    1f4c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f50:	88 23       	and	r24, r24
    1f52:	2c f4       	brge	.+10     	; 0x1f5e <LCD_vidWriteData+0x48a>
		__ticks = 1;
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	98 ab       	std	Y+48, r25	; 0x30
    1f5a:	8f a7       	std	Y+47, r24	; 0x2f
    1f5c:	3f c0       	rjmp	.+126    	; 0x1fdc <LCD_vidWriteData+0x508>
	else if (__tmp > 65535)
    1f5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f60:	7a a9       	ldd	r23, Y+50	; 0x32
    1f62:	8b a9       	ldd	r24, Y+51	; 0x33
    1f64:	9c a9       	ldd	r25, Y+52	; 0x34
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	3f ef       	ldi	r19, 0xFF	; 255
    1f6a:	4f e7       	ldi	r20, 0x7F	; 127
    1f6c:	57 e4       	ldi	r21, 0x47	; 71
    1f6e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f72:	18 16       	cp	r1, r24
    1f74:	4c f5       	brge	.+82     	; 0x1fc8 <LCD_vidWriteData+0x4f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f76:	6d a9       	ldd	r22, Y+53	; 0x35
    1f78:	7e a9       	ldd	r23, Y+54	; 0x36
    1f7a:	8f a9       	ldd	r24, Y+55	; 0x37
    1f7c:	98 ad       	ldd	r25, Y+56	; 0x38
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	40 e2       	ldi	r20, 0x20	; 32
    1f84:	51 e4       	ldi	r21, 0x41	; 65
    1f86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	bc 01       	movw	r22, r24
    1f90:	cd 01       	movw	r24, r26
    1f92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	98 ab       	std	Y+48, r25	; 0x30
    1f9c:	8f a7       	std	Y+47, r24	; 0x2f
    1f9e:	0f c0       	rjmp	.+30     	; 0x1fbe <LCD_vidWriteData+0x4ea>
    1fa0:	8c e2       	ldi	r24, 0x2C	; 44
    1fa2:	91 e0       	ldi	r25, 0x01	; 1
    1fa4:	9e a7       	std	Y+46, r25	; 0x2e
    1fa6:	8d a7       	std	Y+45, r24	; 0x2d
    1fa8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1faa:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	f1 f7       	brne	.-4      	; 0x1fac <LCD_vidWriteData+0x4d8>
    1fb0:	9e a7       	std	Y+46, r25	; 0x2e
    1fb2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fb6:	98 a9       	ldd	r25, Y+48	; 0x30
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	98 ab       	std	Y+48, r25	; 0x30
    1fbc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fc0:	98 a9       	ldd	r25, Y+48	; 0x30
    1fc2:	00 97       	sbiw	r24, 0x00	; 0
    1fc4:	69 f7       	brne	.-38     	; 0x1fa0 <LCD_vidWriteData+0x4cc>
    1fc6:	14 c0       	rjmp	.+40     	; 0x1ff0 <LCD_vidWriteData+0x51c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc8:	69 a9       	ldd	r22, Y+49	; 0x31
    1fca:	7a a9       	ldd	r23, Y+50	; 0x32
    1fcc:	8b a9       	ldd	r24, Y+51	; 0x33
    1fce:	9c a9       	ldd	r25, Y+52	; 0x34
    1fd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	98 ab       	std	Y+48, r25	; 0x30
    1fda:	8f a7       	std	Y+47, r24	; 0x2f
    1fdc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fde:	98 a9       	ldd	r25, Y+48	; 0x30
    1fe0:	9c a7       	std	Y+44, r25	; 0x2c
    1fe2:	8b a7       	std	Y+43, r24	; 0x2b
    1fe4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fe6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	f1 f7       	brne	.-4      	; 0x1fe8 <LCD_vidWriteData+0x514>
    1fec:	9c a7       	std	Y+44, r25	; 0x2c
    1fee:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8HIGH); /* Enable LCD E=1 */
    1ff0:	83 e0       	ldi	r24, 0x03	; 3
    1ff2:	66 e0       	ldi	r22, 0x06	; 6
    1ff4:	41 e0       	ldi	r20, 0x01	; 1
    1ff6:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinValue>
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	a0 e8       	ldi	r26, 0x80	; 128
    2000:	bf e3       	ldi	r27, 0x3F	; 63
    2002:	8f a3       	std	Y+39, r24	; 0x27
    2004:	98 a7       	std	Y+40, r25	; 0x28
    2006:	a9 a7       	std	Y+41, r26	; 0x29
    2008:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200a:	6f a1       	ldd	r22, Y+39	; 0x27
    200c:	78 a5       	ldd	r23, Y+40	; 0x28
    200e:	89 a5       	ldd	r24, Y+41	; 0x29
    2010:	9a a5       	ldd	r25, Y+42	; 0x2a
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e8       	ldi	r19, 0x80	; 128
    2016:	4b e3       	ldi	r20, 0x3B	; 59
    2018:	55 e4       	ldi	r21, 0x45	; 69
    201a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	8b a3       	std	Y+35, r24	; 0x23
    2024:	9c a3       	std	Y+36, r25	; 0x24
    2026:	ad a3       	std	Y+37, r26	; 0x25
    2028:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    202a:	6b a1       	ldd	r22, Y+35	; 0x23
    202c:	7c a1       	ldd	r23, Y+36	; 0x24
    202e:	8d a1       	ldd	r24, Y+37	; 0x25
    2030:	9e a1       	ldd	r25, Y+38	; 0x26
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e8       	ldi	r20, 0x80	; 128
    2038:	5f e3       	ldi	r21, 0x3F	; 63
    203a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    203e:	88 23       	and	r24, r24
    2040:	2c f4       	brge	.+10     	; 0x204c <LCD_vidWriteData+0x578>
		__ticks = 1;
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	9a a3       	std	Y+34, r25	; 0x22
    2048:	89 a3       	std	Y+33, r24	; 0x21
    204a:	3f c0       	rjmp	.+126    	; 0x20ca <LCD_vidWriteData+0x5f6>
	else if (__tmp > 65535)
    204c:	6b a1       	ldd	r22, Y+35	; 0x23
    204e:	7c a1       	ldd	r23, Y+36	; 0x24
    2050:	8d a1       	ldd	r24, Y+37	; 0x25
    2052:	9e a1       	ldd	r25, Y+38	; 0x26
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	3f ef       	ldi	r19, 0xFF	; 255
    2058:	4f e7       	ldi	r20, 0x7F	; 127
    205a:	57 e4       	ldi	r21, 0x47	; 71
    205c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2060:	18 16       	cp	r1, r24
    2062:	4c f5       	brge	.+82     	; 0x20b6 <LCD_vidWriteData+0x5e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2064:	6f a1       	ldd	r22, Y+39	; 0x27
    2066:	78 a5       	ldd	r23, Y+40	; 0x28
    2068:	89 a5       	ldd	r24, Y+41	; 0x29
    206a:	9a a5       	ldd	r25, Y+42	; 0x2a
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	40 e2       	ldi	r20, 0x20	; 32
    2072:	51 e4       	ldi	r21, 0x41	; 65
    2074:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	bc 01       	movw	r22, r24
    207e:	cd 01       	movw	r24, r26
    2080:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	9a a3       	std	Y+34, r25	; 0x22
    208a:	89 a3       	std	Y+33, r24	; 0x21
    208c:	0f c0       	rjmp	.+30     	; 0x20ac <LCD_vidWriteData+0x5d8>
    208e:	8c e2       	ldi	r24, 0x2C	; 44
    2090:	91 e0       	ldi	r25, 0x01	; 1
    2092:	98 a3       	std	Y+32, r25	; 0x20
    2094:	8f 8f       	std	Y+31, r24	; 0x1f
    2096:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2098:	98 a1       	ldd	r25, Y+32	; 0x20
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	f1 f7       	brne	.-4      	; 0x209a <LCD_vidWriteData+0x5c6>
    209e:	98 a3       	std	Y+32, r25	; 0x20
    20a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a2:	89 a1       	ldd	r24, Y+33	; 0x21
    20a4:	9a a1       	ldd	r25, Y+34	; 0x22
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	9a a3       	std	Y+34, r25	; 0x22
    20aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ac:	89 a1       	ldd	r24, Y+33	; 0x21
    20ae:	9a a1       	ldd	r25, Y+34	; 0x22
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	69 f7       	brne	.-38     	; 0x208e <LCD_vidWriteData+0x5ba>
    20b4:	14 c0       	rjmp	.+40     	; 0x20de <LCD_vidWriteData+0x60a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b6:	6b a1       	ldd	r22, Y+35	; 0x23
    20b8:	7c a1       	ldd	r23, Y+36	; 0x24
    20ba:	8d a1       	ldd	r24, Y+37	; 0x25
    20bc:	9e a1       	ldd	r25, Y+38	; 0x26
    20be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	9a a3       	std	Y+34, r25	; 0x22
    20c8:	89 a3       	std	Y+33, r24	; 0x21
    20ca:	89 a1       	ldd	r24, Y+33	; 0x21
    20cc:	9a a1       	ldd	r25, Y+34	; 0x22
    20ce:	9e 8f       	std	Y+30, r25	; 0x1e
    20d0:	8d 8f       	std	Y+29, r24	; 0x1d
    20d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	f1 f7       	brne	.-4      	; 0x20d6 <LCD_vidWriteData+0x602>
    20da:	9e 8f       	std	Y+30, r25	; 0x1e
    20dc:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
	#ifdef UPPER_PORT_PINS
		DIO_SetPortValue_AND(LCD_DATA_PORT,0x0F,((u8DataCpy & 0x0F) >> 4));
	#else
		DIO_SetPortValue_AND(LCD_DATA_PORT,0xF0,(u8DataCpy & 0x0F));
    20de:	fe 01       	movw	r30, r28
    20e0:	ed 59       	subi	r30, 0x9D	; 157
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	80 81       	ld	r24, Z
    20e6:	98 2f       	mov	r25, r24
    20e8:	9f 70       	andi	r25, 0x0F	; 15
    20ea:	83 e0       	ldi	r24, 0x03	; 3
    20ec:	60 ef       	ldi	r22, 0xF0	; 240
    20ee:	49 2f       	mov	r20, r25
    20f0:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_SetPortValue_AND>
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	a0 e8       	ldi	r26, 0x80	; 128
    20fa:	bf e3       	ldi	r27, 0x3F	; 63
    20fc:	89 8f       	std	Y+25, r24	; 0x19
    20fe:	9a 8f       	std	Y+26, r25	; 0x1a
    2100:	ab 8f       	std	Y+27, r26	; 0x1b
    2102:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2104:	69 8d       	ldd	r22, Y+25	; 0x19
    2106:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2108:	8b 8d       	ldd	r24, Y+27	; 0x1b
    210a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e8       	ldi	r19, 0x80	; 128
    2110:	4b e3       	ldi	r20, 0x3B	; 59
    2112:	55 e4       	ldi	r21, 0x45	; 69
    2114:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	8d 8b       	std	Y+21, r24	; 0x15
    211e:	9e 8b       	std	Y+22, r25	; 0x16
    2120:	af 8b       	std	Y+23, r26	; 0x17
    2122:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2124:	6d 89       	ldd	r22, Y+21	; 0x15
    2126:	7e 89       	ldd	r23, Y+22	; 0x16
    2128:	8f 89       	ldd	r24, Y+23	; 0x17
    212a:	98 8d       	ldd	r25, Y+24	; 0x18
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e8       	ldi	r20, 0x80	; 128
    2132:	5f e3       	ldi	r21, 0x3F	; 63
    2134:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2138:	88 23       	and	r24, r24
    213a:	2c f4       	brge	.+10     	; 0x2146 <LCD_vidWriteData+0x672>
		__ticks = 1;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	9c 8b       	std	Y+20, r25	; 0x14
    2142:	8b 8b       	std	Y+19, r24	; 0x13
    2144:	3f c0       	rjmp	.+126    	; 0x21c4 <LCD_vidWriteData+0x6f0>
	else if (__tmp > 65535)
    2146:	6d 89       	ldd	r22, Y+21	; 0x15
    2148:	7e 89       	ldd	r23, Y+22	; 0x16
    214a:	8f 89       	ldd	r24, Y+23	; 0x17
    214c:	98 8d       	ldd	r25, Y+24	; 0x18
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	3f ef       	ldi	r19, 0xFF	; 255
    2152:	4f e7       	ldi	r20, 0x7F	; 127
    2154:	57 e4       	ldi	r21, 0x47	; 71
    2156:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    215a:	18 16       	cp	r1, r24
    215c:	4c f5       	brge	.+82     	; 0x21b0 <LCD_vidWriteData+0x6dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215e:	69 8d       	ldd	r22, Y+25	; 0x19
    2160:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2162:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2164:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e2       	ldi	r20, 0x20	; 32
    216c:	51 e4       	ldi	r21, 0x41	; 65
    216e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	9c 8b       	std	Y+20, r25	; 0x14
    2184:	8b 8b       	std	Y+19, r24	; 0x13
    2186:	0f c0       	rjmp	.+30     	; 0x21a6 <LCD_vidWriteData+0x6d2>
    2188:	8c e2       	ldi	r24, 0x2C	; 44
    218a:	91 e0       	ldi	r25, 0x01	; 1
    218c:	9a 8b       	std	Y+18, r25	; 0x12
    218e:	89 8b       	std	Y+17, r24	; 0x11
    2190:	89 89       	ldd	r24, Y+17	; 0x11
    2192:	9a 89       	ldd	r25, Y+18	; 0x12
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <LCD_vidWriteData+0x6c0>
    2198:	9a 8b       	std	Y+18, r25	; 0x12
    219a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219c:	8b 89       	ldd	r24, Y+19	; 0x13
    219e:	9c 89       	ldd	r25, Y+20	; 0x14
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	9c 8b       	std	Y+20, r25	; 0x14
    21a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a6:	8b 89       	ldd	r24, Y+19	; 0x13
    21a8:	9c 89       	ldd	r25, Y+20	; 0x14
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	69 f7       	brne	.-38     	; 0x2188 <LCD_vidWriteData+0x6b4>
    21ae:	14 c0       	rjmp	.+40     	; 0x21d8 <LCD_vidWriteData+0x704>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b0:	6d 89       	ldd	r22, Y+21	; 0x15
    21b2:	7e 89       	ldd	r23, Y+22	; 0x16
    21b4:	8f 89       	ldd	r24, Y+23	; 0x17
    21b6:	98 8d       	ldd	r25, Y+24	; 0x18
    21b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9c 8b       	std	Y+20, r25	; 0x14
    21c2:	8b 8b       	std	Y+19, r24	; 0x13
    21c4:	8b 89       	ldd	r24, Y+19	; 0x13
    21c6:	9c 89       	ldd	r25, Y+20	; 0x14
    21c8:	98 8b       	std	Y+16, r25	; 0x10
    21ca:	8f 87       	std	Y+15, r24	; 0x0f
    21cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ce:	98 89       	ldd	r25, Y+16	; 0x10
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <LCD_vidWriteData+0x6fc>
    21d4:	98 8b       	std	Y+16, r25	; 0x10
    21d6:	8f 87       	std	Y+15, r24	; 0x0f
	#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8LOW);/* disable LCD E=0 */
    21d8:	83 e0       	ldi	r24, 0x03	; 3
    21da:	66 e0       	ldi	r22, 0x06	; 6
    21dc:	40 e0       	ldi	r20, 0x00	; 0
    21de:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinValue>
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	a0 e8       	ldi	r26, 0x80	; 128
    21e8:	bf e3       	ldi	r27, 0x3F	; 63
    21ea:	8b 87       	std	Y+11, r24	; 0x0b
    21ec:	9c 87       	std	Y+12, r25	; 0x0c
    21ee:	ad 87       	std	Y+13, r26	; 0x0d
    21f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e8       	ldi	r19, 0x80	; 128
    21fe:	4b e3       	ldi	r20, 0x3B	; 59
    2200:	55 e4       	ldi	r21, 0x45	; 69
    2202:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	8f 83       	std	Y+7, r24	; 0x07
    220c:	98 87       	std	Y+8, r25	; 0x08
    220e:	a9 87       	std	Y+9, r26	; 0x09
    2210:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2212:	6f 81       	ldd	r22, Y+7	; 0x07
    2214:	78 85       	ldd	r23, Y+8	; 0x08
    2216:	89 85       	ldd	r24, Y+9	; 0x09
    2218:	9a 85       	ldd	r25, Y+10	; 0x0a
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	40 e8       	ldi	r20, 0x80	; 128
    2220:	5f e3       	ldi	r21, 0x3F	; 63
    2222:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2226:	88 23       	and	r24, r24
    2228:	2c f4       	brge	.+10     	; 0x2234 <LCD_vidWriteData+0x760>
		__ticks = 1;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	9e 83       	std	Y+6, r25	; 0x06
    2230:	8d 83       	std	Y+5, r24	; 0x05
    2232:	3f c0       	rjmp	.+126    	; 0x22b2 <LCD_vidWriteData+0x7de>
	else if (__tmp > 65535)
    2234:	6f 81       	ldd	r22, Y+7	; 0x07
    2236:	78 85       	ldd	r23, Y+8	; 0x08
    2238:	89 85       	ldd	r24, Y+9	; 0x09
    223a:	9a 85       	ldd	r25, Y+10	; 0x0a
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	3f ef       	ldi	r19, 0xFF	; 255
    2240:	4f e7       	ldi	r20, 0x7F	; 127
    2242:	57 e4       	ldi	r21, 0x47	; 71
    2244:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2248:	18 16       	cp	r1, r24
    224a:	4c f5       	brge	.+82     	; 0x229e <LCD_vidWriteData+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224c:	6b 85       	ldd	r22, Y+11	; 0x0b
    224e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2250:	8d 85       	ldd	r24, Y+13	; 0x0d
    2252:	9e 85       	ldd	r25, Y+14	; 0x0e
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e2       	ldi	r20, 0x20	; 32
    225a:	51 e4       	ldi	r21, 0x41	; 65
    225c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	bc 01       	movw	r22, r24
    2266:	cd 01       	movw	r24, r26
    2268:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	9e 83       	std	Y+6, r25	; 0x06
    2272:	8d 83       	std	Y+5, r24	; 0x05
    2274:	0f c0       	rjmp	.+30     	; 0x2294 <LCD_vidWriteData+0x7c0>
    2276:	8c e2       	ldi	r24, 0x2C	; 44
    2278:	91 e0       	ldi	r25, 0x01	; 1
    227a:	9c 83       	std	Y+4, r25	; 0x04
    227c:	8b 83       	std	Y+3, r24	; 0x03
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	9c 81       	ldd	r25, Y+4	; 0x04
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <LCD_vidWriteData+0x7ae>
    2286:	9c 83       	std	Y+4, r25	; 0x04
    2288:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228a:	8d 81       	ldd	r24, Y+5	; 0x05
    228c:	9e 81       	ldd	r25, Y+6	; 0x06
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	9e 83       	std	Y+6, r25	; 0x06
    2292:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2294:	8d 81       	ldd	r24, Y+5	; 0x05
    2296:	9e 81       	ldd	r25, Y+6	; 0x06
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	69 f7       	brne	.-38     	; 0x2276 <LCD_vidWriteData+0x7a2>
    229c:	14 c0       	rjmp	.+40     	; 0x22c6 <LCD_vidWriteData+0x7f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229e:	6f 81       	ldd	r22, Y+7	; 0x07
    22a0:	78 85       	ldd	r23, Y+8	; 0x08
    22a2:	89 85       	ldd	r24, Y+9	; 0x09
    22a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	9e 83       	std	Y+6, r25	; 0x06
    22b0:	8d 83       	std	Y+5, r24	; 0x05
    22b2:	8d 81       	ldd	r24, Y+5	; 0x05
    22b4:	9e 81       	ldd	r25, Y+6	; 0x06
    22b6:	9a 83       	std	Y+2, r25	; 0x02
    22b8:	89 83       	std	Y+1, r24	; 0x01
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	9a 81       	ldd	r25, Y+2	; 0x02
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	f1 f7       	brne	.-4      	; 0x22be <LCD_vidWriteData+0x7ea>
    22c2:	9a 83       	std	Y+2, r25	; 0x02
    22c4:	89 83       	std	Y+1, r24	; 0x01
		DIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8LOW); /* disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif


}
    22c6:	cd 59       	subi	r28, 0x9D	; 157
    22c8:	df 4f       	sbci	r29, 0xFF	; 255
    22ca:	0f b6       	in	r0, 0x3f	; 63
    22cc:	f8 94       	cli
    22ce:	de bf       	out	0x3e, r29	; 62
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	cd bf       	out	0x3d, r28	; 61
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	1f 91       	pop	r17
    22da:	0f 91       	pop	r16
    22dc:	08 95       	ret

000022de <LCD_vidWriteString>:

void LCD_vidWriteString(const char *Str)
{
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	00 d0       	rcall	.+0      	; 0x22e4 <LCD_vidWriteString+0x6>
    22e4:	0f 92       	push	r0
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	9b 83       	std	Y+3, r25	; 0x03
    22ec:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    22ee:	19 82       	std	Y+1, r1	; 0x01
    22f0:	0e c0       	rjmp	.+28     	; 0x230e <LCD_vidWriteString+0x30>
	while(Str[i] != '\0')
	{
		LCD_vidWriteData(Str[i]);
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	28 2f       	mov	r18, r24
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	8a 81       	ldd	r24, Y+2	; 0x02
    22fa:	9b 81       	ldd	r25, Y+3	; 0x03
    22fc:	fc 01       	movw	r30, r24
    22fe:	e2 0f       	add	r30, r18
    2300:	f3 1f       	adc	r31, r19
    2302:	80 81       	ld	r24, Z
    2304:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vidWriteData>
		i++;
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	8f 5f       	subi	r24, 0xFF	; 255
    230c:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_vidWriteString(const char *Str)
{
	u8 i = 0;
	while(Str[i] != '\0')
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
    2316:	9b 81       	ldd	r25, Y+3	; 0x03
    2318:	fc 01       	movw	r30, r24
    231a:	e2 0f       	add	r30, r18
    231c:	f3 1f       	adc	r31, r19
    231e:	80 81       	ld	r24, Z
    2320:	88 23       	and	r24, r24
    2322:	39 f7       	brne	.-50     	; 0x22f2 <LCD_vidWriteString+0x14>
	{
		LCD_vidWriteData(Str[i]);
		i++;
	}
}
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	cf 91       	pop	r28
    232c:	df 91       	pop	r29
    232e:	08 95       	ret

00002330 <LCD_vidGotoXY>:




void LCD_vidGotoXY(u8 u8ColCpy, u8 u8RowCpy)
{
    2330:	df 93       	push	r29
    2332:	cf 93       	push	r28
    2334:	00 d0       	rcall	.+0      	; 0x2336 <LCD_vidGotoXY+0x6>
    2336:	00 d0       	rcall	.+0      	; 0x2338 <LCD_vidGotoXY+0x8>
    2338:	0f 92       	push	r0
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    233e:	8a 83       	std	Y+2, r24	; 0x02
    2340:	6b 83       	std	Y+3, r22	; 0x03
	u8 Address;

	/* first of all calculate the required address */
	switch(u8RowCpy)
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	3d 83       	std	Y+5, r19	; 0x05
    234a:	2c 83       	std	Y+4, r18	; 0x04
    234c:	8c 81       	ldd	r24, Y+4	; 0x04
    234e:	9d 81       	ldd	r25, Y+5	; 0x05
    2350:	81 30       	cpi	r24, 0x01	; 1
    2352:	91 05       	cpc	r25, r1
    2354:	c1 f0       	breq	.+48     	; 0x2386 <LCD_vidGotoXY+0x56>
    2356:	2c 81       	ldd	r18, Y+4	; 0x04
    2358:	3d 81       	ldd	r19, Y+5	; 0x05
    235a:	22 30       	cpi	r18, 0x02	; 2
    235c:	31 05       	cpc	r19, r1
    235e:	2c f4       	brge	.+10     	; 0x236a <LCD_vidGotoXY+0x3a>
    2360:	8c 81       	ldd	r24, Y+4	; 0x04
    2362:	9d 81       	ldd	r25, Y+5	; 0x05
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	61 f0       	breq	.+24     	; 0x2380 <LCD_vidGotoXY+0x50>
    2368:	19 c0       	rjmp	.+50     	; 0x239c <LCD_vidGotoXY+0x6c>
    236a:	2c 81       	ldd	r18, Y+4	; 0x04
    236c:	3d 81       	ldd	r19, Y+5	; 0x05
    236e:	22 30       	cpi	r18, 0x02	; 2
    2370:	31 05       	cpc	r19, r1
    2372:	69 f0       	breq	.+26     	; 0x238e <LCD_vidGotoXY+0x5e>
    2374:	8c 81       	ldd	r24, Y+4	; 0x04
    2376:	9d 81       	ldd	r25, Y+5	; 0x05
    2378:	83 30       	cpi	r24, 0x03	; 3
    237a:	91 05       	cpc	r25, r1
    237c:	61 f0       	breq	.+24     	; 0x2396 <LCD_vidGotoXY+0x66>
    237e:	0e c0       	rjmp	.+28     	; 0x239c <LCD_vidGotoXY+0x6c>
	{
		case 0:
				Address=u8ColCpy;
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	0b c0       	rjmp	.+22     	; 0x239c <LCD_vidGotoXY+0x6c>
				break;
		case 1:
				Address=u8ColCpy+0x40;
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	80 5c       	subi	r24, 0xC0	; 192
    238a:	89 83       	std	Y+1, r24	; 0x01
    238c:	07 c0       	rjmp	.+14     	; 0x239c <LCD_vidGotoXY+0x6c>
				break;
		case 2:
				Address=u8ColCpy+0x10;
    238e:	8a 81       	ldd	r24, Y+2	; 0x02
    2390:	80 5f       	subi	r24, 0xF0	; 240
    2392:	89 83       	std	Y+1, r24	; 0x01
    2394:	03 c0       	rjmp	.+6      	; 0x239c <LCD_vidGotoXY+0x6c>
				break;
		case 3:
				Address=u8ColCpy+0x50;
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	80 5b       	subi	r24, 0xB0	; 176
    239a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_vidSendCommand(Address | SET_CURSOR_LOCATION);
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	80 68       	ori	r24, 0x80	; 128
    23a0:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_vidSendCommand>
}
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	cf 91       	pop	r28
    23b0:	df 91       	pop	r29
    23b2:	08 95       	ret

000023b4 <LCD_vidWriteInt>:


void LCD_vidWriteInt(s16 val)
{
    23b4:	df 93       	push	r29
    23b6:	cf 93       	push	r28
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
    23bc:	62 97       	sbiw	r28, 0x12	; 18
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	f8 94       	cli
    23c2:	de bf       	out	0x3e, r29	; 62
    23c4:	0f be       	out	0x3f, r0	; 63
    23c6:	cd bf       	out	0x3d, r28	; 61
    23c8:	9a 8b       	std	Y+18, r25	; 0x12
    23ca:	89 8b       	std	Y+17, r24	; 0x11
	   char buff[16]; /* String to hold the ascii result */
	   itoa(val,buff,10); /* 10 for decimal */
    23cc:	89 89       	ldd	r24, Y+17	; 0x11
    23ce:	9a 89       	ldd	r25, Y+18	; 0x12
    23d0:	9e 01       	movw	r18, r28
    23d2:	2f 5f       	subi	r18, 0xFF	; 255
    23d4:	3f 4f       	sbci	r19, 0xFF	; 255
    23d6:	b9 01       	movw	r22, r18
    23d8:	4a e0       	ldi	r20, 0x0A	; 10
    23da:	50 e0       	ldi	r21, 0x00	; 0
    23dc:	0e 94 49 15 	call	0x2a92	; 0x2a92 <itoa>
	   LCD_vidWriteString(buff);
    23e0:	ce 01       	movw	r24, r28
    23e2:	01 96       	adiw	r24, 0x01	; 1
    23e4:	0e 94 6f 11 	call	0x22de	; 0x22de <LCD_vidWriteString>
}
    23e8:	62 96       	adiw	r28, 0x12	; 18
    23ea:	0f b6       	in	r0, 0x3f	; 63
    23ec:	f8 94       	cli
    23ee:	de bf       	out	0x3e, r29	; 62
    23f0:	0f be       	out	0x3f, r0	; 63
    23f2:	cd bf       	out	0x3d, r28	; 61
    23f4:	cf 91       	pop	r28
    23f6:	df 91       	pop	r29
    23f8:	08 95       	ret

000023fa <LCD_STATE>:
 *
 *  Created on: 8 Jun 2021
 *      Author: Merna Saleh
 */
#include "disp_mang.h"
void LCD_STATE(STATE Set_State){
    23fa:	df 93       	push	r29
    23fc:	cf 93       	push	r28
    23fe:	0f 92       	push	r0
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    2404:	89 83       	std	Y+1, r24	; 0x01
	if(Set_State==NORMAL){
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	82 30       	cpi	r24, 0x02	; 2
    240a:	49 f4       	brne	.+18     	; 0x241e <LCD_STATE+0x24>
		LCD_vidGotoXY((u8)6,(u8)1);
    240c:	86 e0       	ldi	r24, 0x06	; 6
    240e:	61 e0       	ldi	r22, 0x01	; 1
    2410:	0e 94 98 11 	call	0x2330	; 0x2330 <LCD_vidGotoXY>
		LCD_vidWriteString("NORMAL");
    2414:	80 e6       	ldi	r24, 0x60	; 96
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	0e 94 6f 11 	call	0x22de	; 0x22de <LCD_vidWriteString>
    241c:	20 c0       	rjmp	.+64     	; 0x245e <LCD_STATE+0x64>
	}
	else if(Set_State==OPERATION){
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	83 30       	cpi	r24, 0x03	; 3
    2422:	49 f4       	brne	.+18     	; 0x2436 <LCD_STATE+0x3c>
		LCD_vidGotoXY((u8)6,(u8)1);
    2424:	86 e0       	ldi	r24, 0x06	; 6
    2426:	61 e0       	ldi	r22, 0x01	; 1
    2428:	0e 94 98 11 	call	0x2330	; 0x2330 <LCD_vidGotoXY>
		LCD_vidWriteString("OPERATION");
    242c:	87 e6       	ldi	r24, 0x67	; 103
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	0e 94 6f 11 	call	0x22de	; 0x22de <LCD_vidWriteString>
    2434:	14 c0       	rjmp	.+40     	; 0x245e <LCD_STATE+0x64>
	}
	else if(Set_State==STANDBY){
    2436:	89 81       	ldd	r24, Y+1	; 0x01
    2438:	81 30       	cpi	r24, 0x01	; 1
    243a:	49 f4       	brne	.+18     	; 0x244e <LCD_STATE+0x54>
		LCD_vidGotoXY((u8)6,(u8)1);
    243c:	86 e0       	ldi	r24, 0x06	; 6
    243e:	61 e0       	ldi	r22, 0x01	; 1
    2440:	0e 94 98 11 	call	0x2330	; 0x2330 <LCD_vidGotoXY>
		LCD_vidWriteString("STANDBY");
    2444:	81 e7       	ldi	r24, 0x71	; 113
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	0e 94 6f 11 	call	0x22de	; 0x22de <LCD_vidWriteString>
    244c:	08 c0       	rjmp	.+16     	; 0x245e <LCD_STATE+0x64>
	}
	else{
		LCD_vidGotoXY((u8)6,(u8)1);
    244e:	86 e0       	ldi	r24, 0x06	; 6
    2450:	61 e0       	ldi	r22, 0x01	; 1
    2452:	0e 94 98 11 	call	0x2330	; 0x2330 <LCD_vidGotoXY>
		LCD_vidWriteString("ERROR");
    2456:	89 e7       	ldi	r24, 0x79	; 121
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	0e 94 6f 11 	call	0x22de	; 0x22de <LCD_vidWriteString>
	}

}
    245e:	0f 90       	pop	r0
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	08 95       	ret

00002466 <IDLE_Screen>:
void IDLE_Screen(u8 SET_TEMP,u8 CRT_TEMP,STATE Set_State){
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	00 d0       	rcall	.+0      	; 0x246c <IDLE_Screen+0x6>
    246c:	0f 92       	push	r0
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    2472:	89 83       	std	Y+1, r24	; 0x01
    2474:	6a 83       	std	Y+2, r22	; 0x02
    2476:	4b 83       	std	Y+3, r20	; 0x03
	LCD_vidGotoXY((u8)0,(u8)0);
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	60 e0       	ldi	r22, 0x00	; 0
    247c:	0e 94 98 11 	call	0x2330	; 0x2330 <LCD_vidGotoXY>
	LCD_vidWriteString("SET:");
    2480:	8f e7       	ldi	r24, 0x7F	; 127
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	0e 94 6f 11 	call	0x22de	; 0x22de <LCD_vidWriteString>
	LCD_vidGotoXY((u8)4,(u8)0);
    2488:	84 e0       	ldi	r24, 0x04	; 4
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	0e 94 98 11 	call	0x2330	; 0x2330 <LCD_vidGotoXY>
	LCD_vidWriteInt((s16)SET_TEMP);
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	88 2f       	mov	r24, r24
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	0e 94 da 11 	call	0x23b4	; 0x23b4 <LCD_vidWriteInt>
	LCD_vidGotoXY((u8)10,(u8)0);
    249a:	8a e0       	ldi	r24, 0x0A	; 10
    249c:	60 e0       	ldi	r22, 0x00	; 0
    249e:	0e 94 98 11 	call	0x2330	; 0x2330 <LCD_vidGotoXY>
	LCD_vidWriteString("CRT:00");
    24a2:	84 e8       	ldi	r24, 0x84	; 132
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	0e 94 6f 11 	call	0x22de	; 0x22de <LCD_vidWriteString>
	LCD_vidGotoXY((u8)14,(u8)0);
    24aa:	8e e0       	ldi	r24, 0x0E	; 14
    24ac:	60 e0       	ldi	r22, 0x00	; 0
    24ae:	0e 94 98 11 	call	0x2330	; 0x2330 <LCD_vidGotoXY>
	LCD_vidWriteInt((s16)CRT_TEMP);
    24b2:	8a 81       	ldd	r24, Y+2	; 0x02
    24b4:	88 2f       	mov	r24, r24
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	0e 94 da 11 	call	0x23b4	; 0x23b4 <LCD_vidWriteInt>
	LCD_vidGotoXY((u8)0,(u8)1);
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	61 e0       	ldi	r22, 0x01	; 1
    24c0:	0e 94 98 11 	call	0x2330	; 0x2330 <LCD_vidGotoXY>
	LCD_vidWriteString("STATE:");
    24c4:	8b e8       	ldi	r24, 0x8B	; 139
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	0e 94 6f 11 	call	0x22de	; 0x22de <LCD_vidWriteString>

	LCD_STATE(Set_State);
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_STATE>
}
    24d2:	0f 90       	pop	r0
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	08 95       	ret

000024de <combine>:


u8 combine(u8 a, u8 b) {
    24de:	df 93       	push	r29
    24e0:	cf 93       	push	r28
    24e2:	00 d0       	rcall	.+0      	; 0x24e4 <combine+0x6>
    24e4:	00 d0       	rcall	.+0      	; 0x24e6 <combine+0x8>
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
    24ea:	8b 83       	std	Y+3, r24	; 0x03
    24ec:	6c 83       	std	Y+4, r22	; 0x04
   u8 times = 1;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	8a 83       	std	Y+2, r24	; 0x02
   u8 result=0;
    24f2:	19 82       	std	Y+1, r1	; 0x01
    24f4:	0e c0       	rjmp	.+28     	; 0x2512 <combine+0x34>
   while (times <= b){
      times = (times) * ((u8)10);
    24f6:	8a 81       	ldd	r24, Y+2	; 0x02
    24f8:	88 2f       	mov	r24, r24
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	9c 01       	movw	r18, r24
    24fe:	22 0f       	add	r18, r18
    2500:	33 1f       	adc	r19, r19
    2502:	c9 01       	movw	r24, r18
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	88 0f       	add	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	82 0f       	add	r24, r18
    250e:	93 1f       	adc	r25, r19
    2510:	8a 83       	std	Y+2, r24	; 0x02


u8 combine(u8 a, u8 b) {
   u8 times = 1;
   u8 result=0;
   while (times <= b){
    2512:	9a 81       	ldd	r25, Y+2	; 0x02
    2514:	8c 81       	ldd	r24, Y+4	; 0x04
    2516:	89 17       	cp	r24, r25
    2518:	70 f7       	brcc	.-36     	; 0x24f6 <combine+0x18>
      times = (times) * ((u8)10);
   }
   result=(a*times) + b;
    251a:	9b 81       	ldd	r25, Y+3	; 0x03
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	98 9f       	mul	r25, r24
    2520:	90 2d       	mov	r25, r0
    2522:	11 24       	eor	r1, r1
    2524:	8c 81       	ldd	r24, Y+4	; 0x04
    2526:	89 0f       	add	r24, r25
    2528:	89 83       	std	Y+1, r24	; 0x01
   return result;
    252a:	89 81       	ldd	r24, Y+1	; 0x01
}
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	cf 91       	pop	r28
    2536:	df 91       	pop	r29
    2538:	08 95       	ret

0000253a <KeyPad_SET_Temp>:
u8 KeyPad_SET_Temp(void){
    253a:	df 93       	push	r29
    253c:	cf 93       	push	r28
    253e:	00 d0       	rcall	.+0      	; 0x2540 <KeyPad_SET_Temp+0x6>
    2540:	0f 92       	push	r0
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
	u8 one,ten,st_TEMP=0;
    2546:	19 82       	std	Y+1, r1	; 0x01
	one=KeyPad_getPressedKey();
    2548:	0e 94 86 14 	call	0x290c	; 0x290c <KeyPad_getPressedKey>
    254c:	8b 83       	std	Y+3, r24	; 0x03
	LCD_vidGotoXY((u8)4,(u8)0);
    254e:	84 e0       	ldi	r24, 0x04	; 4
    2550:	60 e0       	ldi	r22, 0x00	; 0
    2552:	0e 94 98 11 	call	0x2330	; 0x2330 <LCD_vidGotoXY>
	LCD_vidWriteInt((s16)one);
    2556:	8b 81       	ldd	r24, Y+3	; 0x03
    2558:	88 2f       	mov	r24, r24
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	0e 94 da 11 	call	0x23b4	; 0x23b4 <LCD_vidWriteInt>

	ten=KeyPad_getPressedKey();
    2560:	0e 94 86 14 	call	0x290c	; 0x290c <KeyPad_getPressedKey>
    2564:	8a 83       	std	Y+2, r24	; 0x02
	LCD_vidGotoXY((u8)5,(u8)0);
    2566:	85 e0       	ldi	r24, 0x05	; 5
    2568:	60 e0       	ldi	r22, 0x00	; 0
    256a:	0e 94 98 11 	call	0x2330	; 0x2330 <LCD_vidGotoXY>
	LCD_vidWriteInt((s16)ten);
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	88 2f       	mov	r24, r24
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	0e 94 da 11 	call	0x23b4	; 0x23b4 <LCD_vidWriteInt>
	st_TEMP=combine(one,ten);
    2578:	8b 81       	ldd	r24, Y+3	; 0x03
    257a:	6a 81       	ldd	r22, Y+2	; 0x02
    257c:	0e 94 6f 12 	call	0x24de	; 0x24de <combine>
    2580:	89 83       	std	Y+1, r24	; 0x01
	return st_TEMP;
    2582:	89 81       	ldd	r24, Y+1	; 0x01
}
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <Welcome_Screen>:
void Welcome_Screen(void){
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    2598:	6f 97       	sbiw	r28, 0x1f	; 31
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	de bf       	out	0x3e, r29	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	cd bf       	out	0x3d, r28	; 61
    u8 right,out_loop,left;

	for(out_loop=(u8)0;out_loop<(u8)3;out_loop++){
    25a4:	1e 8e       	std	Y+30, r1	; 0x1e
    25a6:	10 c1       	rjmp	.+544    	; 0x27c8 <Welcome_Screen+0x238>
		for( right=(u8)0;right<(u8)8;right++){
    25a8:	1f 8e       	std	Y+31, r1	; 0x1f
    25aa:	80 c0       	rjmp	.+256    	; 0x26ac <Welcome_Screen+0x11c>
			LCD_vidGotoXY((u8)right,(u8)0);
    25ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25ae:	60 e0       	ldi	r22, 0x00	; 0
    25b0:	0e 94 98 11 	call	0x2330	; 0x2330 <LCD_vidGotoXY>
			LCD_vidWriteString("WELCOME");
    25b4:	82 e9       	ldi	r24, 0x92	; 146
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	0e 94 6f 11 	call	0x22de	; 0x22de <LCD_vidWriteString>
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	a8 ec       	ldi	r26, 0xC8	; 200
    25c2:	b2 e4       	ldi	r27, 0x42	; 66
    25c4:	89 8f       	std	Y+25, r24	; 0x19
    25c6:	9a 8f       	std	Y+26, r25	; 0x1a
    25c8:	ab 8f       	std	Y+27, r26	; 0x1b
    25ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25cc:	69 8d       	ldd	r22, Y+25	; 0x19
    25ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	4a e7       	ldi	r20, 0x7A	; 122
    25da:	53 e4       	ldi	r21, 0x43	; 67
    25dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	8d 8b       	std	Y+21, r24	; 0x15
    25e6:	9e 8b       	std	Y+22, r25	; 0x16
    25e8:	af 8b       	std	Y+23, r26	; 0x17
    25ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25ec:	6d 89       	ldd	r22, Y+21	; 0x15
    25ee:	7e 89       	ldd	r23, Y+22	; 0x16
    25f0:	8f 89       	ldd	r24, Y+23	; 0x17
    25f2:	98 8d       	ldd	r25, Y+24	; 0x18
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	40 e8       	ldi	r20, 0x80	; 128
    25fa:	5f e3       	ldi	r21, 0x3F	; 63
    25fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2600:	88 23       	and	r24, r24
    2602:	2c f4       	brge	.+10     	; 0x260e <Welcome_Screen+0x7e>
		__ticks = 1;
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	9c 8b       	std	Y+20, r25	; 0x14
    260a:	8b 8b       	std	Y+19, r24	; 0x13
    260c:	3f c0       	rjmp	.+126    	; 0x268c <Welcome_Screen+0xfc>
	else if (__tmp > 65535)
    260e:	6d 89       	ldd	r22, Y+21	; 0x15
    2610:	7e 89       	ldd	r23, Y+22	; 0x16
    2612:	8f 89       	ldd	r24, Y+23	; 0x17
    2614:	98 8d       	ldd	r25, Y+24	; 0x18
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	3f ef       	ldi	r19, 0xFF	; 255
    261a:	4f e7       	ldi	r20, 0x7F	; 127
    261c:	57 e4       	ldi	r21, 0x47	; 71
    261e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2622:	18 16       	cp	r1, r24
    2624:	4c f5       	brge	.+82     	; 0x2678 <Welcome_Screen+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2626:	69 8d       	ldd	r22, Y+25	; 0x19
    2628:	7a 8d       	ldd	r23, Y+26	; 0x1a
    262a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    262c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e2       	ldi	r20, 0x20	; 32
    2634:	51 e4       	ldi	r21, 0x41	; 65
    2636:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	bc 01       	movw	r22, r24
    2640:	cd 01       	movw	r24, r26
    2642:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	9c 8b       	std	Y+20, r25	; 0x14
    264c:	8b 8b       	std	Y+19, r24	; 0x13
    264e:	0f c0       	rjmp	.+30     	; 0x266e <Welcome_Screen+0xde>
    2650:	89 e1       	ldi	r24, 0x19	; 25
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	9a 8b       	std	Y+18, r25	; 0x12
    2656:	89 8b       	std	Y+17, r24	; 0x11
    2658:	89 89       	ldd	r24, Y+17	; 0x11
    265a:	9a 89       	ldd	r25, Y+18	; 0x12
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	f1 f7       	brne	.-4      	; 0x265c <Welcome_Screen+0xcc>
    2660:	9a 8b       	std	Y+18, r25	; 0x12
    2662:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2664:	8b 89       	ldd	r24, Y+19	; 0x13
    2666:	9c 89       	ldd	r25, Y+20	; 0x14
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	9c 8b       	std	Y+20, r25	; 0x14
    266c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    266e:	8b 89       	ldd	r24, Y+19	; 0x13
    2670:	9c 89       	ldd	r25, Y+20	; 0x14
    2672:	00 97       	sbiw	r24, 0x00	; 0
    2674:	69 f7       	brne	.-38     	; 0x2650 <Welcome_Screen+0xc0>
    2676:	14 c0       	rjmp	.+40     	; 0x26a0 <Welcome_Screen+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2678:	6d 89       	ldd	r22, Y+21	; 0x15
    267a:	7e 89       	ldd	r23, Y+22	; 0x16
    267c:	8f 89       	ldd	r24, Y+23	; 0x17
    267e:	98 8d       	ldd	r25, Y+24	; 0x18
    2680:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	9c 8b       	std	Y+20, r25	; 0x14
    268a:	8b 8b       	std	Y+19, r24	; 0x13
    268c:	8b 89       	ldd	r24, Y+19	; 0x13
    268e:	9c 89       	ldd	r25, Y+20	; 0x14
    2690:	98 8b       	std	Y+16, r25	; 0x10
    2692:	8f 87       	std	Y+15, r24	; 0x0f
    2694:	8f 85       	ldd	r24, Y+15	; 0x0f
    2696:	98 89       	ldd	r25, Y+16	; 0x10
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <Welcome_Screen+0x108>
    269c:	98 8b       	std	Y+16, r25	; 0x10
    269e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			LCD_vidSendCommand((u8)CLEAR_COMMAND);
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_vidSendCommand>
}
void Welcome_Screen(void){
    u8 right,out_loop,left;

	for(out_loop=(u8)0;out_loop<(u8)3;out_loop++){
		for( right=(u8)0;right<(u8)8;right++){
    26a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26a8:	8f 5f       	subi	r24, 0xFF	; 255
    26aa:	8f 8f       	std	Y+31, r24	; 0x1f
    26ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26ae:	88 30       	cpi	r24, 0x08	; 8
    26b0:	08 f4       	brcc	.+2      	; 0x26b4 <Welcome_Screen+0x124>
    26b2:	7c cf       	rjmp	.-264    	; 0x25ac <Welcome_Screen+0x1c>
			LCD_vidGotoXY((u8)right,(u8)0);
			LCD_vidWriteString("WELCOME");
			_delay_ms(100);
			LCD_vidSendCommand((u8)CLEAR_COMMAND);
		}
		for(left=(u8)8;left>(u8)0;left--){
    26b4:	88 e0       	ldi	r24, 0x08	; 8
    26b6:	8d 8f       	std	Y+29, r24	; 0x1d
    26b8:	80 c0       	rjmp	.+256    	; 0x27ba <Welcome_Screen+0x22a>
			LCD_vidGotoXY((u8)left,(u8)0);
    26ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26bc:	60 e0       	ldi	r22, 0x00	; 0
    26be:	0e 94 98 11 	call	0x2330	; 0x2330 <LCD_vidGotoXY>
			LCD_vidWriteString("WELCOME");
    26c2:	82 e9       	ldi	r24, 0x92	; 146
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	0e 94 6f 11 	call	0x22de	; 0x22de <LCD_vidWriteString>
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	a8 ec       	ldi	r26, 0xC8	; 200
    26d0:	b2 e4       	ldi	r27, 0x42	; 66
    26d2:	8b 87       	std	Y+11, r24	; 0x0b
    26d4:	9c 87       	std	Y+12, r25	; 0x0c
    26d6:	ad 87       	std	Y+13, r26	; 0x0d
    26d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26da:	6b 85       	ldd	r22, Y+11	; 0x0b
    26dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    26de:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	4a e7       	ldi	r20, 0x7A	; 122
    26e8:	53 e4       	ldi	r21, 0x43	; 67
    26ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	8f 83       	std	Y+7, r24	; 0x07
    26f4:	98 87       	std	Y+8, r25	; 0x08
    26f6:	a9 87       	std	Y+9, r26	; 0x09
    26f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26fa:	6f 81       	ldd	r22, Y+7	; 0x07
    26fc:	78 85       	ldd	r23, Y+8	; 0x08
    26fe:	89 85       	ldd	r24, Y+9	; 0x09
    2700:	9a 85       	ldd	r25, Y+10	; 0x0a
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e8       	ldi	r20, 0x80	; 128
    2708:	5f e3       	ldi	r21, 0x3F	; 63
    270a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    270e:	88 23       	and	r24, r24
    2710:	2c f4       	brge	.+10     	; 0x271c <Welcome_Screen+0x18c>
		__ticks = 1;
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	9e 83       	std	Y+6, r25	; 0x06
    2718:	8d 83       	std	Y+5, r24	; 0x05
    271a:	3f c0       	rjmp	.+126    	; 0x279a <Welcome_Screen+0x20a>
	else if (__tmp > 65535)
    271c:	6f 81       	ldd	r22, Y+7	; 0x07
    271e:	78 85       	ldd	r23, Y+8	; 0x08
    2720:	89 85       	ldd	r24, Y+9	; 0x09
    2722:	9a 85       	ldd	r25, Y+10	; 0x0a
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	3f ef       	ldi	r19, 0xFF	; 255
    2728:	4f e7       	ldi	r20, 0x7F	; 127
    272a:	57 e4       	ldi	r21, 0x47	; 71
    272c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2730:	18 16       	cp	r1, r24
    2732:	4c f5       	brge	.+82     	; 0x2786 <Welcome_Screen+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2734:	6b 85       	ldd	r22, Y+11	; 0x0b
    2736:	7c 85       	ldd	r23, Y+12	; 0x0c
    2738:	8d 85       	ldd	r24, Y+13	; 0x0d
    273a:	9e 85       	ldd	r25, Y+14	; 0x0e
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	40 e2       	ldi	r20, 0x20	; 32
    2742:	51 e4       	ldi	r21, 0x41	; 65
    2744:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	bc 01       	movw	r22, r24
    274e:	cd 01       	movw	r24, r26
    2750:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	9e 83       	std	Y+6, r25	; 0x06
    275a:	8d 83       	std	Y+5, r24	; 0x05
    275c:	0f c0       	rjmp	.+30     	; 0x277c <Welcome_Screen+0x1ec>
    275e:	89 e1       	ldi	r24, 0x19	; 25
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	9c 83       	std	Y+4, r25	; 0x04
    2764:	8b 83       	std	Y+3, r24	; 0x03
    2766:	8b 81       	ldd	r24, Y+3	; 0x03
    2768:	9c 81       	ldd	r25, Y+4	; 0x04
    276a:	01 97       	sbiw	r24, 0x01	; 1
    276c:	f1 f7       	brne	.-4      	; 0x276a <Welcome_Screen+0x1da>
    276e:	9c 83       	std	Y+4, r25	; 0x04
    2770:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2772:	8d 81       	ldd	r24, Y+5	; 0x05
    2774:	9e 81       	ldd	r25, Y+6	; 0x06
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	9e 83       	std	Y+6, r25	; 0x06
    277a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    277c:	8d 81       	ldd	r24, Y+5	; 0x05
    277e:	9e 81       	ldd	r25, Y+6	; 0x06
    2780:	00 97       	sbiw	r24, 0x00	; 0
    2782:	69 f7       	brne	.-38     	; 0x275e <Welcome_Screen+0x1ce>
    2784:	14 c0       	rjmp	.+40     	; 0x27ae <Welcome_Screen+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2786:	6f 81       	ldd	r22, Y+7	; 0x07
    2788:	78 85       	ldd	r23, Y+8	; 0x08
    278a:	89 85       	ldd	r24, Y+9	; 0x09
    278c:	9a 85       	ldd	r25, Y+10	; 0x0a
    278e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	9e 83       	std	Y+6, r25	; 0x06
    2798:	8d 83       	std	Y+5, r24	; 0x05
    279a:	8d 81       	ldd	r24, Y+5	; 0x05
    279c:	9e 81       	ldd	r25, Y+6	; 0x06
    279e:	9a 83       	std	Y+2, r25	; 0x02
    27a0:	89 83       	std	Y+1, r24	; 0x01
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	9a 81       	ldd	r25, Y+2	; 0x02
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	f1 f7       	brne	.-4      	; 0x27a6 <Welcome_Screen+0x216>
    27aa:	9a 83       	std	Y+2, r25	; 0x02
    27ac:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			LCD_vidSendCommand((u8)CLEAR_COMMAND);
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_vidSendCommand>
			LCD_vidGotoXY((u8)right,(u8)0);
			LCD_vidWriteString("WELCOME");
			_delay_ms(100);
			LCD_vidSendCommand((u8)CLEAR_COMMAND);
		}
		for(left=(u8)8;left>(u8)0;left--){
    27b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27b6:	81 50       	subi	r24, 0x01	; 1
    27b8:	8d 8f       	std	Y+29, r24	; 0x1d
    27ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27bc:	88 23       	and	r24, r24
    27be:	09 f0       	breq	.+2      	; 0x27c2 <Welcome_Screen+0x232>
    27c0:	7c cf       	rjmp	.-264    	; 0x26ba <Welcome_Screen+0x12a>
	return st_TEMP;
}
void Welcome_Screen(void){
    u8 right,out_loop,left;

	for(out_loop=(u8)0;out_loop<(u8)3;out_loop++){
    27c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27c4:	8f 5f       	subi	r24, 0xFF	; 255
    27c6:	8e 8f       	std	Y+30, r24	; 0x1e
    27c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27ca:	83 30       	cpi	r24, 0x03	; 3
    27cc:	08 f4       	brcc	.+2      	; 0x27d0 <Welcome_Screen+0x240>
    27ce:	ec ce       	rjmp	.-552    	; 0x25a8 <Welcome_Screen+0x18>
			LCD_vidWriteString("WELCOME");
			_delay_ms(100);
			LCD_vidSendCommand((u8)CLEAR_COMMAND);
		}
	}
}
    27d0:	6f 96       	adiw	r28, 0x1f	; 31
    27d2:	0f b6       	in	r0, 0x3f	; 63
    27d4:	f8 94       	cli
    27d6:	de bf       	out	0x3e, r29	; 62
    27d8:	0f be       	out	0x3f, r0	; 63
    27da:	cd bf       	out	0x3d, r28	; 61
    27dc:	cf 91       	pop	r28
    27de:	df 91       	pop	r29
    27e0:	08 95       	ret

000027e2 <main>:

void main(void)

{
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
    27ea:	2f 97       	sbiw	r28, 0x0f	; 15
    27ec:	0f b6       	in	r0, 0x3f	; 63
    27ee:	f8 94       	cli
    27f0:	de bf       	out	0x3e, r29	; 62
    27f2:	0f be       	out	0x3f, r0	; 63
    27f4:	cd bf       	out	0x3d, r28	; 61
	/*u8 ind=0;*/
	LCD_vidInit();
    27f6:	0e 94 3f 09 	call	0x127e	; 0x127e <LCD_vidInit>
	u8 ST_TEMP=0;
    27fa:	1f 86       	std	Y+15, r1	; 0x0f
	Welcome_Screen();
    27fc:	0e 94 c8 12 	call	0x2590	; 0x2590 <Welcome_Screen>
	LCD_vidSendCommand((u8)CLEAR_COMMAND);
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_vidSendCommand>
	IDLE_Screen((u8)25,(u8)00,(STATE)STANDBY);
    2806:	89 e1       	ldi	r24, 0x19	; 25
    2808:	60 e0       	ldi	r22, 0x00	; 0
    280a:	41 e0       	ldi	r20, 0x01	; 1
    280c:	0e 94 33 12 	call	0x2466	; 0x2466 <IDLE_Screen>

	ST_TEMP=KeyPad_SET_Temp();
    2810:	0e 94 9d 12 	call	0x253a	; 0x253a <KeyPad_SET_Temp>
    2814:	8f 87       	std	Y+15, r24	; 0x0f
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	aa ef       	ldi	r26, 0xFA	; 250
    281c:	b4 e4       	ldi	r27, 0x44	; 68
    281e:	8b 87       	std	Y+11, r24	; 0x0b
    2820:	9c 87       	std	Y+12, r25	; 0x0c
    2822:	ad 87       	std	Y+13, r26	; 0x0d
    2824:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2826:	6b 85       	ldd	r22, Y+11	; 0x0b
    2828:	7c 85       	ldd	r23, Y+12	; 0x0c
    282a:	8d 85       	ldd	r24, Y+13	; 0x0d
    282c:	9e 85       	ldd	r25, Y+14	; 0x0e
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	4a e7       	ldi	r20, 0x7A	; 122
    2834:	53 e4       	ldi	r21, 0x43	; 67
    2836:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	8f 83       	std	Y+7, r24	; 0x07
    2840:	98 87       	std	Y+8, r25	; 0x08
    2842:	a9 87       	std	Y+9, r26	; 0x09
    2844:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2846:	6f 81       	ldd	r22, Y+7	; 0x07
    2848:	78 85       	ldd	r23, Y+8	; 0x08
    284a:	89 85       	ldd	r24, Y+9	; 0x09
    284c:	9a 85       	ldd	r25, Y+10	; 0x0a
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	40 e8       	ldi	r20, 0x80	; 128
    2854:	5f e3       	ldi	r21, 0x3F	; 63
    2856:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    285a:	88 23       	and	r24, r24
    285c:	2c f4       	brge	.+10     	; 0x2868 <main+0x86>
		__ticks = 1;
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	9e 83       	std	Y+6, r25	; 0x06
    2864:	8d 83       	std	Y+5, r24	; 0x05
    2866:	3f c0       	rjmp	.+126    	; 0x28e6 <main+0x104>
	else if (__tmp > 65535)
    2868:	6f 81       	ldd	r22, Y+7	; 0x07
    286a:	78 85       	ldd	r23, Y+8	; 0x08
    286c:	89 85       	ldd	r24, Y+9	; 0x09
    286e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	3f ef       	ldi	r19, 0xFF	; 255
    2874:	4f e7       	ldi	r20, 0x7F	; 127
    2876:	57 e4       	ldi	r21, 0x47	; 71
    2878:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    287c:	18 16       	cp	r1, r24
    287e:	4c f5       	brge	.+82     	; 0x28d2 <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2880:	6b 85       	ldd	r22, Y+11	; 0x0b
    2882:	7c 85       	ldd	r23, Y+12	; 0x0c
    2884:	8d 85       	ldd	r24, Y+13	; 0x0d
    2886:	9e 85       	ldd	r25, Y+14	; 0x0e
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	40 e2       	ldi	r20, 0x20	; 32
    288e:	51 e4       	ldi	r21, 0x41	; 65
    2890:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	bc 01       	movw	r22, r24
    289a:	cd 01       	movw	r24, r26
    289c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	9e 83       	std	Y+6, r25	; 0x06
    28a6:	8d 83       	std	Y+5, r24	; 0x05
    28a8:	0f c0       	rjmp	.+30     	; 0x28c8 <main+0xe6>
    28aa:	89 e1       	ldi	r24, 0x19	; 25
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	9c 83       	std	Y+4, r25	; 0x04
    28b0:	8b 83       	std	Y+3, r24	; 0x03
    28b2:	8b 81       	ldd	r24, Y+3	; 0x03
    28b4:	9c 81       	ldd	r25, Y+4	; 0x04
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <main+0xd4>
    28ba:	9c 83       	std	Y+4, r25	; 0x04
    28bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28be:	8d 81       	ldd	r24, Y+5	; 0x05
    28c0:	9e 81       	ldd	r25, Y+6	; 0x06
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	9e 83       	std	Y+6, r25	; 0x06
    28c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ca:	9e 81       	ldd	r25, Y+6	; 0x06
    28cc:	00 97       	sbiw	r24, 0x00	; 0
    28ce:	69 f7       	brne	.-38     	; 0x28aa <main+0xc8>
    28d0:	14 c0       	rjmp	.+40     	; 0x28fa <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d2:	6f 81       	ldd	r22, Y+7	; 0x07
    28d4:	78 85       	ldd	r23, Y+8	; 0x08
    28d6:	89 85       	ldd	r24, Y+9	; 0x09
    28d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	9e 83       	std	Y+6, r25	; 0x06
    28e4:	8d 83       	std	Y+5, r24	; 0x05
    28e6:	8d 81       	ldd	r24, Y+5	; 0x05
    28e8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ea:	9a 83       	std	Y+2, r25	; 0x02
    28ec:	89 83       	std	Y+1, r24	; 0x01
    28ee:	89 81       	ldd	r24, Y+1	; 0x01
    28f0:	9a 81       	ldd	r25, Y+2	; 0x02
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <main+0x110>
    28f6:	9a 83       	std	Y+2, r25	; 0x02
    28f8:	89 83       	std	Y+1, r24	; 0x01
		LCD_vidSendCommand((u8)CLEAR_COMMAND);
		IDLE_Screen((u8)ST_TEMP,(u8)00,OPERATION);
	}
	*/

}
    28fa:	2f 96       	adiw	r28, 0x0f	; 15
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	f8 94       	cli
    2900:	de bf       	out	0x3e, r29	; 62
    2902:	0f be       	out	0x3f, r0	; 63
    2904:	cd bf       	out	0x3d, r28	; 61
    2906:	cf 91       	pop	r28
    2908:	df 91       	pop	r29
    290a:	08 95       	ret

0000290c <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
u8 KeyPad_getPressedKey(void)
{
    290c:	df 93       	push	r29
    290e:	cf 93       	push	r28
    2910:	00 d0       	rcall	.+0      	; 0x2912 <KeyPad_getPressedKey+0x6>
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
	u8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    2916:	1a 82       	std	Y+2, r1	; 0x02
    2918:	4d c0       	rjmp	.+154    	; 0x29b4 <KeyPad_getPressedKey+0xa8>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col);
    291a:	ea e3       	ldi	r30, 0x3A	; 58
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	8a 81       	ldd	r24, Y+2	; 0x02
    2920:	28 2f       	mov	r18, r24
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	80 e1       	ldi	r24, 0x10	; 16
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	02 c0       	rjmp	.+4      	; 0x292e <KeyPad_getPressedKey+0x22>
    292a:	88 0f       	add	r24, r24
    292c:	99 1f       	adc	r25, r25
    292e:	2a 95       	dec	r18
    2930:	e2 f7       	brpl	.-8      	; 0x292a <KeyPad_getPressedKey+0x1e>
    2932:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    2934:	eb e3       	ldi	r30, 0x3B	; 59
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	8a 81       	ldd	r24, Y+2	; 0x02
    293a:	28 2f       	mov	r18, r24
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	80 e1       	ldi	r24, 0x10	; 16
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	02 2e       	mov	r0, r18
    2944:	02 c0       	rjmp	.+4      	; 0x294a <KeyPad_getPressedKey+0x3e>
    2946:	88 0f       	add	r24, r24
    2948:	99 1f       	adc	r25, r25
    294a:	0a 94       	dec	r0
    294c:	e2 f7       	brpl	.-8      	; 0x2946 <KeyPad_getPressedKey+0x3a>
    294e:	80 95       	com	r24
    2950:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
    2952:	19 82       	std	Y+1, r1	; 0x01
    2954:	29 c0       	rjmp	.+82     	; 0x29a8 <KeyPad_getPressedKey+0x9c>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    2956:	e9 e3       	ldi	r30, 0x39	; 57
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	28 2f       	mov	r18, r24
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	88 2f       	mov	r24, r24
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	a9 01       	movw	r20, r18
    2968:	02 c0       	rjmp	.+4      	; 0x296e <KeyPad_getPressedKey+0x62>
    296a:	55 95       	asr	r21
    296c:	47 95       	ror	r20
    296e:	8a 95       	dec	r24
    2970:	e2 f7       	brpl	.-8      	; 0x296a <KeyPad_getPressedKey+0x5e>
    2972:	ca 01       	movw	r24, r20
    2974:	81 70       	andi	r24, 0x01	; 1
    2976:	90 70       	andi	r25, 0x00	; 0
    2978:	00 97       	sbiw	r24, 0x00	; 0
    297a:	99 f4       	brne	.+38     	; 0x29a2 <KeyPad_getPressedKey+0x96>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	28 2f       	mov	r18, r24
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	c9 01       	movw	r24, r18
    2984:	88 0f       	add	r24, r24
    2986:	99 1f       	adc	r25, r25
    2988:	82 0f       	add	r24, r18
    298a:	93 1f       	adc	r25, r19
    298c:	98 2f       	mov	r25, r24
    298e:	8a 81       	ldd	r24, Y+2	; 0x02
    2990:	89 0f       	add	r24, r25
    2992:	8f 5f       	subi	r24, 0xFF	; 255
    2994:	0e 94 df 14 	call	0x29be	; 0x29be <KeyPad_4x3_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    29a2:	89 81       	ldd	r24, Y+1	; 0x01
    29a4:	8f 5f       	subi	r24, 0xFF	; 255
    29a6:	89 83       	std	Y+1, r24	; 0x01
    29a8:	89 81       	ldd	r24, Y+1	; 0x01
    29aa:	84 30       	cpi	r24, 0x04	; 4
    29ac:	a0 f2       	brcs	.-88     	; 0x2956 <KeyPad_getPressedKey+0x4a>
u8 KeyPad_getPressedKey(void)
{
	u8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    29ae:	8a 81       	ldd	r24, Y+2	; 0x02
    29b0:	8f 5f       	subi	r24, 0xFF	; 255
    29b2:	8a 83       	std	Y+2, r24	; 0x02
    29b4:	8a 81       	ldd	r24, Y+2	; 0x02
    29b6:	83 30       	cpi	r24, 0x03	; 3
    29b8:	08 f4       	brcc	.+2      	; 0x29bc <KeyPad_getPressedKey+0xb0>
    29ba:	af cf       	rjmp	.-162    	; 0x291a <KeyPad_getPressedKey+0xe>
    29bc:	ac cf       	rjmp	.-168    	; 0x2916 <KeyPad_getPressedKey+0xa>

000029be <KeyPad_4x3_adjustKeyNumber>:
}

#if (N_col == 3) 

static u8 KeyPad_4x3_adjustKeyNumber(u8 button_number)
{
    29be:	df 93       	push	r29
    29c0:	cf 93       	push	r28
    29c2:	00 d0       	rcall	.+0      	; 0x29c4 <KeyPad_4x3_adjustKeyNumber+0x6>
    29c4:	00 d0       	rcall	.+0      	; 0x29c6 <KeyPad_4x3_adjustKeyNumber+0x8>
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
    29ca:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	28 2f       	mov	r18, r24
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	3c 83       	std	Y+4, r19	; 0x04
    29d4:	2b 83       	std	Y+3, r18	; 0x03
    29d6:	8b 81       	ldd	r24, Y+3	; 0x03
    29d8:	9c 81       	ldd	r25, Y+4	; 0x04
    29da:	8a 30       	cpi	r24, 0x0A	; 10
    29dc:	91 05       	cpc	r25, r1
    29de:	81 f0       	breq	.+32     	; 0x2a00 <KeyPad_4x3_adjustKeyNumber+0x42>
    29e0:	2b 81       	ldd	r18, Y+3	; 0x03
    29e2:	3c 81       	ldd	r19, Y+4	; 0x04
    29e4:	2a 30       	cpi	r18, 0x0A	; 10
    29e6:	31 05       	cpc	r19, r1
    29e8:	9c f0       	brlt	.+38     	; 0x2a10 <KeyPad_4x3_adjustKeyNumber+0x52>
    29ea:	8b 81       	ldd	r24, Y+3	; 0x03
    29ec:	9c 81       	ldd	r25, Y+4	; 0x04
    29ee:	8b 30       	cpi	r24, 0x0B	; 11
    29f0:	91 05       	cpc	r25, r1
    29f2:	49 f0       	breq	.+18     	; 0x2a06 <KeyPad_4x3_adjustKeyNumber+0x48>
    29f4:	2b 81       	ldd	r18, Y+3	; 0x03
    29f6:	3c 81       	ldd	r19, Y+4	; 0x04
    29f8:	2c 30       	cpi	r18, 0x0C	; 12
    29fa:	31 05       	cpc	r19, r1
    29fc:	31 f0       	breq	.+12     	; 0x2a0a <KeyPad_4x3_adjustKeyNumber+0x4c>
    29fe:	08 c0       	rjmp	.+16     	; 0x2a10 <KeyPad_4x3_adjustKeyNumber+0x52>
	{
		case 10: return '*'; // ASCII Code of *
    2a00:	3a e2       	ldi	r19, 0x2A	; 42
    2a02:	3a 83       	std	Y+2, r19	; 0x02
    2a04:	07 c0       	rjmp	.+14     	; 0x2a14 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		case 11: return 0;
    2a06:	1a 82       	std	Y+2, r1	; 0x02
    2a08:	05 c0       	rjmp	.+10     	; 0x2a14 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;		
		case 12: return '#'; // ASCII Code of #
    2a0a:	83 e2       	ldi	r24, 0x23	; 35
    2a0c:	8a 83       	std	Y+2, r24	; 0x02
    2a0e:	02 c0       	rjmp	.+4      	; 0x2a14 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		default: return button_number;								 						
    2a10:	99 81       	ldd	r25, Y+1	; 0x01
    2a12:	9a 83       	std	Y+2, r25	; 0x02
    2a14:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <__prologue_saves__>:
    2a24:	2f 92       	push	r2
    2a26:	3f 92       	push	r3
    2a28:	4f 92       	push	r4
    2a2a:	5f 92       	push	r5
    2a2c:	6f 92       	push	r6
    2a2e:	7f 92       	push	r7
    2a30:	8f 92       	push	r8
    2a32:	9f 92       	push	r9
    2a34:	af 92       	push	r10
    2a36:	bf 92       	push	r11
    2a38:	cf 92       	push	r12
    2a3a:	df 92       	push	r13
    2a3c:	ef 92       	push	r14
    2a3e:	ff 92       	push	r15
    2a40:	0f 93       	push	r16
    2a42:	1f 93       	push	r17
    2a44:	cf 93       	push	r28
    2a46:	df 93       	push	r29
    2a48:	cd b7       	in	r28, 0x3d	; 61
    2a4a:	de b7       	in	r29, 0x3e	; 62
    2a4c:	ca 1b       	sub	r28, r26
    2a4e:	db 0b       	sbc	r29, r27
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	de bf       	out	0x3e, r29	; 62
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	cd bf       	out	0x3d, r28	; 61
    2a5a:	09 94       	ijmp

00002a5c <__epilogue_restores__>:
    2a5c:	2a 88       	ldd	r2, Y+18	; 0x12
    2a5e:	39 88       	ldd	r3, Y+17	; 0x11
    2a60:	48 88       	ldd	r4, Y+16	; 0x10
    2a62:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a64:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a66:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a68:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a6a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a6c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a6e:	b9 84       	ldd	r11, Y+9	; 0x09
    2a70:	c8 84       	ldd	r12, Y+8	; 0x08
    2a72:	df 80       	ldd	r13, Y+7	; 0x07
    2a74:	ee 80       	ldd	r14, Y+6	; 0x06
    2a76:	fd 80       	ldd	r15, Y+5	; 0x05
    2a78:	0c 81       	ldd	r16, Y+4	; 0x04
    2a7a:	1b 81       	ldd	r17, Y+3	; 0x03
    2a7c:	aa 81       	ldd	r26, Y+2	; 0x02
    2a7e:	b9 81       	ldd	r27, Y+1	; 0x01
    2a80:	ce 0f       	add	r28, r30
    2a82:	d1 1d       	adc	r29, r1
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	de bf       	out	0x3e, r29	; 62
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	cd bf       	out	0x3d, r28	; 61
    2a8e:	ed 01       	movw	r28, r26
    2a90:	08 95       	ret

00002a92 <itoa>:
    2a92:	fb 01       	movw	r30, r22
    2a94:	9f 01       	movw	r18, r30
    2a96:	e8 94       	clt
    2a98:	42 30       	cpi	r20, 0x02	; 2
    2a9a:	c4 f0       	brlt	.+48     	; 0x2acc <itoa+0x3a>
    2a9c:	45 32       	cpi	r20, 0x25	; 37
    2a9e:	b4 f4       	brge	.+44     	; 0x2acc <itoa+0x3a>
    2aa0:	4a 30       	cpi	r20, 0x0A	; 10
    2aa2:	29 f4       	brne	.+10     	; 0x2aae <itoa+0x1c>
    2aa4:	97 fb       	bst	r25, 7
    2aa6:	1e f4       	brtc	.+6      	; 0x2aae <itoa+0x1c>
    2aa8:	90 95       	com	r25
    2aaa:	81 95       	neg	r24
    2aac:	9f 4f       	sbci	r25, 0xFF	; 255
    2aae:	64 2f       	mov	r22, r20
    2ab0:	77 27       	eor	r23, r23
    2ab2:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__udivmodhi4>
    2ab6:	80 5d       	subi	r24, 0xD0	; 208
    2ab8:	8a 33       	cpi	r24, 0x3A	; 58
    2aba:	0c f0       	brlt	.+2      	; 0x2abe <itoa+0x2c>
    2abc:	89 5d       	subi	r24, 0xD9	; 217
    2abe:	81 93       	st	Z+, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	00 97       	sbiw	r24, 0x00	; 0
    2ac4:	a1 f7       	brne	.-24     	; 0x2aae <itoa+0x1c>
    2ac6:	16 f4       	brtc	.+4      	; 0x2acc <itoa+0x3a>
    2ac8:	5d e2       	ldi	r21, 0x2D	; 45
    2aca:	51 93       	st	Z+, r21
    2acc:	10 82       	st	Z, r1
    2ace:	c9 01       	movw	r24, r18
    2ad0:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <strrev>

00002ad4 <strrev>:
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	67 2f       	mov	r22, r23
    2ada:	71 91       	ld	r23, Z+
    2adc:	77 23       	and	r23, r23
    2ade:	e1 f7       	brne	.-8      	; 0x2ad8 <strrev+0x4>
    2ae0:	32 97       	sbiw	r30, 0x02	; 2
    2ae2:	04 c0       	rjmp	.+8      	; 0x2aec <strrev+0x18>
    2ae4:	7c 91       	ld	r23, X
    2ae6:	6d 93       	st	X+, r22
    2ae8:	70 83       	st	Z, r23
    2aea:	62 91       	ld	r22, -Z
    2aec:	ae 17       	cp	r26, r30
    2aee:	bf 07       	cpc	r27, r31
    2af0:	c8 f3       	brcs	.-14     	; 0x2ae4 <strrev+0x10>
    2af2:	08 95       	ret

00002af4 <__udivmodhi4>:
    2af4:	aa 1b       	sub	r26, r26
    2af6:	bb 1b       	sub	r27, r27
    2af8:	51 e1       	ldi	r21, 0x11	; 17
    2afa:	07 c0       	rjmp	.+14     	; 0x2b0a <__udivmodhi4_ep>

00002afc <__udivmodhi4_loop>:
    2afc:	aa 1f       	adc	r26, r26
    2afe:	bb 1f       	adc	r27, r27
    2b00:	a6 17       	cp	r26, r22
    2b02:	b7 07       	cpc	r27, r23
    2b04:	10 f0       	brcs	.+4      	; 0x2b0a <__udivmodhi4_ep>
    2b06:	a6 1b       	sub	r26, r22
    2b08:	b7 0b       	sbc	r27, r23

00002b0a <__udivmodhi4_ep>:
    2b0a:	88 1f       	adc	r24, r24
    2b0c:	99 1f       	adc	r25, r25
    2b0e:	5a 95       	dec	r21
    2b10:	a9 f7       	brne	.-22     	; 0x2afc <__udivmodhi4_loop>
    2b12:	80 95       	com	r24
    2b14:	90 95       	com	r25
    2b16:	bc 01       	movw	r22, r24
    2b18:	cd 01       	movw	r24, r26
    2b1a:	08 95       	ret

00002b1c <_exit>:
    2b1c:	f8 94       	cli

00002b1e <__stop_program>:
    2b1e:	ff cf       	rjmp	.-2      	; 0x2b1e <__stop_program>
